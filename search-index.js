var N = null;var searchIndex = {};
searchIndex["argmin"]={"doc":"Optimizaton toolbox","items":[[0,"prelude","argmin","Definition of all relevant traits # Re-export of all relevant traits",N,N],[0,"macros","argmin::prelude","Macros # Macros",N,N],[8,"ArgminSolver","","Defines the interface to a solver. Usually, there is no need to implement this manually, use the `argmin_derive` crate instead.",N,N],[10,"apply","","apply cost function or operator to a parameter vector",0,N],[10,"gradient","","compute the gradient for a parameter vector",0,N],[10,"hessian","","compute the hessian for a parameter vector",0,N],[10,"modify","","modify the parameter vector",0,N],[10,"cur_param","","return current parameter vector",0,N],[10,"cur_grad","","return current gradient",0,N],[10,"cur_hessian","","return current gradient",0,N],[10,"set_cur_param","","set current parameter vector",0,N],[10,"set_cur_grad","","set current gradient",0,N],[10,"set_cur_hessian","","set current gradient",0,N],[10,"set_best_param","","set current parameter vector",0,N],[10,"run","","Execute the optimization algorithm.",0,[[["self"]],["result",["argminresult","error"]]]],[10,"run_fast","","Execute the optimization algorithm without Ctrl-C handling, logging, writing and anything else which may cost unnecessary time.",0,[[["self"]],["result",["argminresult","error"]]]],[10,"result","","Returns the best solution found during optimization.",0,[[["self"]],["argminresult"]]],[10,"set_termination_reason","","Set termination reason (doesn't terminate yet! -- this is helpful for terminating within the iterations)",0,N],[10,"terminate","","Evaluate all stopping criterions and return the `TerminationReason`",0,[[["self"]],["terminationreason"]]],[10,"set_max_iters","","Set max number of iterations.",0,N],[10,"max_iters","","Get max number of iterations.",0,[[["self"]],["u64"]]],[10,"cur_iter","","Get current iteration number.",0,[[["self"]],["u64"]]],[10,"increment_iter","","Increment the iteration number by one",0,N],[10,"cur_cost","","Get current cost function value",0,[[["self"]],["f64"]]],[10,"set_cur_cost","","Get current cost function value",0,N],[10,"best_cost","","Get best cost function value",0,[[["self"]],["f64"]]],[10,"set_best_cost","","set best cost value",0,N],[10,"set_target_cost","","Set the target cost function value which is used as a stopping criterion",0,N],[10,"add_logger","","Add a logger to the array of loggers",0,N],[10,"add_writer","","Add a writer to the array of writers",0,N],[10,"base_reset","","Reset the base of the algorithm to its initial state",0,N],[10,"increment_cost_func_count","","Increment the cost function evaluation count",0,N],[10,"increase_cost_func_count","","Increaese the cost function evaluation count by a given value",0,N],[10,"cost_func_count","","Return the cost function evaluation count",0,[[["self"]],["u64"]]],[10,"increment_grad_func_count","","Increment the gradient evaluation count",0,N],[10,"increase_grad_func_count","","Increase the gradient evaluation count by a given value",0,N],[10,"grad_func_count","","Return the gradient evaluation count",0,[[["self"]],["u64"]]],[10,"increment_hessian_func_count","","Increment the hessian evaluation count",0,N],[10,"increase_hessian_func_count","","Increase the hessian evaluation count by a given value",0,N],[10,"hessian_func_count","","Return the gradient evaluation count",0,[[["self"]],["u64"]]],[8,"ArgminNextIter","","Main part of every solver: `next_iter` computes one iteration of the algorithm and `init` is executed before these iterations. The `init` method comes with a default implementation which corresponds to doing nothing.",N,N],[16,"Parameters","","Parameter vectors",1,N],[16,"OperatorOutput","","Output of the operator",1,N],[16,"Hessian","","Hessian",1,N],[10,"next_iter","","Computes one iteration of the algorithm.",1,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","","Initializes the algorithm",1,[[["self"]],["result",["error"]]]],[8,"ArgminLog","","Defince the interface every logger needs to expose",N,N],[10,"log_info","","Logs general information (a message `msg` and/or key-value pairs `kv`).",2,[[["self"],["str"],["argminkv"]],["result",["error"]]]],[10,"log_iter","","Logs information from iterations. Only accepts key-value pairs. `log_iter` is made to log to a database or a CSV file. Therefore the structure of the key-value pairs should not change inbetween iterations.",2,[[["self"],["argminkv"]],["result",["error"]]]],[8,"ArgminWrite","","Every writer (which is something that writes parameter vectors somewhere after each iteration) needs to implement this.",N,N],[16,"Param","","",3,N],[10,"write","","Writes the parameter vector somewhere",3,N],[3,"ArgminIterationData","","The datastructure which is returned by the `next_iter` method of the `ArgminNextIter` trait.",N,N],[8,"ArgminOperator","","This trait needs to be implemented for every operator/cost function.",N,N],[16,"Parameters","","Type of the parameter vector",4,N],[16,"OperatorOutput","","Output of the operator. Most solvers expect `f64`.",4,N],[16,"Hessian","","Type of Hessian",4,N],[10,"apply","","Applies the operator/cost function to parameters",4,N],[11,"gradient","","Computes the gradient at the given parameters",4,N],[11,"hessian","","Computes the hessian at the given parameters",4,N],[11,"modify","","Modifies a parameter vector. Comes with a variable that indicates the \"degree\" of the modification.",4,N],[10,"box_clone","","Allows to clone the boxed trait object.",4,[[["self"]],["box",["argminoperator"]]]],[3,"NoOperator","","",N,N],[8,"ArgminLineSearch","","Defines a common interface to line search methods. Requires that `ArgminSolver` is implemented for the line search method as well.",N,N],[10,"set_initial_parameter","","Set the initial parameter (starting point)",5,N],[10,"set_search_direction","","Set the search direction",5,N],[10,"set_initial_alpha","","Set the initial step length",5,[[["self"],["f64"]],["result",["error"]]]],[10,"set_initial_cost","","Set the cost function value at the starting point as opposed to computing it (see `calc_initial_cost`)",5,N],[10,"set_initial_gradient","","Set the gradient at the starting point as opposed to computing it (see `calc_initial_gradient`)",5,N],[10,"calc_initial_cost","","calculate the initial cost function value using an operator as opposed to setting it manually (see `set_initial_cost`)",5,[[["self"]],["result",["error"]]]],[10,"calc_initial_gradient","","calculate the initial gradient using an operator as opposed to setting it manually (see `set_initial_gradient`)",5,[[["self"]],["result",["error"]]]],[8,"ArgminTrustRegion","","Defines a common interface to methods which calculate approximate steps for trust region methods. Requires that `ArgminSolver` is implemented as well.",N,N],[10,"set_radius","","Set the initial step length",6,N],[10,"set_grad","","Set the gradient at the starting point",6,N],[10,"set_hessian","","Set the gradient at the starting point",6,N],[8,"ArgminNLCGBetaUpdate","","Every method for the update of beta needs to implement this trait.",N,N],[10,"update","","Update beta Parameter 1: \\nabla f_k Parameter 2: \\nabla f_{k+1} Parameter 3: p_k",7,[[["self"],["t"],["t"],["t"]],["f64"]]],[14,"check_param","","Release an `T` from an `Option<T>` if it is not `None`. If it is `None`, return an `ArgminError` with a message that needs to be provided.",N,N],[4,"TerminationReason","","Indicates why the optimization algorithm stopped",N,N],[13,"NotTerminated","","In case it has not terminated yet",8,N],[13,"MaxItersReached","","Maximum number of iterations reached",8,N],[13,"TargetCostReached","","Target cost function value reached",8,N],[13,"TargetPrecisionReached","","Target precision reached",8,N],[13,"AcceptedStallIterExceeded","","Acceped stall iter exceeded",8,N],[13,"BestStallIterExceeded","","Best stall iter exceeded",8,N],[13,"LineSearchConditionMet","","Condition for Line search met",8,N],[13,"Aborted","","Aborted",8,N],[4,"ArgminError","","",N,N],[13,"InvalidParameter","","Indicates and invalid parameter",9,N],[12,"text","argmin::prelude::ArgminError","",9,N],[13,"NotImplemented","argmin::prelude","Indicates that a function is not implemented",9,N],[12,"text","argmin::prelude::ArgminError","",9,N],[13,"NotInitialized","argmin::prelude","Indicates that a function is not initialized",9,N],[12,"text","argmin::prelude::ArgminError","",9,N],[13,"ConditionViolated","argmin::prelude","Indicates that a condition is violated",9,N],[12,"text","argmin::prelude::ArgminError","",9,N],[13,"ImpossibleError","argmin::prelude","Indicates an impossible error",9,N],[12,"text","argmin::prelude::ArgminError","",9,N],[3,"ArgminKV","argmin::prelude","A simple key-value storage",N,N],[12,"kv","","The actual key value storage",10,N],[8,"ArgminScale","","Scale `self` by a `U`",N,N],[10,"scale","","Scale `self` by a `U`",11,[[["self"],["u"]],["self"]]],[3,"ArgminResult","","Return struct for all solvers.",N,N],[12,"param","","Final parameter vector",12,N],[12,"cost","","Final cost value",12,N],[12,"iters","","Number of iterations",12,N],[12,"terminated","","Indicated whether it terminated or not",12,N],[12,"termination_reason","","Reason of termination",12,N],[8,"ArgminScaledSub","","Subtract a `T` scaled by an `U` from `self`",N,N],[10,"scaled_sub","","Subtract a `T` scaled by an `U` from `self`",13,[[["self"],["u"],["t"]],["self"]]],[14,"make_kv","","Creates an `ArgminKV` at compile time in order to avoid pushing to the `kv` vector.",N,N],[8,"ArgminAdd","","Add a `T` to `self`",N,N],[10,"add","","Add a `T` to `self`",14,[[["self"],["t"]],["self"]]],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"ArgminWriter","","",N,N],[3,"ArgminLogger","","Container for `ArgminLog`gers",N,N],[8,"ArgminZero","","Return param vector of all zeros (for now, this is a hack. It should be done better)",N,N],[10,"zero","","Return param vector of all zeros",15,[[["self"]],["self"]]],[3,"ArgminBase","","Storage for data needed by most solvers",N,N],[8,"ArgminNorm","","Compute the l2-norm (`U`) of `self`",N,N],[10,"norm","","Compute the l2-norm (`U`) of `self`",16,[[["self"]],["u"]]],[3,"ArgminSlogLogger","","A logger based on `slog`",N,N],[6,"Fallible","argmin::prelude::failure","A common result with an `Error`.",N,N],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",17,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",17,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",17,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",17,[[["self"]],["compat"]]],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[0,"isize","argmin::prelude::failure::_core","The pointer-sized signed integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::isize","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i8","argmin::prelude::failure::_core","The 8-bit signed integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::i8","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i16","argmin::prelude::failure::_core","The 16-bit signed integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::i16","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i32","argmin::prelude::failure::_core","The 32-bit signed integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::i32","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i64","argmin::prelude::failure::_core","The 64-bit signed integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::i64","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i128","argmin::prelude::failure::_core","The 128-bit signed integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::i128","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"usize","argmin::prelude::failure::_core","The pointer-sized unsigned integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::usize","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u8","argmin::prelude::failure::_core","The 8-bit unsigned integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::u8","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u16","argmin::prelude::failure::_core","The 16-bit unsigned integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::u16","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u32","argmin::prelude::failure::_core","The 32-bit unsigned integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::u32","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u64","argmin::prelude::failure::_core","The 64-bit unsigned integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::u64","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u128","argmin::prelude::failure::_core","The 128-bit unsigned integer type.",N,N],[17,"MIN","argmin::prelude::failure::_core::u128","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"f32","argmin::prelude::failure::_core","This module provides constants which are specific to the implementation of the `f32` floating point data type.",N,N],[17,"RADIX","argmin::prelude::failure::_core::f32","The radix or base of the internal representation of `f32`.",N,N],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",N,N],[17,"DIGITS","","Approximate number of significant digits in base 10.",N,N],[17,"EPSILON","","[Machine epsilon] value for `f32`.",N,N],[17,"MIN","","Smallest finite `f32` value.",N,N],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",N,N],[17,"MAX","","Largest finite `f32` value.",N,N],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",N,N],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",N,N],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",N,N],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",N,N],[17,"NAN","","Not a Number (NaN).",N,N],[17,"INFINITY","","Infinity (∞).",N,N],[17,"NEG_INFINITY","","Negative infinity (-∞).",N,N],[0,"consts","","Basic mathematical constants.",N,N],[17,"PI","argmin::prelude::failure::_core::f32::consts","Archimedes' constant (π)",N,N],[17,"FRAC_PI_2","","π/2",N,N],[17,"FRAC_PI_3","","π/3",N,N],[17,"FRAC_PI_4","","π/4",N,N],[17,"FRAC_PI_6","","π/6",N,N],[17,"FRAC_PI_8","","π/8",N,N],[17,"FRAC_1_PI","","1/π",N,N],[17,"FRAC_2_PI","","2/π",N,N],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",N,N],[17,"SQRT_2","","sqrt(2)",N,N],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",N,N],[17,"E","","Euler's number (e)",N,N],[17,"LOG2_E","","log2(e)",N,N],[17,"LOG2_10","","log2(10)",N,N],[17,"LOG10_E","","log10(e)",N,N],[17,"LOG10_2","","log10(2)",N,N],[17,"LN_2","","ln(2)",N,N],[17,"LN_10","","ln(10)",N,N],[0,"f64","argmin::prelude::failure::_core","This module provides constants which are specific to the implementation of the `f64` floating point data type.",N,N],[17,"RADIX","argmin::prelude::failure::_core::f64","The radix or base of the internal representation of `f64`.",N,N],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",N,N],[17,"DIGITS","","Approximate number of significant digits in base 10.",N,N],[17,"EPSILON","","[Machine epsilon] value for `f64`.",N,N],[17,"MIN","","Smallest finite `f64` value.",N,N],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",N,N],[17,"MAX","","Largest finite `f64` value.",N,N],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",N,N],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",N,N],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",N,N],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",N,N],[17,"NAN","","Not a Number (NaN).",N,N],[17,"INFINITY","","Infinity (∞).",N,N],[17,"NEG_INFINITY","","Negative infinity (-∞).",N,N],[0,"consts","","Basic mathematical constants.",N,N],[17,"PI","argmin::prelude::failure::_core::f64::consts","Archimedes' constant (π)",N,N],[17,"FRAC_PI_2","","π/2",N,N],[17,"FRAC_PI_3","","π/3",N,N],[17,"FRAC_PI_4","","π/4",N,N],[17,"FRAC_PI_6","","π/6",N,N],[17,"FRAC_PI_8","","π/8",N,N],[17,"FRAC_1_PI","","1/π",N,N],[17,"FRAC_2_PI","","2/π",N,N],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",N,N],[17,"SQRT_2","","sqrt(2)",N,N],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",N,N],[17,"E","","Euler's number (e)",N,N],[17,"LOG2_10","","log2(10)",N,N],[17,"LOG2_E","","log2(e)",N,N],[17,"LOG10_2","","log10(2)",N,N],[17,"LOG10_E","","log10(e)",N,N],[17,"LN_2","","ln(2)",N,N],[17,"LN_10","","ln(10)",N,N],[0,"num","argmin::prelude::failure::_core","Numeric traits and functions for the built-in numeric types.",N,N],[3,"NonZeroU8","argmin::prelude::failure::_core::num","An integer that is known not to equal zero.",N,N],[3,"NonZeroU16","","An integer that is known not to equal zero.",N,N],[3,"NonZeroU32","","An integer that is known not to equal zero.",N,N],[3,"NonZeroU64","","An integer that is known not to equal zero.",N,N],[3,"NonZeroU128","","An integer that is known not to equal zero.",N,N],[3,"NonZeroUsize","","An integer that is known not to equal zero.",N,N],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",N,N],[12,"0","","",18,N],[4,"FpCategory","","A classification of floating point numbers.",N,N],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",19,N],[13,"Infinite","","Positive or negative infinity.",19,N],[13,"Zero","","Positive or negative zero.",19,N],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",19,N],[13,"Normal","","A regular floating point number.",19,N],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",N,N],[3,"ParseIntError","","An error which can be returned when parsing an integer.",N,N],[0,"prelude","argmin::prelude::failure::_core","The libcore prelude",N,N],[0,"v1","argmin::prelude::failure::_core::prelude","The core prelude",N,N],[8,"Fn","argmin::prelude::failure::_core::prelude::v1","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",20,N],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",21,[[["self"]],["t"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",22,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",22,[[["self"]],["bool"]]],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",23,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",23,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",23,[[["self"],["self"]],["self"]]],[5,"drop","","Disposes of a value.",N,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",24,N],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",25,[[["t"]],["self"]]],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",N,N],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",26,N],[13,"Err","","Contains the error value",26,N],[4,"Option","","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",27,N],[13,"Some","","Some value `T`",27,N],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",28,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",28,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",28,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",28,[[["self"],["p"]],["option"]]],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",29,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",29,[[["self"],["rhs"]],["bool"]]],[8,"Sized","","Types with a constant size known at compile time.",N,N],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",30,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",30,N],[10,"into_iter","","Creates an iterator from a value.",30,N],[8,"Sync","","Types for which it is safe to share references between threads.",N,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",31,N],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",32,[[["self"]],["t"]]],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",33,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",34,N],[10,"call_once","","Performs the call operation.",34,N],[8,"Send","","Types that can be transferred across thread boundaries.",N,N],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",35,N],[10,"next","","Advances the iterator and returns the next value.",35,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",35,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",35,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",35,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",35,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",35,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",35,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",35,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",35,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",35,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",35,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",35,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",35,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",35,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",35,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",35,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",35,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",35,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",35,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",35,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",35,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",35,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",35,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",35,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",35,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",35,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",35,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",35,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",35,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",35,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",35,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",35,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",35,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",35,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",35,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",35,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",35,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",35,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",35,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",35,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",35,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",35,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",35,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",35,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",35,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",35,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",35,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",35,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",35,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",35,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",35,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",35,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",35,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",35,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",35,[[["self"],["i"]],["bool"]]],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",N,N],[10,"clone","","Returns a copy of the value.",36,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",36,N],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",37,[[["self"]],["t"]]],[8,"Default","","A trait for giving a type a useful default value.",N,N],[10,"default","","Returns the \"default value\" for a type.",38,[[],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",39,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",39,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",39,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",39,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",39,[[["self"],["rhs"]],["bool"]]],[0,"intrinsics","argmin::prelude::failure::_core","rustc compiler intrinsics.",N,N],[5,"atomic_cxchg","argmin::prelude::failure::_core::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",N,N],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",N,N],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",N,N],[5,"atomic_load_unordered","","",N,N],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",N,N],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",N,N],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",N,N],[5,"atomic_store_unordered","","",N,N],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_max","","",N,N],[5,"atomic_max_acq","","",N,N],[5,"atomic_max_rel","","",N,N],[5,"atomic_max_acqrel","","",N,N],[5,"atomic_max_relaxed","","",N,N],[5,"atomic_min","","",N,N],[5,"atomic_min_acq","","",N,N],[5,"atomic_min_rel","","",N,N],[5,"atomic_min_acqrel","","",N,N],[5,"atomic_min_relaxed","","",N,N],[5,"atomic_umin","","",N,N],[5,"atomic_umin_acq","","",N,N],[5,"atomic_umin_rel","","",N,N],[5,"atomic_umin_acqrel","","",N,N],[5,"atomic_umin_relaxed","","",N,N],[5,"atomic_umax","","",N,N],[5,"atomic_umax_acq","","",N,N],[5,"atomic_umax_rel","","",N,N],[5,"atomic_umax_acqrel","","",N,N],[5,"atomic_umax_relaxed","","",N,N],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"atomic_fence","","",N,N],[5,"atomic_fence_acq","","",N,N],[5,"atomic_fence_rel","","",N,N],[5,"atomic_fence_acqrel","","",N,N],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",N,N],[5,"atomic_singlethreadfence_acq","","",N,N],[5,"atomic_singlethreadfence_rel","","",N,N],[5,"atomic_singlethreadfence_acqrel","","",N,N],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",N,[[["t"]],["t"]]],[5,"abort","","Aborts the execution of the process.",N,N],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",N,N],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",N,N],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",N,[[["bool"]],["bool"]]],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",N,[[["bool"]],["bool"]]],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",N,N],[5,"size_of","","The size of a type in bytes.",N,[[],["usize"]]],[5,"move_val_init","","Moves a value to an uninitialized memory location.",N,N],[5,"min_align_of","","",N,[[],["usize"]]],[5,"pref_align_of","","",N,[[],["usize"]]],[5,"size_of_val","","The size of the referenced value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of_val","","",N,[[["t"]],["usize"]]],[5,"type_name","","Gets a static string slice containing the name of a type.",N,[[],["str"]]],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",N,[[],["u64"]]],[5,"init","","Creates a value initialized to zero.",N,[[],["t"]]],[5,"uninit","","Creates an uninitialized value.",N,[[],["t"]]],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",N,[[],["bool"]]],[5,"offset","","Calculates the offset from a pointer.",N,N],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",N,N],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source and destination must not overlap.",N,N],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source and destination may overlap.",N,N],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",N,N],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",N,N],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",N,N],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",N,N],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",N,N],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",N,N],[5,"unaligned_volatile_load","","Perform a volatile load from the `src` pointer The pointer is not required to be aligned.",N,N],[5,"unaligned_volatile_store","","Perform a volatile store to the `dst` pointer. The pointer is not required to be aligned.",N,N],[5,"sqrtf32","","Returns the square root of an `f32`",N,[[["f32"]],["f32"]]],[5,"sqrtf64","","Returns the square root of an `f64`",N,[[["f64"]],["f64"]]],[5,"powif32","","Raises an `f32` to an integer power.",N,[[["f32"],["i32"]],["f32"]]],[5,"powif64","","Raises an `f64` to an integer power.",N,[[["f64"],["i32"]],["f64"]]],[5,"sinf32","","Returns the sine of an `f32`.",N,[[["f32"]],["f32"]]],[5,"sinf64","","Returns the sine of an `f64`.",N,[[["f64"]],["f64"]]],[5,"cosf32","","Returns the cosine of an `f32`.",N,[[["f32"]],["f32"]]],[5,"cosf64","","Returns the cosine of an `f64`.",N,[[["f64"]],["f64"]]],[5,"powf32","","Raises an `f32` to an `f32` power.",N,[[["f32"],["f32"]],["f32"]]],[5,"powf64","","Raises an `f64` to an `f64` power.",N,[[["f64"],["f64"]],["f64"]]],[5,"expf32","","Returns the exponential of an `f32`.",N,[[["f32"]],["f32"]]],[5,"expf64","","Returns the exponential of an `f64`.",N,[[["f64"]],["f64"]]],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",N,[[["f32"]],["f32"]]],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",N,[[["f64"]],["f64"]]],[5,"logf32","","Returns the natural logarithm of an `f32`.",N,[[["f32"]],["f32"]]],[5,"logf64","","Returns the natural logarithm of an `f64`.",N,[[["f64"]],["f64"]]],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",N,[[["f32"]],["f32"]]],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",N,[[["f64"]],["f64"]]],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",N,[[["f32"]],["f32"]]],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",N,[[["f64"]],["f64"]]],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",N,[[["f32"],["f32"],["f32"]],["f32"]]],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",N,[[["f64"],["f64"],["f64"]],["f64"]]],[5,"fabsf32","","Returns the absolute value of an `f32`.",N,[[["f32"]],["f32"]]],[5,"fabsf64","","Returns the absolute value of an `f64`.",N,[[["f64"]],["f64"]]],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",N,[[["f32"],["f32"]],["f32"]]],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",N,[[["f64"],["f64"]],["f64"]]],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",N,[[["f32"]],["f32"]]],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",N,[[["f64"]],["f64"]]],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",N,[[["f32"]],["f32"]]],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",N,[[["f64"]],["f64"]]],[5,"truncf32","","Returns the integer part of an `f32`.",N,[[["f32"]],["f32"]]],[5,"truncf64","","Returns the integer part of an `f64`.",N,[[["f64"]],["f64"]]],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",N,[[["f32"]],["f32"]]],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",N,[[["f64"]],["f64"]]],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",N,[[["f32"]],["f32"]]],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",N,[[["f64"]],["f64"]]],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",N,[[["f32"]],["f32"]]],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",N,[[["f64"]],["f64"]]],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"ctpop","","Returns the number of bits set in an integer type `T`",N,[[["t"]],["t"]]],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",N,[[["t"]],["t"]]],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",N,[[["t"]],["t"]]],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",N,[[["t"]],["t"]]],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",N,[[["t"]],["t"]]],[5,"bswap","","Reverses the bytes in an integer type `T`.",N,[[["t"]],["t"]]],[5,"bitreverse","","Reverses the bits in an integer type `T`.",N,[[["t"]],["t"]]],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",N,N],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",N,N],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",N,N],[5,"exact_div","","Performs an exact division, resulting in undefined behavior where `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`",N,[[["t"],["t"]],["t"]]],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",N,[[["t"],["t"]],["t"]]],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",N,[[["t"],["t"]],["t"]]],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",N,[[["t"],["t"]],["t"]]],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",N,[[["t"],["t"]],["t"]]],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",N,[[["t"],["t"]],["t"]]],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",N,[[["t"],["t"]],["t"]]],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",N,[[["t"],["t"]],["t"]]],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",N,[[["t"]],["u64"]]],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",N,N],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their docs). Probably will never become stable.",N,N],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",N,N],[0,"mem","argmin::prelude::failure::_core","Basic functions for dealing with memory.",N,N],[5,"forget","argmin::prelude::failure::_core::mem","Takes ownership and \"forgets\" about the value without running its destructor.",N,N],[5,"size_of","","Returns the size of a type in bytes.",N,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",N,[[],["bool"]]],[5,"zeroed","","Creates a value whose bytes are all zero.",N,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",N,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",N,N],[5,"replace","","Moves `src` into the referenced `dest`, returning the previous `dest` value.",N,[[["t"],["t"]],["t"]]],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",N,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",N,N],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",N,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",N,N],[19,"MaybeUninit","","A newtype to construct uninitialized instances of `T`",N,N],[0,"ptr","argmin::prelude::failure::_core","Manually manage memory through raw pointers.",N,N],[5,"null","argmin::prelude::failure::_core::ptr","Creates a null raw pointer.",N,N],[5,"null_mut","","Creates a null mutable raw pointer.",N,N],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either.",N,N],[5,"swap_nonoverlapping","","Swaps `count * size_of::<T>()` bytes between the two regions of memory beginning at `x` and `y`. The two regions must not overlap.",N,N],[5,"replace","","Moves `src` into the pointed `dst`, returning the previous `dst` value.",N,N],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",N,N],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",N,N],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",N,N],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",N,N],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",N,N],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",N,N],[5,"eq","","Compare raw pointers for equality.",N,N],[3,"NonNull","","`*mut T` but non-zero and covariant.",N,N],[0,"hint","argmin::prelude::failure::_core","Hints to compiler that affects how code should be emitted or optimized.",N,N],[5,"unreachable_unchecked","argmin::prelude::failure::_core::hint","Informs the compiler that this point in the code is not reachable, enabling further optimizations.",N,N],[0,"marker","argmin::prelude::failure::_core","Primitive traits and types representing basic properties of types.",N,N],[8,"Unsize","argmin::prelude::failure::_core::marker","Types that can be \"unsized\" to a dynamically-sized type.",N,N],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",N,N],[8,"Unpin","","Types which can be safely moved after being pinned.",N,N],[3,"Pinned","","A type which does not implement `Unpin`.",N,N],[0,"ops","argmin::prelude::failure::_core","Overloadable operators.",N,N],[8,"AddAssign","argmin::prelude::failure::_core::ops","The addition assignment operator `+=`.",N,N],[10,"add_assign","","Performs the `+=` operation.",40,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",41,N],[13,"Excluded","","An exclusive bound.",41,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",41,N],[8,"Neg","","The unary negation operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",42,N],[10,"neg","","Performs the unary `-` operation.",42,N],[4,"GeneratorState","","The result of a generator resumption.",N,N],[13,"Yielded","","The generator suspended with a value.",43,N],[13,"Complete","","The generator completed with a return value.",43,N],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",N,N],[10,"bitxor_assign","","Performs the `^=` operation.",44,N],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[10,"start_bound","","Start index bound.",45,[[["self"]],["bound"]]],[10,"end_bound","","End index bound.",45,[[["self"]],["bound"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",45,[[["self"],["u"]],["bool"]]],[8,"DispatchFromDyn","","This is used for object safety, to check that a method's receiver type can be dispatched on.",N,N],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",N,N],[16,"Output","","The returned type after indexing.",46,N],[10,"index","","Performs the indexing (`container[index]`) operation.",46,N],[8,"ShlAssign","","The left shift assignment operator `<<=`.",N,N],[10,"shl_assign","","Performs the `<<=` operation.",47,N],[8,"Div","","The division operator `/`.",N,N],[16,"Output","","The resulting type after applying the `/` operator.",48,N],[10,"div","","Performs the `/` operation.",48,N],[8,"ShrAssign","","The right shift assignment operator `>>=`.",N,N],[10,"shr_assign","","Performs the `>>=` operation.",49,N],[8,"Add","","The addition operator `+`.",N,N],[16,"Output","","The resulting type after applying the `+` operator.",50,N],[10,"add","","Performs the `+` operation.",50,N],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",N,N],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",51,N],[10,"deref","","Dereferences the value.",51,N],[8,"DivAssign","","The division assignment operator `/=`.",N,N],[10,"div_assign","","Performs the `/=` operation.",52,N],[8,"BitAnd","","The bitwise AND operator `&`.",N,N],[16,"Output","","The resulting type after applying the `&` operator.",53,N],[10,"bitand","","Performs the `&` operation.",53,N],[8,"SubAssign","","The subtraction assignment operator `-=`.",N,N],[10,"sub_assign","","Performs the `-=` operation.",54,N],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",N,N],[12,"start","","The lower bound of the range (inclusive).",55,N],[12,"end","","The upper bound of the range (exclusive).",55,N],[8,"Shr","","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `>>` operator.",56,N],[10,"shr","","Performs the `>>` operation.",56,N],[8,"Sub","","The subtraction operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",57,N],[10,"sub","","Performs the `-` operation.",57,N],[8,"BitOr","","The bitwise OR operator `|`.",N,N],[16,"Output","","The resulting type after applying the `|` operator.",58,N],[10,"bitor","","Performs the `|` operation.",58,N],[8,"Rem","","The remainder operator `%`.",N,N],[16,"Output","","The resulting type after applying the `%` operator.",59,N],[10,"rem","","Performs the `%` operation.",59,N],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",N,N],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",60,N],[8,"BitXor","","The bitwise XOR operator `^`.",N,N],[16,"Output","","The resulting type after applying the `^` operator.",61,N],[10,"bitxor","","Performs the `^` operation.",61,N],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",N,N],[12,"end","","The upper bound of the range (exclusive).",62,N],[8,"Not","","The unary logical negation operator `!`.",N,N],[16,"Output","","The resulting type after applying the `!` operator.",63,N],[10,"not","","Performs the unary `!` operation.",63,N],[8,"MulAssign","","The multiplication assignment operator `*=`.",N,N],[10,"mul_assign","","Performs the `*=` operation.",64,N],[8,"Try","","A trait for customizing the behavior of the `?` operator.",N,N],[16,"Ok","","The type of this value when viewed as successful.",65,N],[16,"Error","","The type of this value when viewed as failed.",65,N],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",65,[[["self"]],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",65,N],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",65,N],[3,"RangeFull","","An unbounded range (`..`).",N,N],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",N,N],[10,"bitor_assign","","Performs the `|=` operation.",66,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",N,N],[10,"deref_mut","","Mutably dereferences the value.",67,N],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",N,N],[12,"end","","The upper bound of the range (inclusive)",68,N],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",N,N],[10,"bitand_assign","","Performs the `&=` operation.",69,N],[8,"RemAssign","","The remainder assignment operator `%=`.",N,N],[10,"rem_assign","","Performs the `%=` operation.",70,N],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",N,N],[8,"Generator","","The trait implemented by builtin generator types.",N,N],[16,"Yield","","The type of value this generator yields.",71,N],[16,"Return","","The type of value this generator returns.",71,N],[10,"resume","","Resumes the execution of this generator.",71,[[["self"]],["generatorstate"]]],[8,"Mul","","The multiplication operator `*`.",N,N],[16,"Output","","The resulting type after applying the `*` operator.",72,N],[10,"mul","","Performs the `*` operation.",72,N],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",N,N],[12,"start","","The lower bound of the range (inclusive).",73,N],[8,"Shl","","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `<<` operator.",74,N],[10,"shl","","Performs the `<<` operation.",74,N],[0,"cmp","argmin::prelude::failure::_core","Functionality for ordering and comparison.",N,N],[4,"Ordering","argmin::prelude::failure::_core::cmp","An `Ordering` is the result of a comparison between two values.",N,N],[13,"Less","","An ordering where a compared value is less [than another].",75,N],[13,"Equal","","An ordering where a compared value is equal [to another].",75,N],[13,"Greater","","An ordering where a compared value is greater [than another].",75,N],[3,"Reverse","","A helper struct for reverse ordering.",N,N],[12,"0","","",76,N],[5,"min","","Compares and returns the minimum of two values.",N,[[["t"],["t"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",N,[[["t"],["t"]],["t"]]],[0,"clone","argmin::prelude::failure::_core","The `Clone` trait for types that cannot be 'implicitly copied'.",N,N],[0,"default","","The `Default` trait for types which may have meaningful default values.",N,N],[0,"convert","","Traits for conversions between types.",N,N],[5,"identity","argmin::prelude::failure::_core::convert","An identity function.",N,[[["t"]],["t"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",N,N],[16,"Error","","The type returned in the event of a conversion error.",77,N],[10,"try_into","","Performs the conversion.",77,[[["self"]],["result"]]],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",N,N],[16,"Error","","The type returned in the event of a conversion error.",78,N],[10,"try_from","","Performs the conversion.",78,[[["t"]],["result"]]],[0,"borrow","argmin::prelude::failure::_core","A module for working with borrowed data.",N,N],[8,"Borrow","argmin::prelude::failure::_core::borrow","A trait for borrowing data.",N,N],[10,"borrow","","Immutably borrows from an owned value.",79,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",N,N],[10,"borrow_mut","","Mutably borrows from an owned value.",80,[[["self"]],["borrowed"]]],[0,"any","argmin::prelude::failure::_core","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",N,N],[8,"Any","argmin::prelude::failure::_core::any","A type to emulate dynamic typing.",N,N],[10,"get_type_id","","Gets the `TypeId` of `self`.",81,[[["self"]],["typeid"]]],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",N,N],[0,"array","argmin::prelude::failure::_core","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths.",N,N],[8,"FixedSizeArray","argmin::prelude::failure::_core::array","Utility trait implemented only on arrays of fixed size",N,N],[10,"as_slice","","Converts the array to immutable slice",82,N],[10,"as_mut_slice","","Converts the array to mutable slice",82,N],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to an array fails.",N,N],[0,"ascii","argmin::prelude::failure::_core","Operations on ASCII strings and characters.",N,N],[3,"EscapeDefault","argmin::prelude::failure::_core::ascii","An iterator over the escaped version of a byte.",N,N],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",N,[[["u8"]],["escapedefault"]]],[0,"sync","argmin::prelude::failure::_core","Synchronization primitives",N,N],[0,"atomic","argmin::prelude::failure::_core::sync","Atomic types",N,N],[5,"spin_loop_hint","argmin::prelude::failure::_core::sync::atomic","Save power or switch hyperthreads in a busy-wait spin-loop.",N,N],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",N,N],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",N,N],[4,"Ordering","","Atomic memory orderings",N,N],[13,"Relaxed","","No ordering constraints, only atomic operations.",83,N],[13,"Release","","When coupled with a store, all previous operations become ordered before any load of this value with [`Acquire`] (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an [`Acquire`] (or stronger) load of this value.",83,N],[13,"Acquire","","When coupled with a load, if the loaded value was written by a store operation with [`Release`] (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.",83,N],[13,"AcqRel","","Has the effects of both [`Acquire`] and [`Release`] together: For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.",83,N],[13,"SeqCst","","Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.",83,N],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",N,N],[3,"AtomicI8","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU8","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicI16","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU16","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicI32","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU32","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicI64","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU64","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",N,N],[5,"fence","","An atomic fence.",N,N],[5,"compiler_fence","","A compiler memory fence.",N,N],[0,"cell","argmin::prelude::failure::_core","Shareable mutable containers.",N,N],[3,"Cell","argmin::prelude::failure::_core::cell","A mutable memory location.",N,N],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",N,N],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",N,N],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",N,N],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",N,N],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",N,N],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",N,N],[0,"char","argmin::prelude::failure::_core","A character type.",N,N],[17,"MAX","argmin::prelude::failure::_core::char","The highest valid code point a `char` can have.",N,N],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",N,N],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",N,N],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",N,N],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",N,N],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",N,N],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",N,N],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",N,N],[5,"from_u32","","Converts a `u32` to a `char`.",N,[[["u32"]],["option",["char"]]]],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code points.",N,N],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",N,[[["u32"]],["char"]]],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `char` and `str` methods are based on.",N,N],[3,"ParseCharError","","An error which can be returned when parsing a char.",N,N],[5,"from_digit","","Converts a digit in the given radix to a `char`.",N,[[["u32"],["u32"]],["option",["char"]]]],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",N,N],[3,"UnicodeVersion","","Represents a Unicode Version.",N,N],[12,"major","","Major version.",84,N],[12,"minor","","Minor version.",84,N],[12,"micro","","Micro (or Update) version.",84,N],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",N,[[["i"]],["decodeutf16"]]],[0,"panic","argmin::prelude::failure::_core","Panic support in the standard library.",N,N],[3,"PanicInfo","argmin::prelude::failure::_core::panic","A struct providing information about a panic.",N,N],[3,"Location","","A struct containing information about the location of a panic.",N,N],[0,"panicking","argmin::prelude::failure::_core","Panic support for libcore",N,N],[5,"panic","argmin::prelude::failure::_core::panicking","",N,N],[5,"panic_fmt","","",N,N],[0,"pin","argmin::prelude::failure::_core","Types which pin data to its location in memory",N,N],[3,"Pin","argmin::prelude::failure::_core::pin","A pinned pointer.",N,N],[0,"iter","argmin::prelude::failure::_core","Composable external iteration.",N,N],[3,"Rev","argmin::prelude::failure::_core::iter","A double-ended iterator with the direction inverted.",N,N],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",N,N],[3,"Cycle","","An iterator that repeats endlessly.",N,N],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",N,N],[3,"Chain","","An iterator that strings two iterators together.",N,N],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",N,N],[3,"Map","","An iterator that maps the values of `iter` with `f`.",N,N],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",N,N],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",N,N],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",N,N],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",N,N],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",N,N],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",N,N],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",N,N],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",N,N],[3,"Scan","","An iterator to maintain state while iterating another iterator.",N,N],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",N,N],[3,"Flatten","","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.",N,N],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",N,N],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",N,N],[3,"Repeat","","An iterator that repeats an element endlessly.",N,N],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`.",N,N],[8,"Step","","Objects that can be stepped over in both directions.",N,N],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",85,[[["self"],["self"]],["option",["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning itself",85,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning itself",85,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result",85,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result",85,[[["self"]],["self"]]],[10,"add_usize","","Add an usize, returning None on overflow",85,[[["self"],["usize"]],["option"]]],[5,"empty","","Creates an iterator that yields nothing.",N,[[],["empty"]]],[5,"once","","Creates an iterator that yields an element exactly once.",N,[[["t"]],["once"]]],[3,"Empty","","An iterator that yields nothing.",N,N],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",N,N],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",86,[[["i"]],["self"]]],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`.",N,[[["f"]],["repeatwith"]]],[3,"Once","","An iterator that yields an element exactly once.",N,N],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",N,N],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",87,[[["i"]],["self"]]],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",N,N],[8,"FromIterator","","Conversion from an `Iterator`.",N,N],[10,"from_iter","","Creates a value from an iterator.",88,[[["t"]],["self"]]],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",N,N],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",N,[[["t"]],["repeat"]]],[0,"option","argmin::prelude::failure::_core","Optional values.",N,N],[3,"Iter","argmin::prelude::failure::_core::option","An iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",N,N],[0,"raw","argmin::prelude::failure::_core","Contains struct definitions for the layout of compiler built-in types.",N,N],[3,"TraitObject","argmin::prelude::failure::_core::raw","The representation of a trait object like `&SomeTrait`.",N,N],[12,"data","","",89,N],[12,"vtable","","",89,N],[0,"result","argmin::prelude::failure::_core","Error handling with the `Result` type.",N,N],[3,"Iter","argmin::prelude::failure::_core::result","An iterator over a reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",N,N],[0,"ffi","argmin::prelude::failure::_core","Utilities related to FFI bindings.",N,N],[4,"c_void","argmin::prelude::failure::_core::ffi","Equivalent to C's `void` type when used as a [pointer].",N,N],[0,"slice","argmin::prelude::failure::_core","Slice management and manipulation",N,N],[0,"memchr","argmin::prelude::failure::_core::slice","Pure rust memchr implementation, taken from rust-memchr",N,N],[5,"memchr","argmin::prelude::failure::_core::slice::memchr","Return the first index matching the byte `x` in `text`.",N,N],[5,"memrchr","","Return the last index matching the byte `x` in `text`.",N,N],[8,"SliceIndex","argmin::prelude::failure::_core::slice","A helper trait used for indexing operations.",N,N],[16,"Output","","The output type returned by methods.",90,N],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",90,[[["self"],["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",90,[[["self"],["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",90,N],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",90,N],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",90,N],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",90,N],[3,"Iter","","Immutable slice iterator",N,N],[3,"IterMut","","Mutable slice iterator.",N,N],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",N,N],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",N,N],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",N,N],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",N,N],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[3,"Windows","","An iterator over overlapping subslices of length `size`.",N,N],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the beginning of the slice.",N,N],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the beginning of the slice.",N,N],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the beginning of the slice.",N,N],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the beginning of the slice.",N,N],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the end of the slice.",N,N],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the end of the slice.",N,N],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the end of the slice.",N,N],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the end of the slice.",N,N],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",N,N],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`], except that a mutable slice is returned.",N,N],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[5,"from_mut","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[0,"str","argmin::prelude::failure::_core","String manipulation",N,N],[0,"pattern","argmin::prelude::failure::_core::str","The string Pattern API.",N,N],[8,"Pattern","argmin::prelude::failure::_core::str::pattern","A string pattern.",N,N],[16,"Searcher","","Associated searcher for this pattern",91,N],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",91,N],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",91,[[["self"],["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",91,[[["self"],["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",91,[[["self"],["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",N,N],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",92,N],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",92,N],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",92,N],[8,"Searcher","","A searcher for a string pattern.",N,N],[10,"haystack","","Getter for the underlying string to be searched in",93,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",93,[[["self"]],["searchstep"]]],[11,"next_match","","Find the next `Match` result. See `next()`",93,[[["self"]],["option"]]],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",93,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",N,N],[10,"next_back","","Performs the next search step starting from the back.",94,[[["self"]],["searchstep"]]],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",94,[[["self"]],["option"]]],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",94,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",N,N],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",N,N],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",N,N],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",N,N],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",N,N],[0,"lossy","argmin::prelude::failure::_core::str","",N,N],[3,"Utf8Lossy","argmin::prelude::failure::_core::str::lossy","Lossy UTF-8 string.",N,N],[3,"Utf8LossyChunksIter","","Iterator over lossy UTF-8 string",N,N],[3,"Utf8LossyChunk","","",N,N],[12,"valid","","Sequence of valid chars. Can be empty between broken UTF-8 chars.",95,N],[12,"broken","","Single broken char, empty if none. Empty iff iterator item is last.",95,N],[8,"FromStr","argmin::prelude::failure::_core::str","A trait to abstract the idea of creating a new instance of a type from a string.",N,N],[16,"Err","","The associated error which can be returned from parsing.",96,N],[10,"from_str","","Parses a string `s` to return a value of this type.",96,[[["str"]],["result"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[5,"from_utf8","","Converts a slice of bytes to a string slice.",N,N],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",N,N],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",N,N],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",N,N],[3,"Chars","","An iterator over the [`char`]s of a string slice.",N,N],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a UTF-8-like encoding).",N,[[["i"]],["option",["u32"]]]],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",N,N],[3,"Bytes","","An iterator over the bytes of a string slice.",N,N],[3,"Split","","Created with the method [`split`].",N,N],[3,"RSplit","","Created with the method [`rsplit`].",N,N],[3,"SplitTerminator","","Created with the method [`split_terminator`].",N,N],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",N,N],[3,"SplitN","","Created with the method [`splitn`].",N,N],[3,"RSplitN","","Created with the method [`rsplitn`].",N,N],[3,"MatchIndices","","Created with the method [`match_indices`].",N,N],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",N,N],[3,"Matches","","Created with the method [`matches`].",N,N],[3,"RMatches","","Created with the method [`rmatches`].",N,N],[3,"Lines","","An iterator over the lines of a string, as string slices.",N,N],[3,"LinesAny","","Created with the method [`lines_any`].",N,N],[5,"utf8_char_width","","Given a first byte, determines how many bytes are in this UTF-8 character.",N,[[["u8"]],["usize"]]],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",N,N],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.",N,N],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",N,N],[0,"hash","argmin::prelude::failure::_core","Generic hashing support.",N,N],[8,"Hash","argmin::prelude::failure::_core::hash","A hashable type.",N,N],[10,"hash","","Feeds this value into the given [`Hasher`].",97,N],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",97,N],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",N,N],[10,"finish","","Returns the hash value for the values written so far.",98,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",98,N],[11,"write_u8","","Writes a single `u8` into this hasher.",98,N],[11,"write_u16","","Writes a single `u16` into this hasher.",98,N],[11,"write_u32","","Writes a single `u32` into this hasher.",98,N],[11,"write_u64","","Writes a single `u64` into this hasher.",98,N],[11,"write_u128","","Writes a single `u128` into this hasher.",98,N],[11,"write_usize","","Writes a single `usize` into this hasher.",98,N],[11,"write_i8","","Writes a single `i8` into this hasher.",98,N],[11,"write_i16","","Writes a single `i16` into this hasher.",98,N],[11,"write_i32","","Writes a single `i32` into this hasher.",98,N],[11,"write_i64","","Writes a single `i64` into this hasher.",98,N],[11,"write_i128","","Writes a single `i128` into this hasher.",98,N],[11,"write_isize","","Writes a single `isize` into this hasher.",98,N],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",N,N],[16,"Hasher","","Type of the hasher that will be created.",99,N],[10,"build_hasher","","Creates a new hasher.",99,N],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[0,"fmt","argmin::prelude::failure::_core","Utilities for formatting and printing strings.",N,N],[4,"Alignment","argmin::prelude::failure::_core::fmt","Possible alignments returned by `Formatter::align`",N,N],[13,"Left","","Indication that contents should be left-aligned.",100,N],[13,"Right","","Indication that contents should be right-aligned.",100,N],[13,"Center","","Indication that contents should be center-aligned.",100,N],[6,"Result","","The type returned by formatter methods.",N,N],[3,"Error","","The error type which is returned from formatting a message into a stream.",N,N],[8,"Write","","A collection of methods that are required to format a message into a stream.",N,N],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",101,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",101,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",101,[[["self"],["arguments"]],["result",["error"]]]],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",N,N],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",N,N],[8,"Debug","","`?` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",102,[[["self"],["formatter"]],["result",["error"]]]],[8,"Display","","Format trait for an empty format, `{}`.",N,N],[10,"fmt","","Formats the value using the given formatter.",103,[[["self"],["formatter"]],["result",["error"]]]],[8,"Octal","","`o` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",104,[[["self"],["formatter"]],["result",["error"]]]],[8,"Binary","","`b` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",105,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerHex","","`x` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",106,[[["self"],["formatter"]],["result",["error"]]]],[8,"UpperHex","","`X` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",107,[[["self"],["formatter"]],["result",["error"]]]],[8,"Pointer","","`p` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",108,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerExp","","`e` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",109,[[["self"],["formatter"]],["result",["error"]]]],[8,"UpperExp","","`E` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",110,[[["self"],["formatter"]],["result",["error"]]]],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",N,[[["write"],["arguments"]],["result",["error"]]]],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",N,N],[0,"time","argmin::prelude::failure::_core","Temporal quantification.",N,N],[3,"Duration","argmin::prelude::failure::_core::time","A `Duration` type to represent a span of time, typically used for system timeouts.",N,N],[0,"unicode","argmin::prelude::failure::_core","",N,N],[0,"derived_property","argmin::prelude::failure::_core::unicode","",N,N],[5,"Case_Ignorable","argmin::prelude::failure::_core::unicode::derived_property","",N,[[["char"]],["bool"]]],[5,"Cased","","",N,[[["char"]],["bool"]]],[0,"conversions","argmin::prelude::failure::_core::unicode","",N,N],[5,"to_lower","argmin::prelude::failure::_core::unicode::conversions","",N,N],[5,"to_upper","","",N,N],[0,"property","argmin::prelude::failure::_core::unicode","",N,N],[5,"Pattern_White_Space","argmin::prelude::failure::_core::unicode::property","",N,[[["char"]],["bool"]]],[0,"future","argmin::prelude::failure::_core","Asynchronous values.",N,N],[8,"Future","argmin::prelude::failure::_core::future","A future represents an asychronous computation.",N,N],[16,"Output","","The result of the `Future`.",111,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",111,[[["pin"],["localwaker"]],["poll"]]],[0,"task","argmin::prelude::failure::_core","Types and Traits for working with asynchronous tasks.",N,N],[8,"UnsafeWake","argmin::prelude::failure::_core::task","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.",N,N],[10,"clone_raw","","Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.",112,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",112,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",112,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is the same as `wake`, but can only be called from the thread that this `UnsafeWake` is \"local\" to. This allows for implementors to provide specialized wakeup behavior specific to the current thread. This function is called by `LocalWaker::wake`.",112,N],[4,"Poll","","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",113,N],[13,"Pending","","Represents that a value is not ready yet.",113,N],[3,"LocalWaker","","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[0,"alloc","argmin::prelude::failure::_core","Memory allocation APIs",N,N],[3,"Excess","argmin::prelude::failure::_core::alloc","Represents the combination of a starting address and a total capacity of the returned block.",N,N],[12,"0","","",114,N],[12,"1","","",114,N],[3,"Layout","","Layout of a block of memory.",N,N],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some other `Layout` constructor do not satisfy its documented constraints.",N,N],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator.",N,N],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",N,N],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard library’s default though the `#[global_allocator]` attributes.",N,N],[10,"alloc","","Allocate memory as described by the given `layout`.",115,N],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer with the given `layout`.",115,N],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",115,N],[11,"realloc","","Shink or grow a block of memory to the given `new_size`. The block is described by the given `ptr` pointer and `layout`.",115,N],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",N,N],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",116,[[["self"],["layout"]],["result",["nonnull","allocerr"]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",116,N],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",116,N],[11,"realloc","","Returns a pointer suitable for holding data described by a new layout with `layout`’s alginment and a size given by `new_size`. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit the new layout.",116,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["nonnull","allocerr"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",116,[[["self"],["layout"]],["result",["nonnull","allocerr"]]]],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",116,[[["self"],["layout"]],["result",["excess","allocerr"]]]],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",116,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["excess","allocerr"]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_size`.",116,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["cannotreallocinplace"]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_size`.",116,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["cannotreallocinplace"]]]],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",116,[[["self"]],["result",["nonnull","allocerr"]]]],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",116,N],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",116,[[["self"],["usize"]],["result",["nonnull","allocerr"]]]],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",116,[[["self"],["nonnull"],["usize"],["usize"]],["result",["nonnull","allocerr"]]]],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",116,[[["self"],["nonnull"],["usize"]],["result",["allocerr"]]]],[14,"debug_assert","argmin::prelude::failure::_core","Ensure that a boolean expression is `true` at runtime.",N,N],[14,"write","","Write formatted data into a buffer.",N,N],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",N,N],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",N,N],[0,"arch","","Platform dependent vendor intrinsics.",N,N],[0,"x86_64","argmin::prelude::failure::_core::arch","Platform-specific intrinsics for the `x86_64` platform.",N,N],[5,"_mm_cvtpu8_ps","argmin::prelude::failure::_core::arch::x86_64","Converts the lower 4 8-bit values of `a` into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_mm_abs_epi32","","Compute the absolute value of each of the packed 32-bit signed integers in `a` and return the 32-bit unsigned integer",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_crc32_u32","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 32-bit integer `v`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm_movehl_ps","","Combine higher half of `a` and `b`. The highwe half of `b` occupies the lower half of result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpeq_epi64","","Compare packed 64-bit integers in `a` and `b` for equality",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_fxrstor","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU registers from the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_mm_hadds_epi16","","Horizontally add the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`. Positive sums greater than 7FFFh are saturated to 7FFFh. Negative sums less than 8000h are saturated to 8000h.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_min_pi16","","Compares the packed 16-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_MM_EXCEPT_DENORM","","See `_mm_setcsr`",N,N],[5,"_mm_fmadd_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`, and add the intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_sub_sd","","Return a new vector with the low element of `a` replaced by subtracting the low element by `b` from the low element of `a`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_stream_sd","","Non-temporal store of `a.0` into `p`.",N,N],[5,"_mm_unpacklo_pi8","","Unpacks the lower four elements from two `i8x8` vectors and interleaves them into the result: `[a.0, b.0, a.1, b.1, a.2, b.2, a.3, b.3]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_storeu_pd","","Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_srlv_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_or_si256","","Compute the bitwise OR of 256 bits (representing integer data) in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",N,N],[5,"_mm256_set_m128d","","Set packed __m256d returned vector with the supplied values.",N,[[["__m128d"],["__m128d"]],["__m256d"]]],[5,"_mm256_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_m_psubsw","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_abs_pi32","","Compute the absolute value of packed 32-bit integers in `a`, and return the unsigned results.",N,[[["__m64"]],["__m64"]]],[3,"__m64","","64-bit wide integer vector type, x86-specific",N,N],[5,"_mm256_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",N,N],[5,"_mm_cmple_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is less than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[3,"__m128","","128-bit wide set of four `f32` types, x86-specific",N,N],[5,"_mm_rsqrt_ss","","Return the approximate reciprocal square root of the fist single-precision (32-bit) floating-point elements in `a`, the other elements are unchanged.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_adds_epi16","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",N,N],[5,"_mm_cmpgt_ss","","Compare the lowest `f32` of both inputs for greater than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is greater than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_packs_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) floating-point elements from `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm_mask_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",N,[[["__m256i"]],["__m128i"]]],[5,"_mm256_xor_ps","","Compute the bitwise XOR of packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",N,[[["u32"]],["i32"]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point elements in `a` up to an integer value, and store the results as packed double-precision floating-point elements.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm256_rsqrt_ps","","Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in `a`, and return the results. The maximum relative error for this approximation is less than 1.5*2^-12.",N,[[["__m256"]],["__m256"]]],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",N,N],[5,"_mm_cmpnge_pd","","Compare corresponding elements in `a` and `b` for not-greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_mask_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_dp_ps","","Conditionally multiply the packed single-precision (32-bit) floating-point elements in `a` and `b` using the high 4 bits in `imm8`, sum the four products, and conditionally return the sum  using the low 4 bits of `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm_cmple_sd","","Return a new vector with the low element of `a` replaced by the less-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_maskload_epi32","","Load packed 32-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_packus_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using unsigned saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvt_pi2ps","","Converts two elements of a 64-bit vector of `[2 x i32]` into two floating point values and writes them to the lower 64-bits of the destination. The remaining higher order elements of the destination are copied from the corresponding elements in the first operand.",N,[[["__m128"],["__m64"]],["__m128"]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_setr_epi32","","Set packed 32-bit integers in returned vector with the supplied values in reverse order.",N,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["__m256i"]]],[5,"_andn_u64","","Bitwise logical `AND` of inverted `a` with `b`.",N,[[["u64"],["u64"]],["u64"]]],[5,"_mm_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cmpge_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is greater than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_min_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return packed minimum values",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_srli_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in zeros",N,[[["__m256i"],["i32"]],["__m256i"]]],[17,"_MM_FLUSH_ZERO_OFF","","See `_mm_setcsr`",N,N],[5,"_mm256_madd_epi16","","Multiply packed signed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_add_ss","","Adds the first component of `a` and `b`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[17,"_SIDD_LEAST_SIGNIFICANT","","Index only: return the least significant bit (Default)",N,N],[5,"_mm_mulhi_pu16","","Multiplies packed 16-bit unsigned integer values and writes the high-order 16 bits of each 32-bit product to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cvtepi32_ps","","Convert packed 32-bit integers in `a` to packed single-precision (32-bit) floating-point elements.",N,[[["__m128i"]],["__m128"]]],[5,"_mm_sub_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_set_m128i","","Set packed __m256i returned vector with the supplied values.",N,[[["__m128i"],["__m128i"]],["__m256i"]]],[5,"_mm_max_pd","","Return a new vector with the maximum values from corresponding elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",N,N],[5,"_xsavec","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm_unpackhi_pd","","The resulting `__m128d` element is composed by the low-order values of the two `__m128d` interleaved input elements, i.e.:",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_shuffle_pi8","","Shuffle packed 8-bit integers in `a` according to shuffle control mask in the corresponding 8-bit element of `b`, and return the results",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmple_ss","","Compare the lowest `f32` of both inputs for less than or equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is less than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_andnot_pd","","Compute the bitwise NOT of packed double-precision (64-bit) floating-point elements in `a` and then AND with `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_setr_ps","","Construct a `__m128` from four floating point values lowest to highest.",N,[[["f32"],["f32"],["f32"],["f32"]],["__m128"]]],[5,"_mm256_srli_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in zeros",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of `[8 x float]`.",N,[[["__m256"]],["f32"]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_movpi64_epi64","","Moves the 64-bit operand to a 128-bit integer vector, zeroing the upper bits.",N,[[["__m64"]],["__m128i"]]],[5,"_mm256_testnzc_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m256i"],["__m256i"]],["i32"]]],[5,"_mm_cmpgt_epi32","","Compare packed 32-bit integers in `a` and `b` for greater-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer vector are all ones.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm256_add_ps","","Add packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_bslli_epi128","","Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_adds_epu8","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtps_pd","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128"]],["__m128d"]]],[5,"_bextr_u32","","Extracts bits in range [`start`, `start` + `length`) from `a` into the least significant bits of the result.",N,[[["u32"],["u32"],["u32"]],["u32"]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) floating-point element from `a`.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point elements in `a` down to an integer value, and store the results as packed double-precision floating-point elements.",N,[[["__m128d"]],["__m128d"]]],[5,"_m_pmovmskb","","Takes the most significant bit from each 8-bit element in a 64-bit integer vector to create a 16-bit mask value. Zero-extends the value to 32-bit integer and writes it to the destination.",N,[[["__m64"]],["i32"]]],[5,"_mm_min_pd","","Return a new vector with the minimum values from corresponding elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_comineq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are not equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_extracti128_si256","","Extract 128 bits (of integer data) from `a` selected with `imm8`.",N,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_max_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of `[8 x i32]`.",N,[[["__m256i"]],["i32"]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point element in `b` up to an integer value, store the result as a double-precision floating-point element in the lower element of the intrisic result, and copy the upper element from `a` to the upper element of the intrinsic result.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_blendv_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `c` as a mask.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_xsave","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm_hadd_pi16","","Horizontally add the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_blcic_u32","","Sets the least significant zero bit of `x` and clears all other bits.",N,[[["u32"]],["u32"]]],[5,"_mm_mul_ss","","Multiplies the first component of `a` and `b`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_sad_pu8","","Subtracts the corresponding 8-bit unsigned integer values of the two 64-bit vector operands and computes the absolute value for each of the difference. Then sum of the 8 absolute differences is written to the bits `[15:0]` of the destination; the remaining bits `[63:16]` are cleared.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_min_epi8","","Compare packed 8-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mulhrs_epi16","","Multiply packed 16-bit signed integer values, truncate the 32-bit product to the 18 most significant bits by right-shifting, round the truncated value by adding 1, and write bits `[16:1]` to the destination.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi32","","Load packed 32-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm256_cmpgt_epi16","","Compare packed 16-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmp_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_maskstore_pd","","Store packed double-precision (64-bit) floating-point elements from `a` into memory using `mask`.",N,N],[5,"_mm_loadu_si128","","Load 128-bits of integer data from memory into a new vector.",N,N],[5,"_mm256_cmpgt_epi64","","Compare packed 64-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_bzhi_u64","","Zero higher bits of `a` >= `index`.",N,[[["u64"],["u32"]],["u64"]]],[5,"_mm_sll_epi32","","Shift packed 32-bit integers in `a` left by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtepi32_ps","","Convert packed 32-bit integers in `a` to packed single-precision (32-bit) floating-point elements.",N,[[["__m256i"]],["__m256"]]],[5,"_mm_mul_epu32","","Multiply the low unsigned 32-bit integers from each packed 64-bit element in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results (Default)",N,N],[5,"_mm_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_set_epi8","","Set packed 8-bit integers in returned vector with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m256i"]]],[5,"_mm_stream_ss","","Non-temporal store of `a.0` into `p`.",N,N],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer vector are all zeros.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm_fmadd_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and add the intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant random value and store in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u32"]],["i32"]]],[17,"_MM_EXCEPT_OVERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm_set_ps","","Construct a `__m128` from four floating point values highest to lowest.",N,[[["f32"],["f32"],["f32"],["f32"]],["__m128"]]],[5,"_mm_cvtsi64x_si128","","Return a vector whose lowest element is `a` and all higher elements are `0`.",N,[[["i64"]],["__m128i"]]],[5,"_mm_max_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in place.",N,N],[5,"_xsave64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm256_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_extract_epi32","","Extract an 32-bit integer from `a` selected with `imm8`",N,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cvtsi64x_sd","","Return `a` with its lower element replaced by `b` after converting it to an `f64`.",N,[[["__m128d"],["i64"]],["__m128d"]]],[5,"_mm_comineq_sd","","Compare the lower element of `a` and `b` for not-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_add_pi8","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of `x` and clears all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_max_epi8","","Compare packed 8-bit integers in `a` and `b` and return packed maximum values in dst.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",N,N],[5,"_mm_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_store_ss","","Store the lowest 32 bit float of `a` into memory.",N,N],[5,"_mm_sra_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvtss_si32","","Convert the lowest 32 bit float in the input vector to a 32 bit integer.",N,[[["__m128"]],["i32"]]],[5,"_mm_cmpnge_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not greater than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_rdrand64_step","","Read a hardware generated 64-bit random value and store the result in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u64"]],["i32"]]],[5,"_mm256_rcp_ps","","Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in `a`, and return the results. The maximum relative error for this approximation is less than 1.5*2^-12.",N,[[["__m256"]],["__m256"]]],[17,"_CMP_TRUE_US","","True (unordered, signaling)",N,N],[5,"_mm256_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",N,N],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",N,N],[5,"_mm256_cmpeq_epi16","","Compare packed 16-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_storer_pd","","Store 2 double-precision (64-bit) floating-point elements from `a` into memory in reverse order. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cvttsd_si32","","Convert the lower double-precision (64-bit) floating-point element in `a` to a 32-bit integer with truncation.",N,[[["__m128d"]],["i32"]]],[5,"_mm256_mask_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_maskload_pd","","Load packed double-precision (64-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `mask`",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element of a 128-bit integer vector and clears the upper element.",N,N],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",N,N],[5,"_mm256_maddubs_epi16","","Vertically multiply each unsigned 8-bit integer from `a` with the corresponding signed 8-bit integer from `b`, producing intermediate signed 16-bit integers. Horizontally add adjacent pairs of intermediate signed 16-bit integers",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_set_pi32","","Set packed 32-bit integers in dst with the supplied values.",N,[[["i32"],["i32"]],["__m64"]]],[5,"_mm256_div_pd","","Compute the division of each of the 4 packed 64-bit floating-point elements in `a` by the corresponding packed elements in `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using control mask `imm8`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cvt_si2ss","","Alias for `_mm_cvtsi32_ss`.",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",N,[[["u32"]],["u32"]]],[5,"_mm_setr_pi32","","Set packed 32-bit integers in dst with the supplied values in reverse order.",N,[[["i32"],["i32"]],["__m64"]]],[5,"_mm_undefined_si128","","Return vector of type __m128i with undefined elements.",N,[[],["__m128i"]]],[5,"_mm_sha256msg2_epu32","","Perform the final calculation for the next four SHA256 message values (unsigned 32-bit integers) using previous message values from `a` and `b`, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_insert_epi32","","Return a copy of `a` with the 32-bit integer from `i` inserted at a location specified by `imm8`.",N,[[["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point elements with all zeros.",N,[[],["__m128d"]]],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",N,N],[5,"_mm_cmpneq_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input elements are not equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`.",N,[[["__m256i"],["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_unpacklo_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the lower half of `a` and `b`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtt_ss2si","","Alias for `_mm_cvttss_si32`.",N,[[["__m128"]],["i32"]]],[5,"_mm_adds_epi8","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi64","","Shift packed 64-bit integers in `a` right by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_srl_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_set1_pd","","Broadcast double-precision (64-bit) floating-point value `a` to all elements of returned vector.",N,[[["f64"]],["__m256d"]]],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",N,N],[5,"_m_paddw","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_srli_epi64","","Shift packed 64-bit integers in `a` right by `imm8` while shifting in zeros",N,[[["__m256i"],["i32"]],["__m256i"]]],[17,"_MM_ROUND_NEAREST","","See `_mm_setcsr`",N,N],[5,"_mm_aesenclast_si128","","Perform the last round of an AES encryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpnlt_pd","","Compare corresponding elements in `a` and `b` for not-less-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_or_si128","","Compute the bitwise OR of 128 bits (representing integer data) in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_MM_FLUSH_ZERO_MASK","","See `_MM_GET_FLUSH_ZERO_MODE`",N,N],[5,"_mm_loadu_ps","","Load four `f32` values from memory into a `__m128`. There are no restrictions on memory alignment. For aligned memory `_mm_load_ps` may be faster.",N,N],[5,"_blci_u32","","Sets all bits of `x` to 1 except for the least significant zero bit.",N,[[["u32"]],["u32"]]],[5,"_mm_insert_pi16","","Copies data from the 64-bit vector of `[4 x i16]` to the destination, and inserts the lower 16-bits of an integer operand at the 16-bit offset specified by the immediate operand `n`.",N,[[["__m64"],["i32"],["i32"]],["__m64"]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in `a` to 64-bit integers. The upper four elements of `a` are unused.",N,[[["__m128i"]],["__m256i"]]],[5,"_rdseed64_step","","Read a 64-bit NIST SP800-90B and SP800-90C compliant random value and store in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u64"]],["i32"]]],[5,"_mm_cmpngt_sd","","Return a new vector with the low element of `a` replaced by the not-greater-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_bextr2_u64","","Extracts bits of `a` specified by `control` into the least significant bits of the result.",N,[[["u64"],["u64"]],["u64"]]],[5,"_mm256_setr_epi16","","Set packed 16-bit integers in returned vector with the supplied values in reverse order.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m256i"]]],[5,"_mm_bsrli_si128","","Shift `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_rcp_ps","","Return the approximate reciprocal of packed single-precision (32-bit) floating-point elements in `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_sign_epi32","","Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and return the results. Results are zeroed out when the corresponding element in `b` is zero.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_extract_epi32","","Extract a 32-bit integer from `a`, selected with `imm8`.",N,[[["__m256i"],["i32"]],["i32"]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of `[2 x double]` from two 128-bit vector parameters of `[2 x double]`, using the immediate-value parameter as a specifier.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_pdep_u64","","Scatter contiguous low order bits of `a` to the result at the positions specified by the `mask`.",N,[[["u64"],["u64"]],["u64"]]],[17,"_MM_ROUND_MASK","","See `_MM_GET_ROUNDING_MODE`",N,N],[5,"_mm256_insert_epi64","","Copy `a` to result, and insert the 64-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i64"],["i32"]],["__m256i"]]],[5,"_mm_broadcastsd_pd","","Broadcast the low double-precision (64-bit) floating-point element from `a` to all elements of the 128-bit returned value.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm_move_epi64","","Return a vector where the low element is extracted from `a` and its upper element is zero.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_setr_epi64x","","Set packed 64-bit integers in returned vector with the supplied values in reverse order.",N,[[["i64"],["i64"],["i64"],["i64"]],["__m256i"]]],[5,"_mm_set_epi8","","Set packed 8-bit integers with the supplied values.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m128i"]]],[5,"_xsaves64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`",N,N],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_m_pminsw","","Compares the packed 16-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_sha1rnds4_epu32","","Perform four rounds of SHA1 operation using an initial SHA1 state (A,B,C,D) from `a` and some pre-computed sum of the next 4 round message values (unsigned 32-bit integers), and state variable E from `b`, and return the updated SHA1 state (A,B,C,D). `func` contains the logic functions and round constants.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[17,"_MM_EXCEPT_MASK","","See `_MM_GET_EXCEPTION_STATE`",N,N],[5,"_m_pmulhuw","","Multiplies packed 16-bit unsigned integer values and writes the high-order 16 bits of each 32-bit product to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_SIDD_BIT_MASK","","Mask only: return the bit mask",N,N],[5,"_mm_mullo_epi16","","Multiply the packed 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_subs_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpgt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is greater than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters (Default)",N,N],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision (64-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_store_ps","","Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_broadcast_pd","","Broadcast 128 bits from memory (composed of 2 packed double-precision (64-bit) floating-point elements) to all elements of the returned vector.",N,[[["__m128d"]],["__m256d"]]],[5,"_m_paddusw","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_broadcastsi128_si256","","Broadcast 128 bits of integer data from a to all 128-bit lanes in the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_adds_epi8","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtsd_si32","","Convert the lower double-precision (64-bit) floating-point element in a to a 32-bit integer.",N,[[["__m128d"]],["i32"]]],[5,"_mm_fnmadd_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_set1_ps","","Broadcast single-precision (32-bit) floating-point value `a` to all elements of returned vector.",N,[[["f32"]],["__m256"]]],[5,"_mm256_min_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and return packed minimum values",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_srl_epi64","","Shift packed 64-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_bzhi_u32","","Zero higher bits of `a` >= `index`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm256_set1_epi16","","Broadcast 16-bit integer `a` to all all elements of returned vector. This intrinsic may generate the `vpbroadcastw`.",N,[[["i16"]],["__m256i"]]],[5,"_mulx_u64","","Unsigned multiply without affecting flags.",N,[[["u64"],["u64"],["u64"]],["u64"]]],[5,"_mm_and_si128","","Compute the bitwise AND of 128 bits (representing integer data) in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_max_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_ROUND_UP","","See `_mm_setcsr`",N,N],[5,"_mm_cvtsi128_si64","","Return the lowest element of `a`.",N,[[["__m128i"]],["i64"]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point element in `b` down to an integer value, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copy the upper 3 packed elements from `a` to the upper elements of the intrinsic result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_storel_pi","","Store the lower half of `a` (64 bits) into memory.",N,N],[5,"_mm_cmpnlt_sd","","Return a new vector with the low element of `a` replaced by the not-less-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of `x` and sets all other bits.",N,[[["u32"]],["u32"]]],[17,"_MM_FROUND_TO_ZERO","","truncate",N,N],[5,"_mm_comile_sd","","Compare the lower element of `a` and `b` for less-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cvtsi64_ss","","Convert a 64 bit integer to a 32 bit float. The result vector is the input vector `a` with the lowest 32 bit float replaced by the converted integer.",N,[[["__m128"],["i64"]],["__m128"]]],[5,"_mm256_set_epi32","","Set packed 32-bit integers in returned vector with the supplied values.",N,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["__m256i"]]],[5,"_mm256_sqrt_ps","","Return the square root of packed single-precision (32-bit) floating point elements in `a`.",N,[[["__m256"]],["__m256"]]],[5,"_mm_loadu_pd","","Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into the returned vector. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_srli_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[17,"_MM_ROUND_DOWN","","See `_mm_setcsr`",N,N],[5,"_mm256_testc_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m256i"],["__m256i"]],["i32"]]],[5,"_mm_maskstore_ps","","Store packed single-precision (32-bit) floating-point elements from `a` into memory using `mask`.",N,N],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of `[4 x double]`.",N,[[["__m256d"]],["f64"]]],[5,"_mm256_setr_ps","","Set packed single-precision (32-bit) floating-point elements in returned vector with the supplied values in reverse order.",N,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["__m256"]]],[5,"_mm_undefined_ps","","Return vector of type __m128 with undefined elements.",N,[[],["__m128"]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_load_pd","","Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into the returned vector. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_blci_u64","","Sets all bits of `x` to 1 except for the least significant zero bit.",N,[[["u64"]],["u64"]]],[5,"_xrstor64","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_m_pinsrw","","Copies data from the 64-bit vector of `[4 x i16]` to the destination, and inserts the lower 16-bits of an integer operand at the 16-bit offset specified by the immediate operand `n`.",N,[[["__m64"],["i32"],["i32"]],["__m64"]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a 256-bit vector of `[8 x float]` to a 32-byte aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_shuffle_epi32","","Shuffle 32-bit integers in `a` using the control in `imm8`.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_unpacklo_pi32","","Unpacks the lower element from two `i32x2` vectors and interleaves them into the result: `[a.0, b.0]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_FROUND_TO_POS_INF","","round up",N,N],[5,"_mm_store1_pd","","Store the lower double-precision (64-bit) floating-point element from `a` into 2 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_storeu2_m128","","Store the high and low 128-bit halves (each composed of 4 packed single-precision (32-bit) floating-point elements) from `a` into memory two different 128-bit locations. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negate results only before the end of the string",N,N],[5,"_xrstors","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_load_si128","","Load 128-bits of integer data from memory into a new vector.",N,N],[5,"_mm_cmplt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is less than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_set_epi16","","Set packed 16-bit integers in returned vector with the supplied values.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m256i"]]],[5,"_bextr_u64","","Extracts bits in range [`start`, `start` + `length`) from `a` into the least significant bits of the result.",N,[[["u64"],["u32"],["u32"]],["u64"]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point elements in `b` from `a`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_setzero_ps","","Construct a `__m128` with all elements initialized to zero.",N,[[],["__m128"]]],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",N,N],[5,"_mm_loadl_pi","","Load two floats from `p` into the lower half of a `__m128`. The upper half is copied from the upper half of `a`.",N,N],[5,"_mm256_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half of each 128-bit lane in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_testz_pd","","Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cvtsi128_si64x","","Return the lowest element of `a`.",N,[[["__m128i"]],["i64"]]],[5,"_mm_blend_epi32","","Blend packed 32-bit integers from `a` and `b` using control mask `imm8`.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_set1_pi8","","Broadcast 8-bit integer a to all all elements of dst.",N,[[["i8"]],["__m64"]]],[5,"_mm_loaddup_pd","","Load a double-precision (64-bit) floating-point element from memory into both elements of return vector.",N,N],[5,"_mm_packus_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant random value and store in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u16"]],["i32"]]],[5,"_mm256_alignr_epi8","","Concatenate pairs of 16-byte blocks in `a` and `b` into a 32-byte temporary result, shift the result right by `n` bytes, and return the low 16 bytes.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_storeu2_m128i","","Store the high and low 128-bit halves (each composed of integer data) from `a` into memory two different 128-bit locations. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",N,N],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed double-precision floating-point elements. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_storer_ps","","Store four 32-bit floats into aligned memory in reverse order.",N,N],[5,"_mm_abs_pi16","","Compute the absolute value of packed 8-bit integers in `a`, and return the unsigned results.",N,[[["__m64"]],["__m64"]]],[5,"_mm_ucomieq_sd","","Compare the lower element of `a` and `b` for equality.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_bextr2_u32","","Extracts bits of `a` specified by `control` into the least significant bits of the result.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm256_mulhrs_epi16","","Multiply packed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Truncate each intermediate integer to the 18 most significant bits, round by adding 1, and return bits `[16:1]`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_bswap64","","Return an integer with the reversed byte order of x",N,[[["i64"]],["i64"]]],[5,"_mm_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_MM_HINT_T2","","See `_mm_prefetch`.",N,N],[5,"_m_pextrw","","Extracts 16-bit element from a 64-bit vector of `[4 x i16]` and returns it, as specified by the immediate integer operand.",N,[[["__m64"],["i32"]],["i32"]]],[5,"_mm256_set1_epi64x","","Broadcast 64-bit integer `a` to all elements of returned vector. This intrinsic may generate the `vpbroadcastq`.",N,[[["i64"]],["__m256i"]]],[5,"has_cpuid","","Does the host support the `cpuid` instruction?",N,[[],["bool"]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in `a` to 64-bit integers. The upper twelve elements of `a` are unused.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_load_pd1","","Load a double-precision (64-bit) floating-point element from memory into both elements of returned vector.",N,N],[5,"_mm_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_aesdeclast_si128","","Perform the last round of an AES decryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cmpgt_epi32","","Compare packed 32-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_permute_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`.",N,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_add_epi32","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_div_ps","","Compute the division of each of the 8 packed 32-bit floating-point elements in `a` by the corresponding packed elements in `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_fxsave","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR` registers to the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_mm256_cmp_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm_max_pu8","","Compares the packed 8-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in `a` to packed 16-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_broadcastq_epi64","","Broadcast the low packed 64-bit integer from `a` to all elements of the 128-bit returned value.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm256_mul_pd","","Add packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point elements in `a` by packed elements in `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_sign_pi8","","Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_set_ps","","Set packed single-precision (32-bit) floating-point elements in returned vector with the supplied values.",N,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["__m256"]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of operation from the current SHA1 state variable `a`, add that value to the scheduled values (unsigned 32-bit integers) in `b`, and returns the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_testc_pd","","Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm256_insertf128_ps","","Copy `a` to result, then insert 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `b` into result at the location specified by `imm8`.",N,[[["__m256"],["__m128"],["i32"]],["__m256"]]],[5,"_mm_cvtsi32_ss","","Convert a 32 bit integer to a 32 bit float. The result vector is the input vector `a` with the lowest 32 bit float replaced by the converted integer.",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128d"]],["__m128i"]]],[5,"_mm_extract_epi64","","Extract an 64-bit integer from `a` selected with `imm8`",N,[[["__m128i"],["i32"]],["i64"]]],[5,"_mm_mask_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_mulhi_epi16","","Multiply the packed 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_sub_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sign_epi32","","Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",N,[[["u32"],["u32"],["u32"]],["u32"]]],[5,"_mm256_store_pd","","Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_mullo_epi32","","Multiply the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and return the low 16 bits of the intermediate integers",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mulhrs_pi16","","Multiplies packed 16-bit signed integer values, truncates the 32-bit products to the 18 most significant bits by right-shifting, rounds the truncated value by adding 1, and writes bits `[16:1]` to the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two packed vectors of 8 32-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in locations of indices 0, 1, 4, 5; while sums of elements from `b` are locations 2, 3, 6, 7.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_blsr_u32","","Resets the lowest set bit of `x`.",N,[[["u32"]],["u32"]]],[5,"_fxrstor64","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU registers from the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_mm_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm256_floor_ps","","Round packed single-precision (32-bit) floating point elements in `a` toward negative infinity.",N,[[["__m256"]],["__m256"]]],[5,"_mm256_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `b`.",N,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of `x` and sets all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_store_ps1","","Alias for `_mm_store1_ps`",N,N],[5,"_mm_mask_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of `[2 x double]` to a 128-bit aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_lzcnt_u64","","Counts the leading most significant zero bits.",N,[[["u64"]],["u64"]]],[17,"_MM_HINT_NTA","","See `_mm_prefetch`.",N,N],[5,"_mm_maskload_epi64","","Load packed 64-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of `a` using the control in `imm8`.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_ceil_ps","","Round packed single-precision (32-bit) floating point elements in `a` toward positive infinity.",N,[[["__m256"]],["__m256"]]],[17,"_MM_MASK_INEXACT","","See `_mm_setcsr`",N,N],[5,"_mm256_maskstore_ps","","Store packed single-precision (32-bit) floating-point elements from `a` into memory using `mask`.",N,N],[5,"_mm_cmpord_sd","","Return a new vector with the low element of `a` replaced by the result of comparing both of the lower elements of `a` and `b` to `NaN`. If neither are equal to `NaN` then `0xFFFFFFFFFFFFFFFF` is used and `0` otherwise.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[3,"__m128i","","128-bit wide integer vector type, x86-specific",N,N],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp counter.",N,[[],["i64"]]],[5,"_mm_sha1msg2_epu32","","Perform the final calculation for the next four SHA1 message values (unsigned 32-bit integers) using the intermediate result in `a` and the previous message values in `b`, and returns the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_extract_pi16","","Extracts 16-bit element from a 64-bit vector of `[4 x i16]` and returns it, as specified by the immediate integer operand.",N,[[["__m64"],["i32"]],["i32"]]],[5,"_mm256_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in `imm8`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_storeu_pd","","Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[17,"_SIDD_NEGATIVE_POLARITY","","Negate results",N,N],[5,"_m_pmaxub","","Compares the packed 8-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_sign_epi16","","Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and return the results. Results are zeroed out when the corresponding element in `b` is zero.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",N,[[["__m256d"]],["__m128d"]]],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",N,N],[5,"_mm_cmpistrc","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return `1` if the resulting mask was non-zero, and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_fnmadd_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using the mask `imm8`.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cvtsi64_si128","","Return a vector whose lowest element is `a` and all higher elements are `0`.",N,[[["i64"]],["__m128i"]]],[5,"_mm_set_pi16","","Set packed 16-bit integers in dst with the supplied values.",N,[[["i16"],["i16"],["i16"],["i16"]],["__m64"]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed vectors of 8 32-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in locations of indices 0, 1, 4, 5; while sums of elements from `b` are locations 2, 3, 6, 7.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_xgetbv","","Reads the contents of the extended control register `XCR` specified in `xcr_no`.",N,[[["u32"]],["u64"]]],[5,"_mm_sign_pi16","","Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpnle_ss","","Compare the lowest `f32` of both inputs for not-less-than-or-equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not less than or equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_zeroupper","","Zero the upper 128 bits of all YMM registers; the lower 128-bits of the registers are unmodified.",N,N],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm256_set1_epi32","","Broadcast 32-bit integer `a` to all elements of returned vector. This intrinsic may generate the `vpbroadcastd`.",N,[[["i32"]],["__m256i"]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit floating-point vector of `[4 x float]`.",N,[[["__m128i"]],["__m128"]]],[5,"_m_psubb","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_testz_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m256i"],["__m256i"]],["i32"]]],[5,"_mm_aesenc_si128","","Perform one round of an AES encryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_ucomineq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are not equal, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_slli_epi32","","Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros, return the results;",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cmpnle_sd","","Return a new vector with the low element of `a` replaced by the not-less-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_add_epi16","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_blendv_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `c` as a mask.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_addsub_ps","","Alternatively add and subtract packed single-precision (32-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of `[4 x float]` into a 128-bit integer vector.",N,[[["__m128"]],["__m128i"]]],[5,"_mm_srai_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_sra_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_floor_pd","","Round packed double-precision (64-bit) floating point elements in `a` toward negative infinity.",N,[[["__m256d"]],["__m256d"]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of `x`.",N,[[["u32"]],["u32"]]],[5,"_mm256_min_epi32","","Compare packed 32-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of `[2 x double]` to a memory location.",N,N],[5,"_mm_loadl_epi64","","Load 64-bit integer from memory into first element of returned vector.",N,N],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",N,N],[17,"_MM_MASK_MASK","","See `_MM_GET_EXCEPTION_MASK`",N,N],[5,"_mm_rcp_ss","","Return the approximate reciprocal of the first single-precision (32-bit) floating-point element in `a`, the other elements are unchanged.",N,[[["__m128"]],["__m128"]]],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`",N,N],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) floating-point elements from `a`, and return the results.",N,[[["__m256"]],["__m256"]]],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",N,N],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_insert_si64","","Inserts the `[length:0]` bits of `y` into `x` at `index`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in `a` 128-bit integer vector are all ones.",N,[[["__m128i"]],["i32"]]],[5,"_mm_set1_epi64x","","Broadcast 64-bit integer `a` to all elements.",N,[[["i64"]],["__m128i"]]],[5,"_mm256_loadu_pd","","Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into result. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_cmpngt_ss","","Compare the lowest `f32` of both inputs for not-greater-than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not greater than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_sqrt_sd","","Return a new vector with the low element of `a` replaced by the square root of the lower element `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtss_sd","","Convert the lower single-precision (32-bit) floating-point element in `b` to a double-precision (64-bit) floating-point element, store the result in the lower element of the return value, and copy the upper element from `a` to the upper element the return value.",N,[[["__m128d"],["__m128"]],["__m128d"]]],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",N,N],[5,"_mm_cvtpi32_pd","","Converts the two signed 32-bit integer elements of a 64-bit vector of `[2 x i32]` into two double-precision floating-point values, returned in a 128-bit vector of `[2 x double]`.",N,[[["__m64"]],["__m128d"]]],[5,"_mm_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128"]],["__m128i"]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128 bits of the result are undefined.",N,[[["__m128"]],["__m256"]]],[5,"_mm_cmpestra","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if `b` did not contain a null character and the resulting mask was zero, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_m_psubsb","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_movemask_pd","","Return a mask of the most significant bit of each element in `a`.",N,[[["__m128d"]],["i32"]]],[5,"_mm_mask_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_extract_epi64","","Extract a 64-bit integer from `a`, selected with `imm8`.",N,[[["__m256i"],["i32"]],["i64"]]],[5,"_mm256_broadcastsd_pd","","Broadcast the low double-precision (64-bit) floating-point element from `a` to all elements of the 256-bit returned value.",N,[[["__m128d"]],["__m256d"]]],[5,"_mm_fnmsub_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_extract_epi8","","Extract an 8-bit integer from `a`, selected with `imm8`. Returns a 32-bit integer containing the zero-extended integer data.",N,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm256_loadu2_m128i","","Load two 128-bit values (composed of integer data) from memory, and combine them into a 256-bit value. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_mm256_broadcast_ps","","Broadcast 128 bits from memory (composed of 4 packed single-precision (32-bit) floating-point elements) to all elements of the returned vector.",N,[[["__m128"]],["__m256"]]],[5,"_mm_min_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_adds_pi16","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_store_pd","","Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_unpacklo_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the low half of each 128-bit lane in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_mullo_epi32","","Multiply the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and returns the lowest 32-bit, whatever they might be, reinterpreted as a signed integer. While `pmulld __m128i::splat(2), __m128i::splat(2)` returns the obvious `__m128i::splat(4)`, due to wrapping arithmetic `pmulld __m128i::splat(i32::MAX), __m128i::splat(2)` would return a negative number.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_xor_si256","","Compute the bitwise XOR of 256 bits (representing integer data) in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi64","","Shift packed 64-bit integers in `a` left by `count` while shifting in zeros, and return the result",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_slli_epi64","","Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros, return the results;",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_adds_epu16","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpord_pd","","Compare corresponding elements in `a` and `b` to see if neither is `NaN`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_sign_pi32","","Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"__cpuid_count","","Returns the result of the `cpuid` instruction for a given `leaf` (`EAX`) and `sub_leaf` (`ECX`).",N,[[["u32"],["u32"]],["cpuidresult"]]],[5,"_mm256_permute2f128_pd","","Shuffle 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) selected by `imm8` from `a` and `b`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_cmpgt_epi8","","Compare packed 8-bit integers in `a` and `b` for greater-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_srai_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_sqrt_ps","","Return the square root of packed single-precision (32-bit) floating-point elements in `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm_setr_epi8","","Set packed 8-bit integers with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m128i"]]],[5,"_mm256_cmpeq_epi32","","Compare packed 32-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_srl_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",N,[[["u32"]],["u32"]]],[5,"_mm_stream_ps","","Stores `a` into the memory at `mem_addr` using a non-temporal memory hint.",N,N],[5,"_mm_cmpestro","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return bit `0` of the resulting bit mask.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of `x` and clears all other bits.",N,[[["u32"]],["u32"]]],[5,"_mm256_shuffle_epi8","","Shuffle bytes from `a` according to the content of `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_xsetbv","","Copy 64-bits from `val` to the extended control register (`XCR`) specified by `a`.",N,N],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of `x`.",N,[[["u64"]],["u64"]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sub_ss","","Subtracts the first component of `b` from `a`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtsd_ss","","Convert the lower double-precision (64-bit) floating-point element in `b` to a single-precision (32-bit) floating-point element, store the result in the lower element of the return value, and copy the upper element from `a` to the upper element the return value.",N,[[["__m128"],["__m128d"]],["__m128"]]],[5,"_mm_cmpge_sd","","Return a new vector with the low element of `a` replaced by the greater-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_sha256msg1_epu32","","Perform an intermediate calculation for the next four SHA256 message values (unsigned 32-bit integers) using previous message values from `a` and `b`, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_avg_epu8","","Average packed unsigned 8-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_setr_pd","","Set packed double-precision (64-bit) floating-point elements in the return value with the supplied values in reverse order.",N,[[["f64"],["f64"]],["__m128d"]]],[5,"_mm_cvtsd_si64","","Convert the lower double-precision (64-bit) floating-point element in a to a 64-bit integer.",N,[[["__m128d"]],["i64"]]],[5,"_mm_subs_pu8","","Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpistrz","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return `1` if any character in `b` was null. and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm256_broadcastq_epi64","","Broadcast the low packed 64-bit integer from `a` to all elements of the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_testc_pd","","Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m256d"],["__m256d"]],["i32"]]],[5,"_mm256_or_ps","","Compute the bitwise OR packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_cvttss_si32","","Convert the lowest 32 bit float in the input vector to a 32 bit integer with truncation.",N,[[["__m128"]],["i32"]]],[5,"_mm_mul_su32","","Multiplies 32-bit unsigned integer values contained in the lower bits of the two 64-bit integer vectors and returns the 64-bit unsigned product.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_insert_ps","","Select a single value in `a` to store at some position in `b`, Then zero elements according to `imm8`.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm_packs_pi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_unpackhi_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the high half of each 128-bit lane in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_comilt_sd","","Compare the lower element of `a` and `b` for less-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",N,N],[5,"_mm_subs_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_min_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return the corresponding minimum values.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of `[4 x double]` from a 128-bit floating-point vector of `[2 x double]`. The lower 128 bits contain the value of the source vector. The upper 128 bits are set to zero.",N,[[["__m128d"]],["__m256d"]]],[5,"_mm_unpackhi_pi32","","Unpacks the upper element from two `i32x2` vectors and interleaves them into the result: `[a.1, b.1]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pd","","Compare corresponding elements in `a` and `b` for greater-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_andn_u32","","Bitwise logical `AND` of inverted `a` with `b`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm_cmpistrs","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns `1` if any character in `a` was null, and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_permute_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `imm8`.",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_andnot_si128","","Compute the bitwise NOT of 128 bits (representing integer data) in `a` and then AND with `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_sra_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm_movemask_epi8","","Return a mask of the most significant bit of each element in `a`.",N,[[["__m128i"]],["i32"]]],[5,"_mm_mul_epi32","","Multiply the low 32-bit integers from each packed 64-bit element in `a` and `b`, and return the signed 64-bit result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_load_ps","","Load four `f32` values from aligned memory into a `__m128`. If the pointer is not aligned to a 128-bit boundary (16 bytes) a general protection fault will be triggered (fatal program crash).",N,N],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in `a` to 16-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_m_paddsw","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m256"]],["__m256i"]]],[5,"_mm_setcsr","","Set the MXCSR register with the 32-bit unsigned integer value.",N,N],[5,"_mm_comigt_sd","","Compare the lower element of `a` and `b` for greater-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_storeu_si128","","Store 128-bits of integer data from `a` into memory.",N,N],[17,"_MM_ROUND_TOWARD_ZERO","","See `_mm_setcsr`",N,N],[5,"_mm_add_ps","","Adds __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_abs_epi16","","Compute the absolute value of each of the packed 16-bit signed integers in `a` and return the 16-bit unsigned integer",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed single-precision floating-point elements. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",N,N],[5,"_mm_max_pi16","","Compares the packed 16-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_round_ps","","Round packed single-precision (32-bit) floating point elements in `a` according to the flag `b`. The value of `b` may be as follows:",N,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_cmpestrc","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if the resulting mask was non-zero, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm256_andnot_si256","","Compute the bitwise NOT of 256 bits (representing integer data) in `a` and then AND with `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_crc32_u64","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 64-bit integer `v`.",N,[[["u64"],["u64"]],["u64"]]],[5,"_mm256_storeu2_m128d","","Store the high and low 128-bit halves (each composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory two different 128-bit locations. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",N,N],[5,"_m_psubw","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpngt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not greater than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_testc_ps","","Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_min_epi8","","Compare packed 8-bit integers in `a` and `b` and return packed minimum values in dst.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cmp_sd","","Compare the lower double-precision (64-bit) floating-point element in `a` and `b` based on the comparison operand specified by `imm8`, store the result in the lower element of returned vector, and copy the upper element from `a` to the upper element of returned vector.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",N,N],[5,"_mm_cmpord_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. Returns four floats that have one of two possible bit patterns. The element in the output vector will be `0xffffffff` if the input elements in `a` and `b` are ordered (i.e., neither of them is a NaN), or 0 otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_load_ps","","Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into result. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_movemask_pd","","Set each bit of the returned mask based on the most significant bit of the corresponding packed double-precision (64-bit) floating-point element in `a`.",N,[[["__m256d"]],["i32"]]],[5,"_mm_cvtt_ps2pi","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128"]],["__m64"]]],[5,"_mm256_loadu2_m128d","","Load two 128-bit values (composed of 2 packed double-precision (64-bit) floating-point elements) from memory, and combine them into a 256-bit value. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",N,N],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from `a` using control mask `imm8`.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`.",N,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_mask_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_insertf128_pd","","Copy `a` to result, then insert 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `b` into result at the location specified by `imm8`.",N,[[["__m256d"],["__m128d"],["i32"]],["__m256d"]]],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",N,N],[5,"_m_psubusb","","Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_add_epi8","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_blend_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using control mask `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm256_mul_epi32","","Multiply the low 32-bit integers from each packed 64-bit element in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_MM_SET_EXCEPTION_MASK","","See `_mm_setcsr`",N,N],[5,"_mm_extract_ps","","Extract a single-precision (32-bit) floating-point element from `a`, selected with `imm8`",N,[[["__m128"],["i32"]],["i32"]]],[5,"_mm_cmpge_pd","","Compare corresponding elements in `a` and `b` for greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_avg_epu16","","Average packed unsigned 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_max_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return the corresponding maximum values.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_maddubs_epi16","","Multiply corresponding pairs of packed 8-bit unsigned integer values contained in the first source operand and packed 8-bit signed integer values contained in the second source operand, add pairs of contiguous products with signed saturation, and writes the 16-bit sums to the corresponding bits in the destination.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_ucomile_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than or equal to the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see `vendor::_MM_SET_ROUNDING_MODE`",N,N],[5,"_mm_sha256rnds2_epu32","","Perform 2 rounds of SHA256 operation using an initial SHA256 state (C,D,G,H) from `a`, an initial SHA256 state (A,B,E,F) from `b`, and a pre-computed sum of the next 2 round message values (unsigned 32-bit integers) and the corresponding round constants from `k`, and store the updated SHA256 state (A,B,E,F) in dst.",N,[[["__m128i"],["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_pause","","Provide a hint to the processor that the code sequence is a spin-wait loop.",N,N],[5,"_mm_sra_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_blcic_u64","","Sets the least significant zero bit of `x` and clears all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_load_ps1","","Alias for `_mm_load1_ps`",N,N],[5,"_m_psadbw","","Subtracts the corresponding 8-bit unsigned integer values of the two 64-bit vector operands and computes the absolute value for each of the difference. Then sum of the 8 absolute differences is written to the bits `[15:0]` of the destination; the remaining bits `[63:16]` are cleared.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_slli_epi16","","Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros, return the results;",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_maskload_ps","","Load packed single-precision (32-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_mm_slli_epi16","","Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[17,"_SIDD_CMP_RANGES","","For each character in `a`, determine if `b[0] <= c <= b[1] or b[1] <= c <= b[2]...`",N,N],[5,"_mm256_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit lanes of `a` using the control in `imm8`. The low 64 bits of 128-bit lanes of `a` are copied to the output.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_fxsave64","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR` registers to the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_mm_setr_epi32","","Set packed 32-bit integers with the supplied values in reverse order.",N,[[["i32"],["i32"],["i32"],["i32"]],["__m128i"]]],[5,"_mm256_load_si256","","Load 256-bits of integer data from memory into result. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cmpord_ss","","Check if the lowest `f32` of both inputs are ordered. The lowest 32 bits of the result will be `0xffffffff` if neither of `a.extract(0)` or `b.extract(0)` is a NaN, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_ceil_pd","","Round packed double-precision (64-bit) floating point elements in `a` toward positive infinity.",N,[[["__m256d"]],["__m256d"]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from `a` according to the content of `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the absolute values of the differences to the corresponding bits in the destination. Then sums of the absolute differences are returned according to the bit fields in the immediate operand.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) floating-point elements from `a`, and return the results.",N,[[["__m256"]],["__m256"]]],[5,"_mm_cmpneq_ss","","Compare the lowest `f32` of both inputs for inequality. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_testnzc_ps","","Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_sqrt_pd","","Return a new vector with the square root of each of the values in `a`.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_epi8","","Compare packed 8-bit integers in `a` and `b` for equality.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_set_m128","","Set packed __m256 returned vector with the supplied values.",N,[[["__m128"],["__m128"]],["__m256"]]],[5,"_mm_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point elements in \"a\" to packed single-precision (32-bit) floating-point elements",N,[[["__m128d"]],["__m128"]]],[5,"_m_pmaxsw","","Compares the packed 16-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_lddqu_si128","","Load 128-bits of integer data from unaligned memory. This intrinsic may perform better than `_mm_loadu_si128` when the data crosses a cache line boundary.",N,N],[5,"_mm256_storeu_si256","","Store 256-bits of integer data from `a` into memory.    `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_add_si64","","Adds two signed or unsigned 64-bit integer values, returning the lower 64 bits of the sum.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",N,[[["__m256"]],["__m128"]]],[5,"_mm_sub_pi32","","Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_abs_pi8","","Compute the absolute value of packed 8-bit integers in `a` and return the unsigned results.",N,[[["__m64"]],["__m64"]]],[5,"_mm256_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_broadcastd_epi32","","Broadcast the low packed 32-bit integer from `a` to all elements of the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_cmpeq_epi32","","Compare packed 32-bit integers in `a` and `b` for equality.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_permute2f128_ps","","Shuffle 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) selected by `imm8` from `a` and `b`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_xor_pd","","Compute the bitwise XOR of packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_ucomigt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_avg_pu16","","Computes the rounded averages of the packed unsigned 16-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit integer vector. The lower 128 bits contain the value of the source vector. The upper 128 bits are set to zero.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_maskload_ps","","Load packed single-precision (32-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_mm_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `b`.",N,[[["__m128"],["__m128i"]],["__m128"]]],[5,"_mm256_min_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of `[2 x double]` to a memory location.",N,N],[5,"_mm256_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m256d"]],["__m128i"]]],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by `a` and `b` are equal",N,N],[5,"_mm_cmp_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_store_si256","","Store 256-bits of integer data from `a` into memory. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cmpunord_sd","","Return a new vector with the low element of `a` replaced by the result of comparing both of the lower elements of `a` and `b` to `NaN`. If either is equal to `NaN` then `0xFFFFFFFFFFFFFFFF` is used and `0` otherwise.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_mask_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_storel_epi64","","Store the lower 64-bit integer `a` to a memory location.",N,N],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",N,N],[5,"_mm256_sub_ps","","Subtract packed single-precision (32-bit) floating-point elements in `b` from packed elements in `a`.",N,[[["__m256"],["__m256"]],["__m256"]]],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",N,N],[5,"_mm_cvttpd_pi32","","Converts the two double-precision floating-point elements of a 128-bit vector of `[2 x double]` into two signed 32-bit integer values, returned in a 64-bit vector of `[2 x i32]`. If the result of either conversion is inexact, the result is truncated (rounded towards zero) regardless of the current MXCSR setting.",N,[[["__m128d"]],["__m64"]]],[3,"__m128d","","128-bit wide set of two `f64` types, x86-specific",N,N],[5,"_mm256_setr_pd","","Set packed double-precision (64-bit) floating-point elements in returned vector with the supplied values in reverse order.",N,[[["f64"],["f64"],["f64"],["f64"]],["__m256d"]]],[17,"_MM_EXCEPT_INVALID","","See `_mm_setcsr`",N,N],[5,"_mm_comieq_sd","","Compare the lower element of `a` and `b` for equality.",N,[[["__m128d"],["__m128d"]],["i32"]]],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",N,N],[5,"_mm_cvtsi32_sd","","Return `a` with its lower element replaced by `b` after converting it to an `f64`.",N,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_m_paddusb","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpeq_ss","","Compare the lowest `f32` of both inputs for equality. The lowest 32 bits of the result will be `0xffffffff` if the two inputs are equal, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_mul_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_sub_si64","","Subtracts signed or unsigned 64-bit integer values and writes the difference to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_ucomige_sd","","Compare the lower element of `a` and `b` for greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_mfence","","Perform a serializing operation on all load-from-memory and store-to-memory instructions that were issued prior to this instruction.",N,N],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_hsubs_pi16","","Horizontally subtracts the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`. Positive differences greater than 7FFFh are saturated to 7FFFh. Negative differences less than 8000h are saturated to 8000h.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_XCR_XFEATURE_ENABLED_MASK","","`XFEATURE_ENABLED_MASK` for `XCR`",N,N],[5,"_mm256_load_pd","","Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into result. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_or_pd","","Compute the bitwise OR packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_mask_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in `a` to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two packed vectors of 4 64-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in even locations, while sums of elements from `b` are returned in odd locations.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_max_ss","","Compare the first single-precision (32-bit) floating-point element of `a` and `b`, and return the maximum value in the first element of the return value, the other elements are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_sllv_epi64","","Shift packed 64-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_pd","","Unpack and interleave double-precision (64-bit) floating-point elements from the high half of each 128-bit lane in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",N,[[],["__m128i"]]],[5,"_m_psubd","","Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmplt_ss","","Compare the lowest `f32` of both inputs for less than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is less than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_mpsadbw_epu8","","Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in `a` compared to those in `b`, and store the 16-bit results in dst. Eight SADs are performed for each 128-bit lane using one quadruplet from `b` and eight quadruplets from `a`. One quadruplet is selected from `b` starting at on the offset specified in `imm8`. Eight quadruplets are formed from sequential 8-bit integers selected from `a` starting at the offset specified in `imm8`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cmpistri","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8` and return the generated index. Similar to [`_mm_cmpestri`] with the exception that [`_mm_cmpestri`] requires the lengths of `a` and `b` to be explicitly specified.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_cvtpu16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_MM_GET_EXCEPTION_STATE","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_mm_set_epi16","","Set packed 16-bit integers with the supplied values.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m128i"]]],[5,"_mm_loadr_pd","","Load 2 double-precision (64-bit) floating-point elements from memory into the returned vector in reverse order. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_MM_SET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",N,N],[5,"_mm256_max_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtps_pi32","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128"]],["__m64"]]],[5,"_mm_shuffle_epi8","","Shuffle bytes from `a` according to the content of `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_sd","","Return a new vector with the low element of `a` replaced by the less-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"__cpuid","","See `__cpuid_count`.",N,[[["u32"]],["cpuidresult"]]],[5,"_mm256_cmpeq_epi64","","Compare packed 64-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_cvtpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m256d"]],["__m128i"]]],[17,"_MM_MASK_DENORM","","See `_mm_setcsr`",N,N],[5,"_mm_cmpistrm","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return the generated mask.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_m_pavgw","","Computes the rounded averages of the packed unsigned 16-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_max_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return packed maximum values",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_maskstore_epi32","","Store packed 32-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm256_set1_epi8","","Broadcast 8-bit integer `a` to all elements of returned vector. This intrinsic may generate the `vpbroadcastb`.",N,[[["i8"]],["__m256i"]]],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",N,N],[5,"_mm_cmpestrs","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if any character in a was null, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm256_shuffle_epi32","","Shuffle 32-bit integers in 128-bit lanes of `a` using the control in `imm8`.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_loadu_ps","","Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into result. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_mul_sd","","Return a new vector with the low element of `a` replaced by multiplying the low elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_packus_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_max_sd","","Return a new vector with the low element of `a` replaced by the maximum of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtps_pi8","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 8-bit integers, and returns theem in the lower 4 elements of the result.",N,[[["__m128"]],["__m64"]]],[5,"_mm_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_hadds_pi16","","Horizontally add the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`. Positive sums greater than 7FFFh are saturated to 7FFFh. Negative sums less than 8000h are saturated to 8000h.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_mulhi_epi16","","Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers and returning the high 16 bits of the intermediate integers.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_testz_ps","","Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_cmpistro","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return bit `0` of the resulting bit mask.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_ucomineq_sd","","Compare the lower element of `a` and `b` for not-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",N,N],[5,"_mm_hsub_ps","","Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_srlv_epi64","","Shift packed 64-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",N,[[["__m256d"]],["__m256i"]]],[5,"_mm256_hadds_epi16","","Horizontally add adjacent pairs of 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit floating-point vector of `[2 x double]`.",N,[[["__m128i"]],["__m128d"]]],[5,"_mm_adds_pu16","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_srl_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_blcs_u64","","Sets the least significant zero bit of `x`.",N,[[["u64"]],["u64"]]],[5,"_mm256_undefined_si256","","Return vector of type __m256i with undefined elements.",N,[[],["__m256i"]]],[5,"_mm_div_ps","","Divides __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_slli_epi64","","Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_prefetch","","Fetch the cache line that contains address `p` using the given `strategy`.",N,N],[5,"_mm_permute_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` using the control in `imm8`.",N,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_load1_pd","","Load a double-precision (64-bit) floating-point element from memory into both elements of returned vector.",N,N],[5,"_mm_min_ss","","Compare the first single-precision (32-bit) floating-point element of `a` and `b`, and return the minimum value in the first element of the return value, the other elements are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_shuffle_pi16","","Shuffles the 4 16-bit integers from a 64-bit integer vector to the destination, as specified by the immediate value operand.",N,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_move_ss","","Return a `__m128` with the first component from `b` and the remaining components from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point element in `b` using the `rounding` parameter, store the result as a double-precision floating-point element in the lower element of the intrinsic result, and copy the upper element from `a` to the upper element of the intrinsic result. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_comile_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than or equal to the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_undefined_pd","","Return vector of type __m128d with undefined elements.",N,[[],["__m128d"]]],[5,"_mm_cmpunord_pd","","Compare corresponding elements in `a` and `b` to see if either is `NaN`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_round_pd","","Round packed double-precision (64-bit) floating point elements in `a` according to the flag `b`. The value of `b` may be as follows:",N,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all elements of the 128-bit returned value",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_cvtps_pd","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128"]],["__m256d"]]],[17,"_MM_EXCEPT_INEXACT","","See `_mm_setcsr`",N,N],[5,"_mm_extract_epi16","","Return the `imm8` element of `a`.",N,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm256_extract_epi8","","Extract an 8-bit integer from `a`, selected with `imm8`. Returns a 32-bit integer containing the zero-extended integer data.",N,[[["__m256i"],["i32"]],["i8"]]],[5,"_popcnt32","","Counts the bits that are set.",N,[[["i32"]],["i32"]]],[5,"_mm_set1_pd","","Broadcast double-precision (64-bit) floating-point value a to all elements of the return value.",N,[[["f64"]],["__m128d"]]],[5,"_mm_comige_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than or equal to the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_epi64","","Compare packed 64-bit integers in `a` and `b` for greater-than, return the results.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_loadh_pi","","Set the upper two single-precision floating-point values with 64 bits of data loaded from the address `p`; the lower two values are passed through from `a`.",N,N],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastd_epi32","","Broadcast the low packed 32-bit integer from `a` to all elements of the 128-bit returned value.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sub_pd","","Subtract packed double-precision (64-bit) floating-point elements in `b` from packed elements in `a`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_extract_si64","","Extracts the bit range specified by `y` from the lower 64 bits of `x`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in `a`, find if it is in `b` (Default)",N,N],[5,"_mm_cmpnle_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not less than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtpd_pi32","","Converts the two double-precision floating-point elements of a 128-bit vector of `[2 x double]` into two signed 32-bit integer values, returned in a 64-bit vector of `[2 x i32]`.",N,[[["__m128d"]],["__m64"]]],[5,"_mm_min_epi32","","Compare packed 32-bit integers in `a` and `b`, and return packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtsi128_si32","","Return the lowest element of `a`.",N,[[["__m128i"]],["i32"]]],[5,"_mm256_insertf128_si256","","Copy `a` to result, then insert 128 bits from `b` into result at the location specified by `imm8`.",N,[[["__m256i"],["__m128i"],["i32"]],["__m256i"]]],[5,"_m_psubusw","","Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hadd_ps","","Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_xrstor","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_fnmsub_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_add_epi16","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_m_paddd","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_packs_pi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_unpacklo_pd","","Unpack and interleave double-precision (64-bit) floating-point elements from the low half of each 128-bit lane in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",N,[[["__m256i"]],["__m256d"]]],[5,"_mm_cvttss_si64","","Convert the lowest 32 bit float in the input vector to a 64 bit integer with truncation.",N,[[["__m128"]],["i64"]]],[5,"_mm_avg_epu8","","Average packed unsigned 8-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_storeh_pi","","Store the upper half of `a` (64 bits) into memory.",N,N],[5,"_mm256_blend_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `imm8`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_cmpge_ss","","Compare the lowest `f32` of both inputs for greater than or equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is greater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` within 256-bit lanes using the control in `b`.",N,[[["__m256d"],["__m256i"]],["__m256d"]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_load1_ps","","Construct a `__m128` by duplicating the value read from `p` into all elements.",N,N],[5,"_blsi_u32","","Extract lowest set isolated bit.",N,[[["u32"]],["u32"]]],[5,"_mm256_max_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_testz_pd","","Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m256d"],["__m256d"]],["i32"]]],[5,"_mm256_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed single-precision (32-bit) floating-point elements.",N,[[["__m256d"]],["__m128"]]],[5,"_mm_fmsub_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`,  and subtract the lower element in `c` from the intermediate result. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",N,N],[5,"_mm_setr_epi16","","Set packed 16-bit integers with the supplied values in reverse order.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m128i"]]],[5,"_mm256_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all elements of the 256-bit returned value",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_lfence","","Perform a serializing operation on all load-from-memory instructions that were issued prior to this instruction.",N,N],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of `[4 x double]` to a 32-byte aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_insert_epi16","","Return a new vector where the `imm8` element of `a` is replaced with `i`.",N,[[["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm_cvtpi16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_extract_epi16","","Extract a 16-bit integer from `a`, selected with `imm8`. Returns a 32-bit integer containing the zero-extended integer data.",N,[[["__m256i"],["i32"]],["i16"]]],[5,"_mm_cmpnlt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not less than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits of a 128-bit vector of `[2 x double]`. The low-order bits are copied from the low-order bits of the first operand.",N,N],[5,"_mm_store_si128","","Store 128-bits of integer data from `a` into memory.",N,N],[5,"_mm256_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi16","","Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and return the low 16 bits of the intermediate integers",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_srai_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m128i"],["i32"]],["__m128i"]]],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",N,N],[5,"_mm_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128"]],["__m128i"]]],[17,"_SIDD_UNIT_MASK","","Mask only: return the byte mask",N,N],[5,"_m_paddsb","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_unpackhi_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the higher half of `a` and `b`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input elements were equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_min_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_max_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and return packed maximum values",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_avg_epu16","","Average packed unsigned 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_set1_epi8","","Broadcast 8-bit integer `a` to all elements.",N,[[["i8"]],["__m128i"]]],[5,"_mm256_srl_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_and_ps","","Compute the bitwise AND of packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_setr_m128i","","Set packed __m256i returned vector with the supplied values.",N,[[["__m128i"],["__m128i"]],["__m256i"]]],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",N,N],[5,"_mm_madd_epi16","","Multiply and then horizontally add signed 16 bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_add_epi8","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_mask_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[3,"__m256d","","256-bit wide set of four `f64` types, x86-specific",N,N],[5,"_mm256_hadd_epi32","","Horizontally add adjacent pairs of 32-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper 128 bits of the result are undefined.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_blend_epi32","","Blend packed 32-bit integers from `a` and `b` using control mask `imm8`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `imm2`",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_sllv_epi32","","Shift packed 32-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_ucomigt_sd","","Compare the lower element of `a` and `b` for greater-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cmplt_pd","","Compare corresponding elements in `a` and `b` for less-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` using the control in `b`.",N,[[["__m128d"],["__m128i"]],["__m128d"]]],[5,"_mm_max_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_maskmove_si64","","Conditionally copies the values from each 8-bit element in the first 64-bit integer vector operand to the specified memory location, as specified by the most significant bit in the corresponding element in the second 64-bit integer vector operand.",N,N],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a 32-byte aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon)",N,N],[5,"_mm_comilt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",N,[[["__m256"]],["__m256i"]]],[5,"_MM_GET_ROUNDING_MODE","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_mm_cvtepi32_pd","","Convert the lower two packed 32-bit integers in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128i"]],["__m128d"]]],[5,"_mm_adds_pi8","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_blcmsk_u32","","Sets the least significant zero bit of `x` and clears all bits above that bit.",N,[[["u32"]],["u32"]]],[5,"_mm_clflush","","Invalidate and flush the cache line that contains `p` from all levels of the cache hierarchy.",N,N],[5,"_mm_avg_pu8","","Computes the rounded averages of the packed unsigned 8-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",N,[[["u32"]],["u32"]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp counter and the `IA32_TSC_AUX MSR`.",N,N],[5,"_mm_xor_si128","","Compute the bitwise XOR of 128 bits (representing integer data) in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values contained in 2 packed 128-bit vectors of `[4 x i32]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_stream_pi","","Store 64-bits of integer data from a into memory using a non-temporal memory hint.",N,N],[5,"_mm_comigt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_set_pd","","Set packed double-precision (64-bit) floating-point elements in returned vector with the supplied values.",N,[[["f64"],["f64"],["f64"],["f64"]],["__m256d"]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point element in `b` down to an integer value, store the result as a double-precision floating-point element in the lower element of the intrinsic result, and copy the upper element from `a` to the upper element of the intrinsic result.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_min_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return packed minimum.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_adds_pu8","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_set1_pi32","","Broadcast 32-bit integer a to all all elements of dst.",N,[[["i32"]],["__m64"]]],[5,"_mm256_setr_epi8","","Set packed 8-bit integers in returned vector with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m256i"]]],[5,"_mm256_testnzc_ps","","Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m256"],["__m256"]],["i32"]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_broadcastb_epi8","","Broadcast the low packed 8-bit integer from `a` to all elements of the 128-bit returned value.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_mask_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_cvtsi64_sd","","Return `a` with its lower element replaced by `b` after converting it to an `f64`.",N,[[["__m128d"],["i64"]],["__m128d"]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed vectors of 4 64-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in even locations, while sums of elements from `b` are returned in odd locations.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_maddubs_pi16","","Multiplies corresponding pairs of packed 8-bit unsigned integer values contained in the first source operand and packed 8-bit signed integer values contained in the second source operand, adds pairs of contiguous products with signed saturation, and writes the 16-bit sums to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpeq_sd","","Return a new vector with the low element of `a` replaced by the equality comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_epi16","","Compare packed 16-bit integers in `a` and `b` for equality.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_pext_u32","","Gathers the bits of `x` specified by the `mask` into the contiguous low order bit positions of the result.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm_sign_epi16","","Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and return the results. Elements in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_testnzc_pd","","Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m256d"],["__m256d"]],["i32"]]],[5,"_xsaves","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`",N,N],[5,"_mm256_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",N,N],[5,"_mm_insert_epi8","","Return a copy of `a` with the 8-bit integer from `i` inserted at a location specified by `imm8`.",N,[[["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm_cvtpi32x2_ps","","Converts the two 32-bit signed integer values from each 64-bit vector operand of `[2 x i32]` into a 128-bit vector of `[4 x float]`.",N,[[["__m64"],["__m64"]],["__m128"]]],[5,"_mm256_sllv_epi32","","Shift packed 32-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi64","","Add packed 64-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of `[2 x double]`. The lower 64 bits are set to the lower 64 bits of the second parameter. The upper 64 bits are set to the upper 64 bits of the first parameter.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m256"]],["__m256i"]]],[5,"_mm_sll_epi64","","Shift packed 64-bit integers in `a` left by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",N,N],[5,"_mm256_sign_epi8","","Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and return the results. Results are zeroed out when the corresponding element in `b` is zero.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",N,[[["__m256i"]],["__m256"]]],[5,"_mm256_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_unpacklo_pd","","The resulting `__m128d` element is composed by the high-order values of the two `__m128d` interleaved input elements, i.e.:",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_sqrt_pd","","Return the square root of packed double-precision (64-bit) floating point elements in `a`.",N,[[["__m256d"]],["__m256d"]]],[17,"_MM_MASK_OVERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in `a` to 32-bit integers. The upper eight elements of `a` are unused.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_storeu_ps","","Store four 32-bit floats into memory. There are no restrictions on memory alignment. For aligned memory `_mm_store_ps` may be faster.",N,N],[5,"_m_maskmovq","","Conditionally copies the values from each 8-bit element in the first 64-bit integer vector operand to the specified memory location, as specified by the most significant bit in the corresponding element in the second 64-bit integer vector operand.",N,N],[5,"_mm_fmsub_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and subtract the lower element in `c` from the intermediate result. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtss_si64","","Convert the lowest 32 bit float in the input vector to a 64 bit integer.",N,[[["__m128"]],["i64"]]],[5,"_mm_xor_pd","","Compute the bitwise OR of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point elements in `a` down to an integer value, and store the results as packed single-precision floating-point elements.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_extractf128_pd","","Extract 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a`, selected with `imm8`.",N,[[["__m256d"],["i32"]],["__m128d"]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of `x` and clears all bits above that bit.",N,[[["u64"]],["u64"]]],[5,"_m_pavgb","","Computes the rounded averages of the packed unsigned 8-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_cmpneq_sd","","Return a new vector with the low element of `a` replaced by the not-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_popcnt64","","Counts the bits that are set.",N,[[["i64"]],["i32"]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_slli_si128","","Shift `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_sad_epu8","","Compute the absolute differences of packed unsigned 8-bit integers in `a` and `b`, then horizontally sum each consecutive 8 differences to produce four unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of the 64-bit return value",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_unpackhi_pi8","","Unpacks the upper four elements from two `i8x8` vectors and interleaves them into the result: `[a.4, b.4, a.5, b.5, a.6, b.6, a.7, b.7]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_pi16","","Horizontally subtracts the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_setzero_ps","","Return vector of type __m256 with all elements set to zero.",N,[[],["__m256"]]],[5,"_mm_or_pd","","Compute the bitwise OR of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_broadcastss_ps","","Broadcast the low single-precision (32-bit) floating-point element from `a` to all elements of the 256-bit returned value.",N,[[["__m128"]],["__m256"]]],[17,"_CMP_UNORD_S","","Unordered (signaling)",N,N],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit integers.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_packus_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using unsigned saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_insert_epi64","","Return a copy of `a` with the 64-bit integer from `i` inserted at a location specified by `imm8`.",N,[[["__m128i"],["i64"],["i32"]],["__m128i"]]],[5,"_mm256_loadu_si256","","Load 256-bits of integer data from memory into result. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_m_paddb","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmplt_epi32","","Compare packed 32-bit integers in `a` and `b` for less-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpunord_ss","","Check if the lowest `f32` of both inputs are unordered. The lowest 32 bits of the result will be `0xffffffff` if any of `a.extract(0)` or `b.extract(0)` is a NaN, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_div_sd","","Return a new vector with the low element of `a` replaced by the result of diving the lower element of `a` by the lower element of `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_insert_epi16","","Copy `a` to result, and insert the 16-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i16"],["i32"]],["__m256i"]]],[5,"_mm_set_epi32","","Set packed 32-bit integers with the supplied values.",N,[[["i32"],["i32"],["i32"],["i32"]],["__m128i"]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store the result in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u32"]],["i32"]]],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",N,N],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",N,N],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point element in `b` using the `rounding` parameter, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copy the upper 3 packed elements from `a` to the upper elements of the instrinsic result. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm_cmpnlt_ss","","Compare the lowest `f32` of both inputs for not-less-than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not less than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`. Positive differences greater than 7FFFh are saturated to 7FFFh. Negative differences less than 8000h are saturated to 8000h.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_aesdec_si128","","Perform one round of an AES decryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_add_epi32","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvttsd_si64","","Convert the lower double-precision (64-bit) floating-point element in `a` to a 64-bit integer with truncation.",N,[[["__m128d"]],["i64"]]],[5,"_mm_adds_epi16","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_movemask_epi8","","Create mask from the most significant bit of each 8-bit element in `a`, return the result.",N,[[["__m256i"]],["i32"]]],[5,"_bswap","","Return an integer with the reversed byte order of x",N,[[["i32"]],["i32"]]],[5,"_tzcnt_u64","","Counts the number of trailing least significant zero bits.",N,[[["u64"]],["u64"]]],[5,"_mm_cvtss_f32","","Extract the lowest 32 bit float from the input vector.",N,[[["__m128"]],["f32"]]],[5,"_blsmsk_u32","","Get mask up to lowest set bit.",N,[[["u32"]],["u32"]]],[5,"_mm_hadd_epi16","","Horizontally add the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_xsavec64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm256_lddqu_si256","","Load 256-bits of integer data from unaligned memory into result. This intrinsic may perform better than `_mm256_loadu_si256` when the data crosses a cache line boundary.",N,N],[5,"_mm_cmpnle_pd","","Compare corresponding elements in `a` and `b` for not-less-than-or-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",N,[[["__m256d"]],["__m256"]]],[5,"_MM_GET_EXCEPTION_MASK","","See `_mm_setcsr`",N,[[],["u32"]]],[17,"_SIDD_MOST_SIGNIFICANT","","Index only: return the most significant bit",N,N],[5,"_mm_loadr_ps","","Load four `f32` values from aligned memory into a `__m128` in reverse order.",N,N],[17,"_MM_FROUND_TO_NEG_INF","","round down",N,N],[5,"_mm256_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit lanes of `a` using the control in `imm8`. The high 64 bits of 128-bit lanes of `a` are copied to the output.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permutevar8x32_ps","","Shuffle eight 32-bit foating-point elements in `a` across lanes using the corresponding 32-bit integer index in `idx`.",N,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_mm_load_ss","","Construct a `__m128` with the lowest element read from `p` and the other elements set to zero.",N,N],[5,"_mm_set_sd","","Copy double-precision (64-bit) floating-point element `a` to the lower element of the packed 64-bit return value.",N,[[["f64"]],["__m128d"]]],[17,"_MM_MASK_DIV_ZERO","","See `_mm_setcsr`",N,N],[5,"_mm256_max_epi8","","Compare packed 8-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmpnge_ss","","Compare the lowest `f32` of both inputs for not-greater-than-or-equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not greater than or equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_sha1msg1_epu32","","Perform an intermediate calculation for the next four SHA1 message values (unsigned 32-bit integers) using previous message values from `a` and `b`, and returning the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_div_ss","","Divides the first component of `b` by `a`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit __m128i vector, returning a vector containing its value in its first position, and its index in its second position; all other elements are set to zero.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_pi32","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpestrm","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return the generated mask.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm256_min_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_testz_ps","","Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m256"],["__m256"]],["i32"]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer vector are neither all zeros nor all ones.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm_srav_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in sign bits.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_store_ps","","Store four 32-bit floats into aligned memory.",N,N],[5,"_mm256_mask_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_insert_epi32","","Copy `a` to result, and insert the 32-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i32"],["i32"]],["__m256i"]]],[5,"_mm256_bsrli_epi128","","Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in `a` and `b`, producing intermediate 32-bit integers and returning the high 16 bits of the intermediate integers.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in `a`.",N,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm_ucomilt_sd","","Compare the lower element of `a` and `b` for less-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_pdep_u32","","Scatter contiguous low order bits of `a` to the result at the positions specified by the `mask`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of `[2 x double]` into a 128-bit integer vector.",N,[[["__m128d"]],["__m128i"]]],[5,"_mm256_broadcast_sd","","Broadcast a double-precision (64-bit) floating-point element from memory to all elements of the returned vector.",N,[[["f64"]],["__m256d"]]],[5,"_mm_add_pi16","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_sign_epi8","","Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and return the result. Elements in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvttsd_si64x","","Alias for `_mm_cvttsd_si64`",N,[[["__m128d"]],["i64"]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point elements in `a` up to an integer value, and store the results as packed single-precision floating-point elements.",N,[[["__m128"]],["__m128"]]],[17,"_MM_HINT_T0","","See `_mm_prefetch`.",N,N],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_srli_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_zeroall","","Zero the contents of all XMM or YMM registers.",N,N],[5,"_blsfill_u32","","Sets all bits of `x` below the least significant one.",N,[[["u32"]],["u32"]]],[5,"_mm256_srli_si256","","Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cvtps_pi16","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 16-bit integers.",N,[[["__m128"]],["__m64"]]],[5,"_mm_cmpgt_pi16","","Compares whether each element of `a` is greater than the corresponding element of `b` returning `0` for `false` and `-1` for `true`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_ucomige_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than or equal to the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`",N,[[["__m128i"],["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvttps_pi32","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128"]],["__m64"]]],[5,"_mm_min_pu8","","Compares the packed 8-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_crc32_u16","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 16-bit integer `v`.",N,[[["u32"],["u16"]],["u32"]]],[5,"_mm_cmpngt_pd","","Compare corresponding elements in `a` and `b` for not-greater-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",N,[[["__m256"]],["__m256d"]]],[5,"_mm256_maskload_pd","","Load packed double-precision (64-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_MM_SET_ROUNDING_MODE","","See `_mm_setcsr`",N,N],[5,"_mm_clmulepi64_si128","","Perform a carry-less multiplication of two 64-bit polynomials over the finite field GF(2^k).",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cmpeq_pd","","Compare corresponding elements in `a` and `b` for equality.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_set_epi64x","","Set packed 64-bit integers in returned vector with the supplied values.",N,[[["i64"],["i64"],["i64"],["i64"]],["__m256i"]]],[5,"_mm_maskstore_epi32","","Store packed 32-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_mask_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_bslli_si128","","Shift `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_setr_epi64","","Constructs a 128-bit integer vector, initialized in reverse order with the specified 64-bit integral values.",N,[[["__m64"],["__m64"]],["__m128i"]]],[5,"_mm_set_pi8","","Set packed 8-bit integers in dst with the supplied values.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m64"]]],[5,"_mm256_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_mul_ps","","Add packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_mask_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_mullo_pi16","","Multiplies packed 16-bit integer values and writes the low-order 16 bits of each 32-bit product to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_getcsr","","Get the unsigned 32-bit value of the MXCSR control and status register.",N,[[],["u32"]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) floating-point elements from `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in `a` to packed 16-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_testnzc_pd","","Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer vector are all zeros.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_store1_ps","","Store the lowest 32 bit float of `a` repeated four times into aligned memory.",N,N],[5,"_mm_set_epi64x","","Set packed 64-bit integers with the supplied values, from highest to lowest.",N,[[["i64"],["i64"]],["__m128i"]]],[5,"_mm256_andnot_ps","","Compute the bitwise NOT of packed single-precision (32-bit) floating-point elements in `a` and then AND with `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_srav_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in sign bits.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_and_pd","","Compute the bitwise AND of packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm256_packs_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_setzero_si256","","Return vector of type __m256i with all elements set to zero.",N,[[],["__m256i"]]],[5,"_mm_cmplt_epi8","","Compare packed 8-bit integers in `a` and `b` for less-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_broadcast_ss","","Broadcast a single-precision (32-bit) floating-point element from memory to all elements of the returned vector.",N,[[["f32"]],["__m256"]]],[5,"_mm_srlv_epi64","","Shift packed 64-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `mask`",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_ucomile_sd","","Compare the lower element of `a` and `b` for less-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_set1_ps","","Construct a `__m128` with all element set to `a`.",N,[[["f32"]],["__m128"]]],[5,"_mm_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of `a` using the control in `imm8`.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_add_pd","","Add packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_cvtpi8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_mm_hsub_pi32","","Horizontally subtracts the adjacent pairs of values contained in 2 packed 64-bit vectors of `[2 x i32]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hadd_pd","","Horizontally add adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_blsi_u64","","Extract lowest set isolated bit.",N,[[["u64"]],["u64"]]],[5,"_mm_packs_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_setr_pi8","","Set packed 8-bit integers in dst with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m64"]]],[17,"_MM_HINT_T1","","See `_mm_prefetch`.",N,N],[5,"_mm256_cmpgt_epi8","","Compare packed 8-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_blsfill_u64","","Sets all bits of `x` below the least significant one.",N,[[["u64"]],["u64"]]],[5,"_mm256_cmp_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_sqrt_ss","","Return the square root of the first single-precision (32-bit) floating-point element in `a`, the other elements are unchanged.",N,[[["__m128"]],["__m128"]]],[5,"_mm_unpackhi_pi16","","Unpacks the upper two elements from two `i16x4` vectors and interleaves them into the result: `[a.2, b.2, a.3, b.3]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_MM_MASK_UNDERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm256_broadcastb_epi8","","Broadcast the low packed 8-bit integer from `a` to all elements of the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_xrstors64","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_set_pd1","","Broadcast double-precision (64-bit) floating-point value a to all elements of the return value.",N,[[["f64"]],["__m128d"]]],[5,"_mm256_setr_m128","","Set packed __m256 returned vector with the supplied values.",N,[[["__m128"],["__m128"]],["__m256"]]],[5,"_m_pminub","","Compares the packed 8-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_addsub_pd","","Alternatively add and subtract packed double-precision (64-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[3,"__m256i","","256-bit wide integer vector type, x86-specific",N,N],[5,"_mm256_inserti128_si256","","Copy `a` to `dst`, then insert 128 bits (of integer data) from `b` at the location specified by `imm8`.",N,[[["__m256i"],["__m128i"],["i32"]],["__m256i"]]],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",N,N],[5,"_mm_cvtsi32_si128","","Return a vector whose lowest element is `a` and all higher elements are `0`.",N,[[["i32"]],["__m128i"]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper 128 bits of the result are undefined.",N,[[["__m128d"]],["__m256d"]]],[5,"_mm_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_set1_pi16","","Broadcast 16-bit integer a to all all elements of dst.",N,[[["i16"]],["__m64"]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of `[8 x float]` from a 128-bit floating-point vector of `[4 x float]`. The lower 128 bits contain the value of the source vector. The upper 128 bits are set to zero.",N,[[["__m128"]],["__m256"]]],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",N,N],[5,"_mm_min_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_andnot_pd","","Compute the bitwise NOT of `a` and then AND with `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_setzero_pd","","Return vector of type __m256d with all elements set to zero.",N,[[],["__m256d"]]],[5,"_mm_cmpgt_epi16","","Compare packed 16-bit integers in `a` and `b` for greater-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_max_epi32","","Compare packed 32-bit integers in `a` and `b`, and return packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_ORD_S","","Ordered (signaling)",N,N],[5,"_mm_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_broadcast_ss","","Broadcast a single-precision (32-bit) floating-point element from memory to all elements of the returned vector.",N,[[["f32"]],["__m128"]]],[5,"_mm_cmpistra","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return `1` if `b` did not contain a null character and the resulting mask was zero, and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm256_min_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_min_sd","","Return a new vector with the low element of `a` replaced by the minimum of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_hadd_pi32","","Horizontally add the adjacent pairs of values contained in 2 packed 64-bit vectors of `[2 x i32]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hadd_epi32","","Horizontally add the adjacent pairs of values contained in 2 packed 128-bit vectors of `[4 x i32]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_maskstore_epi64","","Store packed 64-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_cmple_pd","","Compare corresponding elements in `a` and `b` for less-than-or-equal",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit integers, and store the results in dst.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_add_pd","","Add packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtsd_si64x","","Alias for `_mm_cvtsd_si64`",N,[[["__m128d"]],["i64"]]],[5,"_mm256_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit) floating-point elements from \"a\", and return the results.",N,[[["__m256d"]],["__m256d"]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of `[4 x float]` into a 128-bit floating-point vector of `[2 x double]`.",N,[[["__m128"]],["__m128d"]]],[3,"CpuidResult","","Result of the `cpuid` instruction.",N,N],[12,"eax","","EAX register.",117,N],[12,"ebx","","EBX register.",117,N],[12,"ecx","","ECX register.",117,N],[12,"edx","","EDX register.",117,N],[5,"_MM_SET_EXCEPTION_STATE","","See `_mm_setcsr`",N,N],[5,"_mm_setzero_si64","","Constructs a 64-bit integer vector initialized to zero.",N,[[],["__m64"]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in `a`.",N,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadd_epi16","","Horizontally add adjacent pairs of 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of `[2 x double]` to a memory location.",N,N],[5,"_mm_tzcnt_64","","Counts the number of trailing least significant zero bits.",N,[[["u64"]],["i64"]]],[5,"_mm256_max_epi32","","Compare packed 32-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_MASK_INVALID","","See `_mm_setcsr`",N,N],[5,"_mm_slli_epi32","","Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_sll_epi32","","Shift packed 32-bit integers in `a` left by `count` while shifting in zeros, and return the result",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from `a` into memory using `mask`.",N,N],[5,"_mm_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_srlv_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_undefined_pd","","Return vector of type `__m256d` with undefined elements.",N,[[],["__m256d"]]],[5,"_mm_comieq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_set1_epi32","","Broadcast 32-bit integer `a` to all elements.",N,[[["i32"]],["__m128i"]]],[5,"_mm_movemask_ps","","Return a mask of the most significant bit of each element in `a`.",N,[[["__m128"]],["i32"]]],[3,"__m256","","256-bit wide set of eight `f32` types, x86-specific",N,N],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in `a` and `b` into a 32-byte temporary result, shift the result right by `n` bytes, and return the low 16 bytes.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_maskload_epi64","","Load packed 64-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm256_mask_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_max_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_set_epi64","","Initializes both 64-bit values in a 128-bit vector of `[2 x i64]` with the specified 64-bit integer values.",N,[[["__m64"],["__m64"]],["__m128i"]]],[5,"_mm_cmpestrz","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if any character in `b` was null, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in `a`.",N,[[["__m256i"]],["__m256i"]]],[5,"_mm256_and_pd","","Compute the bitwise AND of a packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_abs_epi8","","Compute the absolute value of packed 8-bit signed integers in `a` and return the unsigned results.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128d"]],["__m128i"]]],[5,"_mm256_insert_epi8","","Copy `a` to result, and insert the 8-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i8"],["i32"]],["__m256i"]]],[5,"_mm_cmpgt_pi32","","Compares whether each element of `a` is greater than the corresponding element of `b` returning `0` for `false` and `-1` for `true`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_comige_sd","","Compare the lower element of `a` and `b` for greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_set_ss","","Construct a `__m128` with the lowest element set to `a` and the rest set to zero.",N,[[["f32"]],["__m128"]]],[5,"__get_cpuid_max","","Returns the highest-supported `leaf` (`EAX`) and sub-leaf (`ECX`) `cpuid` values.",N,N],[5,"_mm_movepi64_pi64","","Returns the lower 64 bits of a 128-bit integer vector as a 64-bit integer.",N,[[["__m128i"]],["__m64"]]],[5,"_mm256_permute2f128_si256","","Shuffle 258-bits (composed of integer data) selected by `imm8` from `a` and `b`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_aesimc_si128","","Perform the `InvMixColumns` transformation on `a`.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of `[2 x double]` into a 128-bit floating-point vector of `[4 x float]`.",N,[[["__m128d"]],["__m128"]]],[5,"_mm_cmpgt_sd","","Return a new vector with the low element of `a` replaced by the greater-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_srli_si128","","Shift `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_extractf128_ps","","Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `a`, selected with `imm8`.",N,[[["__m256"],["i32"]],["__m128"]]],[5,"_mm256_srai_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point element in `b` up to an integer value, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copy the upper 3 packed elements from `a` to the upper elements of the intrinsic result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_store_pd1","","Store the lower double-precision (64-bit) floating-point element from `a` into 2 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cvt_ps2pi","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128"]],["__m64"]]],[17,"_MM_EXCEPT_UNDERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",N,N],[5,"_mm_ucomilt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_cmpunord_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. Returns four floats that have one of two possible bit patterns. The element in the output vector will be `0xffffffff` if the input elements in `a` and `b` are unordered (i.e., at least on of them is a NaN), or 0 otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_pi16","","Unpacks the lower two elements from two `i16x4` vectors and interleaves them into the result: `[a.0 b.0 a.1 b.1]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_mask_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_cmpestri","","Compare packed strings `a` and `b` with lengths `la` and `lb` using the control in `imm8` and return the generated index. Similar to [`_mm_cmpistri`] with the exception that [`_mm_cmpistri`] implicitly determines the length of `a` and `b`.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of a 128-bit vector of `[2 x double]`. The high-order bits are copied from the high-order bits of the first operand.",N,N],[5,"_mm256_extractf128_si256","","Extract 128 bits (composed of integer data) from `a`, selected with `imm8`.",N,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_blcs_u32","","Sets the least significant zero bit of `x`.",N,[[["u32"]],["u32"]]],[5,"_xsaveopt","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm_set1_epi16","","Broadcast 16-bit integer `a` to all elements.",N,[[["i16"]],["__m128i"]]],[5,"_mm_alignr_pi8","","Concatenates the two 64-bit integer vector operands, and right-shifts the result by the number of bytes specified in the immediate operand.",N,[[["__m64"],["__m64"],["i32"]],["__m64"]]],[5,"_mm256_testc_ps","","Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m256"],["__m256"]],["i32"]]],[5,"_mm_set_pd","","Set packed double-precision (64-bit) floating-point elements in the return value with the supplied values.",N,[[["f64"],["f64"]],["__m128d"]]],[5,"_mm256_cvtepi32_pd","","Convert packed 32-bit integers in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128i"]],["__m256d"]]],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",N,N],[5,"_mm256_permute4x64_pd","","Shuffle 64-bit floating-point elements in `a` across lanes using the control in `imm8`.",N,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_set1_epi64","","Initializes both values in a 128-bit vector of `[2 x i64]` with the specified 64-bit value.",N,[[["__m64"]],["__m128i"]]],[5,"_mm_crc32_u8","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 8-bit integer `v`.",N,[[["u32"],["u8"]],["u32"]]],[5,"_mm_shuffle_ps","","Shuffle packed single-precision (32-bit) floating-point elements in `a` and `b` using `mask`.",N,[[["__m128"],["__m128"],["u32"]],["__m128"]]],[5,"_mm_add_sd","","Return a new vector with the low element of `a` replaced by the sum of the low elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm256_adds_epu16","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",N,N],[5,"_mm_add_epi64","","Add packed 64-bit integers in `a` and \"b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_broadcastss_ps","","Broadcast the low single-precision (32-bit) floating-point element from `a` to all elements of the 128-bit returned value.",N,[[["__m128"]],["__m128"]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_loadu2_m128","","Load two 128-bit values (composed of 4 packed single-precision (32-bit) floating-point elements) from memory, and combine them into a 256-bit value. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_mm_setr_pi16","","Set packed 16-bit integers in dst with the supplied values in reverse order.",N,[[["i16"],["i16"],["i16"],["i16"]],["__m64"]]],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",N,N],[5,"_mm_cmpneq_pd","","Compare corresponding elements in `a` and `b` for not-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_sfence","","Perform a serializing operation on all store-to-memory instructions that were issued prior to this instruction.",N,N],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using mask `imm4`",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_and_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_ucomieq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are equal, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_adds_epu8","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_srl_epi64","","Shift packed 64-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_m_pshufw","","Shuffles the 4 16-bit integers from a 64-bit integer vector to the destination, as specified by the immediate value operand.",N,[[["__m64"],["i32"]],["__m64"]]],[5,"_blsr_u64","","Resets the lowest set bit of `x`.",N,[[["u64"]],["u64"]]],[5,"_mm_sll_epi16","","Shift packed 16-bit integers in `a` left by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmp_ss","","Compare the lower single-precision (32-bit) floating-point element in `a` and `b` based on the comparison operand specified by `imm8`, store the result in the lower element of returned vector, and copy the upper 3 packed elements from `a` to the upper elements of returned vector.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_slli_si256","","Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cmpgt_pi8","","Compares whether each element of `a` is greater than the corresponding element of `b` returning `0` for `false` and `-1` for `true`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_xsaveopt64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_MM_GET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_mm256_cmpeq_epi8","","Compare packed 8-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_undefined_ps","","Return vector of type `__m256` with undefined elements.",N,[[],["__m256"]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_permute2x128_si256","","Shuffle 128-bits of integer data selected by `imm8` from `a` and `b`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_blsmsk_u64","","Get mask up to lowest set bit.",N,[[["u64"]],["u64"]]],[5,"_mm256_movemask_ps","","Set each bit of the returned mask based on the most significant bit of the corresponding packed single-precision (32-bit) floating-point element in `a`.",N,[[["__m256"]],["i32"]]],[5,"_mm_max_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return packed maximum.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel shuffle and permute intrinsics.",N,[[["u32"],["u32"],["u32"],["u32"]],["u32"]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision (32-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_packs_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmplt_epi16","","Compare packed 16-bit integers in `a` and `b` for less-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_movelh_ps","","Combine lower half of `a` and `b`. The lower half of `b` occupies the higher half of result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer vector are neither all zeros nor all ones.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm256_setr_m128d","","Set packed __m256d returned vector with the supplied values.",N,[[["__m128d"],["__m128d"]],["__m256d"]]],[5,"_mm256_storeu_ps","","Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm256_mul_epu32","","Multiply the low unsigned 32-bit integers from each packed 64-bit element in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store the result in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u16"]],["i32"]]],[5,"_mm_set_ps1","","Alias for `_mm_set1_ps`",N,[[["f32"]],["__m128"]]],[5,"_mm_subs_pu16","","Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cvtsd_f64","","Return the lower double-precision (64-bit) floating-point element of \"a\".",N,[[["__m128d"]],["f64"]]],[5,"_mm_movemask_pi8","","Takes the most significant bit from each 8-bit element in a 64-bit integer vector to create a 16-bit mask value. Zero-extends the value to 32-bit integer and writes it to the destination.",N,[[["__m64"]],["i32"]]],[5,"_mm_cvt_ss2si","","Alias for `_mm_cvtss_si32`.",N,[[["__m128"]],["i32"]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_sllv_epi64","","Shift packed 64-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvtpi32_ps","","Converts two elements of a 64-bit vector of `[2 x i32]` into two floating point values and writes them to the lower 64-bits of the destination. The remaining higher order elements of the destination are copied from the corresponding elements in the first operand.",N,[[["__m128"],["__m64"]],["__m128"]]],[5,"_mm_cmpnge_sd","","Return a new vector with the low element of `a` replaced by the not-greater-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[17,"_MM_EXCEPT_DIV_ZERO","","See `_mm_setcsr`",N,N],[5,"_mm_maskstore_epi64","","Store packed 64-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see `vendor::_MM_SET_ROUNDING_MODE`",N,N],[5,"_mm_rsqrt_ps","","Return the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_sll_epi16","","Shift packed 16-bit integers in `a` left by `count` while shifting in zeros, and return the result",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm_maskstore_pd","","Store packed double-precision (64-bit) floating-point elements from `a` into memory using `mask`.",N,N],[5,"_mm256_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_pext_u64","","Gathers the bits of `x` specified by the `mask` into the contiguous low order bit positions of the result.",N,[[["u64"],["u64"]],["u64"]]],[17,"_MM_FLUSH_ZERO_ON","","See `_mm_setcsr`",N,N],[14,"unreachable","argmin::prelude::failure::_core","A utility macro for indicating unreachable code.",N,N],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",N,N],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",N,N],[14,"panic","","Entry point of thread panic, for details, see std::macros",N,N],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",N,N],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",N,N],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",N,N],[8,"AsFail","argmin::prelude::failure","The `AsFail` trait",N,N],[10,"as_fail","","Converts a reference to `Self` into a dynamic trait object of `Fail`.",118,[[["self"]],["fail"]]],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",119,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",119,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",119,[[["self"],["f"]],["result",["context"]]]],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[14,"bail","","Exits a function early with an `Error`.",N,N],[3,"Context","","An error with context around it.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Backtrace","","A `Backtrace`.",N,N],[8,"ArgminSub","argmin::prelude","Subtract a `T` from `self`",N,N],[10,"sub","","Subtract a `T` from `self`",120,[[["self"],["t"]],["self"]]],[8,"ArgminDot","","Dot/scalar product of `T` and `self`",N,N],[10,"dot","","Dot/scalar product of `T` and `self`",121,[[["self"],["t"]],["u"]]],[8,"ArgminWeightedDot","","Dot/scalar product of `T` and `self` weighted by W (p^TWv)",N,N],[10,"weighted_dot","","Dot/scalar product of `T` and `self`",122,[[["self"],["v"],["t"]],["u"]]],[8,"ArgminMul","","",N,N],[10,"amul","","",123,[[["self"],["t"]],["u"]]],[14,"box_clone","","Implements the `box_clone` method of the `ArgminOperator` trait in order to be able to clone a `Box<ArgminOperator>`.",N,N],[8,"ArgminScaledAdd","","Add a `T` scaled by an `U` to `self`",N,N],[10,"scaled_add","","Add a `T` scaled by an `U` to `self`",124,[[["self"],["u"],["t"]],["self"]]],[3,"WriteToFile","","",N,N],[8,"ArgminInv","","Compute the inverse (`T`) of `self`",N,N],[10,"ainv","","",125,[[["self"]],["result",["error"]]]],[0,"solver","argmin","solvers",N,N],[0,"conjugategradient","argmin::solver","Argmin Trust Conjugate Gradient methods",N,N],[0,"cg","argmin::solver::conjugategradient","Conjugate gradient method # Conjugate Gradient Method",N,N],[3,"ConjugateGradient","argmin::solver::conjugategradient::cg","Conjugate Gradient struct",N,N],[11,"new","","Constructor",126,[[["box",["argminoperator"]],["t"],["t"]],["result",["error"]]]],[11,"p","","Return the current search direction (This is needed by NewtonCG for instance)",126,[[["self"]],["t"]]],[11,"p_prev","","Return the previous search direction (This is needed by NewtonCG for instance)",126,[[["self"]],["t"]]],[11,"residual","","Return the current residual (This is needed by NewtonCG for instance)",126,[[["self"]],["t"]]],[0,"nonlinear_cg","argmin::solver::conjugategradient","Nonlinear Conjugate gradient method # Nonlinear Conjugate Gradient Method",N,N],[3,"NonlinearConjugateGradient","argmin::solver::conjugategradient::nonlinear_cg","Nonlinear Conjugate Gradient struct",N,N],[11,"new","","Constructor (Polak Ribiere Conjugate Gradient (PR-CG))",127,[[["box",["argminoperator"]],["t"]],["result",["error"]]]],[11,"new_pr","","New PolakRibiere CG (PR-CG)",127,[[["box",["argminoperator"]],["t"]],["result",["error"]]]],[11,"new_prplus","","New PolakRibierePlus CG (PR+-CG)",127,[[["box",["argminoperator"]],["t"]],["result",["error"]]]],[11,"new_fr","","New FletcherReeves CG (FR-CG)",127,[[["box",["argminoperator"]],["t"]],["result",["error"]]]],[11,"new_hs","","New HestenesStiefel CG (HS-CG)",127,[[["box",["argminoperator"]],["t"]],["result",["error"]]]],[11,"set_linesearch","","Specify line search method",127,[[["self"],["box",["argminlinesearch"]]],["self"]]],[11,"set_beta_update","","Specify beta update method",127,[[["self"],["box",["argminnlcgbetaupdate"]]],["self"]]],[11,"set_restart_iters","","Specifiy the number of iterations after which a restart should be performed",127,[[["self"],["u64"]],["self"]]],[11,"set_restart_orthogonality","","Set the value for the orthogonality measure",127,[[["self"],["f64"]],["self"]]],[0,"beta","argmin::solver::conjugategradient","Beta update methods for nonlinear CG # Beta update methods",N,N],[3,"FletcherReeves","argmin::solver::conjugategradient::beta","Fletcher and Reeves (FR) method TODO: Reference",N,N],[3,"PolakRibiere","","Polak and Ribiere (PR) method TODO: Reference",N,N],[3,"PolakRibierePlus","","Polak and Ribiere Plus (PR+) method TODO: Reference",N,N],[3,"HestenesStiefel","","Hestenes and Stiefel (HS) method TODO: Reference",N,N],[11,"new","","Constructor",128,[[],["self"]]],[11,"new","","Constructor",129,[[],["self"]]],[11,"new","","Constructor",130,[[],["self"]]],[11,"new","","Constructor",131,[[],["self"]]],[0,"gradientdescent","argmin::solver","Argmin Gradient Descent",N,N],[0,"steepestdescent","argmin::solver::gradientdescent","Argmin Steepest Descent",N,N],[3,"SteepestDescent","argmin::solver::gradientdescent::steepestdescent","Steepest Descent solver",N,N],[11,"new","","Constructor",132,[[["box",["argminoperator"]],["t"]],["result",["error"]]]],[11,"set_linesearch","","Specify line search method",132,[[["self"],["box",["argminlinesearch"]]],["self"]]],[0,"landweber","argmin::solver","Landweber iteration",N,N],[3,"Landweber","argmin::solver::landweber","Landweber iteration",N,N],[11,"new","","Constructor",133,[[["box",["argminoperator"]],["f64"],["t"]],["result",["error"]]]],[0,"linesearch","argmin::solver","Argmin Line search methods",N,N],[0,"backtracking","argmin::solver::linesearch","backtracking algorithm # Line search methods",N,N],[3,"BacktrackingLineSearch","argmin::solver::linesearch::backtracking","Backtracking Line Search",N,N],[11,"new","","Constructor",134,[[["box",["argminoperator"]]],["self"]]],[11,"set_cur_grad","","set current gradient value",134,[[["self"],["t"]],["self"]]],[11,"set_rho","","Set rho",134,[[["self"],["f64"]],["result",["error"]]]],[11,"set_condition","","Set condition",134,[[["self"],["box",["linesearchcondition"]]],["self"]]],[0,"condition","argmin::solver::linesearch","acceptance conditions # References:",N,N],[3,"ArmijoCondition","argmin::solver::linesearch::condition","Armijo Condition",N,N],[3,"WolfeCondition","","Wolfe Condition",N,N],[3,"StrongWolfeCondition","","Strong Wolfe conditions",N,N],[3,"GoldsteinCondition","","Goldstein conditions",N,N],[8,"LineSearchCondition","","Needs to be implemented by everything that wants to be a LineSearchCondition",N,N],[10,"eval","","Evaluate the condition",135,[[["self"],["f64"],["t"],["f64"],["t"],["t"],["f64"]],["bool"]]],[10,"requires_cur_grad","","Indicates whether this condition requires the computation of the gradient at the new point",135,[[["self"]],["bool"]]],[11,"new","","Constructor",136,[[["f64"]],["result",["error"]]]],[11,"new","","Constructor",137,[[["f64"],["f64"]],["result",["error"]]]],[11,"new","","Constructor",138,[[["f64"],["f64"]],["result",["error"]]]],[11,"new","","Constructor",139,[[["f64"]],["result",["error"]]]],[0,"hagerzhang","argmin::solver::linesearch","Hager-Zhang line search algorithm # Hager-Zang line search algorithm",N,N],[3,"HagerZhangLineSearch","argmin::solver::linesearch::hagerzhang","Hager-Zhang Line Search",N,N],[11,"new","","Constructor",140,[[["box",["argminoperator"]]],["self"]]],[11,"set_cur_grad","","set current gradient value",140,[[["self"],["t"]],["self"]]],[11,"set_delta","","set delta",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_sigma","","set sigma",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_epsilon","","set epsilon",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_theta","","set theta",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_gamma","","set gamma",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_eta","","set eta",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_alpha_min_max","","set alpha limits",140,[[["self"],["f64"],["f64"]],["result",["error"]]]],[0,"morethuente","argmin::solver::linesearch","More-Thuente line search algorithm # More-Thuente line search algorithm",N,N],[3,"MoreThuenteLineSearch","argmin::solver::linesearch::morethuente","More-Thuente Line Search",N,N],[11,"new","","Constructor",141,[[["box",["argminoperator"]]],["self"]]],[11,"set_cur_grad","","set current gradient value",141,[[["self"],["t"]],["self"]]],[11,"set_c","","Set c1 and c2 where 0 < c1 < c2 < 1.",141,[[["self"],["f64"],["f64"]],["result",["error"]]]],[11,"set_alpha_min_max","","set alpha limits",141,[[["self"],["f64"],["f64"]],["result",["error"]]]],[0,"newton","argmin::solver","Newton's Method",N,N],[0,"newton","argmin::solver::newton","Newton's method # Newton's method",N,N],[3,"Newton","argmin::solver::newton::newton","Newton's Method",N,N],[11,"new","","Constructor",142,[[["box",["argminoperator"]],["t"]],["self"]]],[11,"set_gamma","","set gamma",142,[[["self"],["f64"]],["result",["error"]]]],[0,"newton_cg","argmin::solver::newton","Newton-CG method # Newton-CG method",N,N],[3,"NewtonCG","argmin::solver::newton::newton_cg","Newton-CG Method",N,N],[11,"new","","Constructor",143,[[["box",["argminoperator"]],["t"]],["self"]]],[11,"set_linesearch","","Specify line search method",143,[[["self"],["box",["argminlinesearch"]]],["self"]]],[0,"simulatedannealing","argmin::solver","Simulated Annealing",N,N],[3,"SimulatedAnnealing","argmin::solver::simulatedannealing","Simulated Annealing struct",N,N],[4,"SATempFunc","","Definition of built-in temperature functions for Simulated Annealing.",N,N],[13,"TemperatureFast","","`t_i = t_init / i`",144,N],[13,"Boltzmann","","`t_i = t_init / ln(i)`",144,N],[13,"Exponential","","`t_i = t_init * x^i`",144,N],[13,"Custom","","User-provided temperature function. The first parameter must be the current temperature and the second parameter must be the iteration number.",144,N],[11,"new","","Constructor",145,[[["box",["argminoperator"]],["t"],["f64"]],["result",["error"]]]],[11,"temp_func","","Set temperature function to one of the options in `SATempFunc`.",145,[[["self"],["satempfunc"]],["self"]]],[11,"stall_accepted","","The optimization stops after there has been no accepted solution after `iter` iterations",145,[[["self"],["u64"]],["self"]]],[11,"stall_best","","The optimization stops after there has been no new best solution after `iter` iterations",145,[[["self"],["u64"]],["self"]]],[11,"reannealing_fixed","","Start reannealing after `iter` iterations",145,[[["self"],["u64"]],["self"]]],[11,"reannealing_accepted","","Start reannealing after no accepted solution has been found for `iter` iterations",145,[[["self"],["u64"]],["self"]]],[11,"reannealing_best","","Start reannealing after no new best solution has been found for `iter` iterations",145,[[["self"],["u64"]],["self"]]],[0,"trustregion","argmin::solver","Argmin Trust region methods",N,N],[5,"reduction_ratio","argmin::solver::trustregion","Computes reduction ratio",N,[[["f64"],["f64"],["f64"],["f64"]],["f64"]]],[0,"cauchypoint","","Cauchy Point # Cauchy point",N,N],[3,"CauchyPoint","argmin::solver::trustregion::cauchypoint","Cauchy Point",N,N],[11,"new","","Constructor",146,[[["box",["argminoperator"]]],["self"]]],[0,"dogleg","argmin::solver::trustregion","Dogleg method # Dogleg method",N,N],[3,"Dogleg","argmin::solver::trustregion::dogleg","Dogleg method",N,N],[11,"new","","Constructor",147,[[["box",["argminoperator"]]],["self"]]],[0,"steihaug","argmin::solver::trustregion","Steihaug method # Steihaug method",N,N],[3,"Steihaug","argmin::solver::trustregion::steihaug","Steihaug method",N,N],[11,"new","","Constructor",148,[[["box",["argminoperator"]]],["self"]]],[11,"set_epsilon","","Set epsilon",148,[[["self"],["f64"]],["result",["error"]]]],[0,"trustregion","argmin::solver::trustregion","Trust region solver # Trust region solver",N,N],[3,"TrustRegion","argmin::solver::trustregion::trustregion","Trust region solver",N,N],[11,"new","","Constructor",149,[[["box",["argminoperator"]],["t"]],["self"]]],[11,"set_radius","","set radius",149,[[["self"],["f64"]],["self"]]],[11,"set_max_radius","","Set maximum radius",149,[[["self"],["f64"]],["self"]]],[11,"set_eta","","Set eta",149,[[["self"],["f64"]],["result",["error"]]]],[0,"testfunctions","argmin","testfunctions",N,N],[5,"mccorminck","argmin::testfunctions","McCorminck test function",N,N],[5,"himmelblau","","Himmelblau test function",N,N],[5,"sphere_derivative","","Derivative of sphere test function",N,N],[5,"schaffer_n2","","Schaffer test function No. 2",N,N],[5,"holder_table","","Holder table test function",N,N],[5,"rosenbrock_2d_hessian","","Hessian of 2D Rosenbrock function",N,N],[5,"rastrigin","","Rastrigin test function",N,N],[5,"rosenbrock_2d","","2D Rosenbrock test function",N,N],[5,"ackley","","Ackley test function",N,N],[5,"zero","","Zero test function",N,N],[5,"goldsteinprice","","Goldstein-Price test function",N,N],[5,"matyas","","Matyas test function",N,N],[5,"schaffer_n4","","Schaffer test function No. 4",N,N],[5,"booth","","Booth test function",N,N],[5,"eggholder","","Eggholder test function",N,N],[5,"picheny","","Picheny test function",N,N],[5,"rastrigin_a","","Rastrigin test function",N,N],[5,"levy_n13","","Levy test function No. 13",N,N],[5,"cross_in_tray","","Cross-in-tray test function",N,N],[5,"sphere","","Sphere test function",N,N],[5,"zero_derivative","","Derivative of zero test function",N,N],[5,"threehumpcamel","","Three-hump camel test function",N,N],[5,"styblinski_tang","","Styblinski-Tang test function",N,N],[5,"levy","","Levy test function",N,N],[5,"rosenbrock_2d_derivative","","Derivative of 2D Rosenbrock function",N,N],[5,"easom","","Easom test function",N,N],[5,"rosenbrock","","Multidimensional Rosenbrock test function",N,N],[5,"ackley_param","","Ackley test function",N,N],[5,"bukin_n6","","Bukin test function No. 6",N,N],[5,"beale","","Beale test function",N,N],[11,"into","argmin::prelude","",150,[[["self"]],["u"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"as_fail","","",9,[[["self"]],["fail"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_string","","",152,[[["self"]],["string"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"as_fail","","",152,[[["self"]],["fail"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure","",157,[[["self"]],["u"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into_iter","","",157,[[["self"]],["i"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_string","","",158,[[["self"]],["string"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"as_fail","","",158,[[["self"]],["fail"]]],[11,"into","argmin::prelude::failure::_core::num","",159,[[["self"]],["u"]]],[11,"to_string","","",159,[[["self"]],["string"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_string","","",160,[[["self"]],["string"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_string","","",161,[[["self"]],["string"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_string","","",162,[[["self"]],["string"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_string","","",163,[[["self"]],["string"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_string","","",164,[[["self"]],["string"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"rand","","",18,[[["r"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_string","","",165,[[["self"]],["string"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"as_fail","","",165,[[["self"]],["fail"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_string","","",166,[[["self"]],["string"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"as_fail","","",166,[[["self"]],["fail"]]],[11,"into","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"into_iter","","",26,[[["self"]],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"into_iter","","",27,[[["self"]],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"rand","","",27,[[["r"]],["t"]]],[11,"into","argmin::prelude::failure::_core::mem","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::ptr","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::marker","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::ops","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"into_iter","","",55,[[["self"]],["i"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"into_iter","","",174,[[["self"]],["i"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"into_iter","","",73,[[["self"]],["i"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::cmp","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::any","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::array","",176,[[["self"]],["u"]]],[11,"to_string","","",176,[[["self"]],["string"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"as_fail","","",176,[[["self"]],["fail"]]],[11,"into","argmin::prelude::failure::_core::ascii","",177,[[["self"]],["u"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into_iter","","",177,[[["self"]],["i"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::sync::atomic","",178,[[["self"]],["u"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::cell","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_string","","",192,[[["self"]],["string"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"as_fail","","",192,[[["self"]],["fail"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_string","","",193,[[["self"]],["string"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"as_fail","","",193,[[["self"]],["fail"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_string","","",194,[[["self"]],["string"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_string","","",195,[[["self"]],["string"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::char","",197,[[["self"]],["u"]]],[11,"to_string","","",197,[[["self"]],["string"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"into_iter","","",197,[[["self"]],["i"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_string","","",198,[[["self"]],["string"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"into_iter","","",198,[[["self"]],["i"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_string","","",199,[[["self"]],["string"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"into_iter","","",199,[[["self"]],["i"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_string","","",200,[[["self"]],["string"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"into_iter","","",200,[[["self"]],["i"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_string","","",201,[[["self"]],["string"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"into_iter","","",201,[[["self"]],["i"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_string","","",202,[[["self"]],["string"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"as_fail","","",202,[[["self"]],["fail"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_string","","",203,[[["self"]],["string"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"as_fail","","",203,[[["self"]],["fail"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_string","","",204,[[["self"]],["string"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"as_fail","","",204,[[["self"]],["fail"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"into_iter","","",205,[[["self"]],["i"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::panic","",206,[[["self"]],["u"]]],[11,"to_string","","",206,[[["self"]],["string"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_string","","",207,[[["self"]],["string"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::pin","",208,[[["self"]],["u"]]],[11,"to_string","","",208,[[["self"]],["string"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::iter","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"into_iter","","",209,[[["self"]],["i"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"into_iter","","",210,[[["self"]],["i"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"into_iter","","",211,[[["self"]],["i"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"into_iter","","",212,[[["self"]],["i"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"into_iter","","",213,[[["self"]],["i"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"into_iter","","",214,[[["self"]],["i"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"into_iter","","",215,[[["self"]],["i"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"into_iter","","",216,[[["self"]],["i"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"into_iter","","",217,[[["self"]],["i"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"into_iter","","",218,[[["self"]],["i"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"into_iter","","",219,[[["self"]],["i"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"into_iter","","",220,[[["self"]],["i"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"into_iter","","",221,[[["self"]],["i"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"into_iter","","",222,[[["self"]],["i"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"into_iter","","",223,[[["self"]],["i"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"into_iter","","",224,[[["self"]],["i"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"into_iter","","",225,[[["self"]],["i"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"into_iter","","",226,[[["self"]],["i"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"into_iter","","",227,[[["self"]],["i"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"from","","",228,[[["t"]],["t"]]],[11,"into_iter","","",228,[[["self"]],["i"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"from","","",229,[[["t"]],["t"]]],[11,"into_iter","","",229,[[["self"]],["i"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"into_iter","","",230,[[["self"]],["i"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,N],[11,"from","","",231,[[["t"]],["t"]]],[11,"into_iter","","",231,[[["self"]],["i"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,N],[11,"from","","",232,[[["t"]],["t"]]],[11,"into_iter","","",232,[[["self"]],["i"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::option","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"into_iter","","",233,[[["self"]],["i"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"into_iter","","",234,[[["self"]],["i"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,N],[11,"from","","",235,[[["t"]],["t"]]],[11,"into_iter","","",235,[[["self"]],["i"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::raw","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::result","",237,[[["self"]],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,N],[11,"from","","",237,[[["t"]],["t"]]],[11,"into_iter","","",237,[[["self"]],["i"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"into_iter","","",238,[[["self"]],["i"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"into_iter","","",239,[[["self"]],["i"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::ffi","",240,[[["self"]],["u"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::slice","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"into_iter","","",241,[[["self"]],["i"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into_iter","","",242,[[["self"]],["i"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,N],[11,"from","","",243,[[["t"]],["t"]]],[11,"into_iter","","",243,[[["self"]],["i"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into_iter","","",244,[[["self"]],["i"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"into_iter","","",245,[[["self"]],["i"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"into_iter","","",246,[[["self"]],["i"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into_iter","","",247,[[["self"]],["i"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"into_iter","","",248,[[["self"]],["i"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into_iter","","",249,[[["self"]],["i"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into_iter","","",250,[[["self"]],["i"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"into_iter","","",251,[[["self"]],["i"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"into_iter","","",252,[[["self"]],["i"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"into_iter","","",253,[[["self"]],["i"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"into","","",254,[[["self"]],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,N],[11,"from","","",254,[[["t"]],["t"]]],[11,"into_iter","","",254,[[["self"]],["i"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"try_into","","",254,[[["self"]],["result"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into_iter","","",255,[[["self"]],["i"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"into_iter","","",256,[[["self"]],["i"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into_iter","","",257,[[["self"]],["i"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,N],[11,"from","","",258,[[["t"]],["t"]]],[11,"into_iter","","",258,[[["self"]],["i"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"into_iter","","",259,[[["self"]],["i"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::str::pattern","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,N],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,N],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,N],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,N],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"to_string","argmin::prelude::failure::_core::str::lossy","",264,[[["self"]],["string"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"into_iter","","",265,[[["self"]],["i"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::str","",266,[[["self"]],["u"]]],[11,"to_string","","",266,[[["self"]],["string"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,N],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"try_into","","",266,[[["self"]],["result"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"get_type_id","","",266,[[["self"]],["typeid"]]],[11,"as_fail","","",266,[[["self"]],["fail"]]],[11,"into","","",267,[[["self"]],["u"]]],[11,"to_string","","",267,[[["self"]],["string"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,N],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"try_into","","",267,[[["self"]],["result"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"get_type_id","","",267,[[["self"]],["typeid"]]],[11,"as_fail","","",267,[[["self"]],["fail"]]],[11,"into","","",268,[[["self"]],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,N],[11,"from","","",268,[[["t"]],["t"]]],[11,"into_iter","","",268,[[["self"]],["i"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"try_into","","",268,[[["self"]],["result"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"get_type_id","","",268,[[["self"]],["typeid"]]],[11,"into","","",269,[[["self"]],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,N],[11,"from","","",269,[[["t"]],["t"]]],[11,"into_iter","","",269,[[["self"]],["i"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"try_into","","",269,[[["self"]],["result"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"get_type_id","","",269,[[["self"]],["typeid"]]],[11,"into","","",270,[[["self"]],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,N],[11,"from","","",270,[[["t"]],["t"]]],[11,"into_iter","","",270,[[["self"]],["i"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"try_into","","",270,[[["self"]],["result"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"get_type_id","","",270,[[["self"]],["typeid"]]],[11,"into","","",271,[[["self"]],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,N],[11,"from","","",271,[[["t"]],["t"]]],[11,"into_iter","","",271,[[["self"]],["i"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"try_into","","",271,[[["self"]],["result"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"get_type_id","","",271,[[["self"]],["typeid"]]],[11,"into","","",272,[[["self"]],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,N],[11,"from","","",272,[[["t"]],["t"]]],[11,"into_iter","","",272,[[["self"]],["i"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"try_into","","",272,[[["self"]],["result"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"get_type_id","","",272,[[["self"]],["typeid"]]],[11,"into","","",273,[[["self"]],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,N],[11,"from","","",273,[[["t"]],["t"]]],[11,"into_iter","","",273,[[["self"]],["i"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"try_into","","",273,[[["self"]],["result"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"get_type_id","","",273,[[["self"]],["typeid"]]],[11,"into","","",274,[[["self"]],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,N],[11,"from","","",274,[[["t"]],["t"]]],[11,"into_iter","","",274,[[["self"]],["i"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"try_into","","",274,[[["self"]],["result"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"get_type_id","","",274,[[["self"]],["typeid"]]],[11,"into","","",275,[[["self"]],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,N],[11,"from","","",275,[[["t"]],["t"]]],[11,"into_iter","","",275,[[["self"]],["i"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"try_into","","",275,[[["self"]],["result"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"get_type_id","","",275,[[["self"]],["typeid"]]],[11,"into","","",276,[[["self"]],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,N],[11,"from","","",276,[[["t"]],["t"]]],[11,"into_iter","","",276,[[["self"]],["i"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"try_into","","",276,[[["self"]],["result"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"get_type_id","","",276,[[["self"]],["typeid"]]],[11,"into","","",277,[[["self"]],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,N],[11,"from","","",277,[[["t"]],["t"]]],[11,"into_iter","","",277,[[["self"]],["i"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"try_into","","",277,[[["self"]],["result"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"get_type_id","","",277,[[["self"]],["typeid"]]],[11,"into","","",278,[[["self"]],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,N],[11,"from","","",278,[[["t"]],["t"]]],[11,"into_iter","","",278,[[["self"]],["i"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"try_into","","",278,[[["self"]],["result"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"get_type_id","","",278,[[["self"]],["typeid"]]],[11,"into","","",279,[[["self"]],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,N],[11,"from","","",279,[[["t"]],["t"]]],[11,"into_iter","","",279,[[["self"]],["i"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"try_into","","",279,[[["self"]],["result"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"get_type_id","","",279,[[["self"]],["typeid"]]],[11,"into","","",280,[[["self"]],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,N],[11,"from","","",280,[[["t"]],["t"]]],[11,"into_iter","","",280,[[["self"]],["i"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"try_into","","",280,[[["self"]],["result"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"get_type_id","","",280,[[["self"]],["typeid"]]],[11,"into","","",281,[[["self"]],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,N],[11,"from","","",281,[[["t"]],["t"]]],[11,"into_iter","","",281,[[["self"]],["i"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"try_into","","",281,[[["self"]],["result"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"get_type_id","","",281,[[["self"]],["typeid"]]],[11,"into","","",282,[[["self"]],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,N],[11,"from","","",282,[[["t"]],["t"]]],[11,"into_iter","","",282,[[["self"]],["i"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"try_into","","",282,[[["self"]],["result"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"get_type_id","","",282,[[["self"]],["typeid"]]],[11,"into","","",283,[[["self"]],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,N],[11,"from","","",283,[[["t"]],["t"]]],[11,"into_iter","","",283,[[["self"]],["i"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"try_into","","",283,[[["self"]],["result"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"get_type_id","","",283,[[["self"]],["typeid"]]],[11,"into","","",284,[[["self"]],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,N],[11,"from","","",284,[[["t"]],["t"]]],[11,"into_iter","","",284,[[["self"]],["i"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"try_into","","",284,[[["self"]],["result"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"get_type_id","","",284,[[["self"]],["typeid"]]],[11,"into","","",285,[[["self"]],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,N],[11,"from","","",285,[[["t"]],["t"]]],[11,"into_iter","","",285,[[["self"]],["i"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"try_into","","",285,[[["self"]],["result"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"get_type_id","","",285,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::hash","",286,[[["self"]],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,N],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"try_into","","",286,[[["self"]],["result"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"get_type_id","","",286,[[["self"]],["typeid"]]],[11,"into","","",287,[[["self"]],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,N],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"try_into","","",287,[[["self"]],["result"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"get_type_id","","",287,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::fmt","",100,[[["self"]],["u"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"into","","",288,[[["self"]],["u"]]],[11,"to_string","","",288,[[["self"]],["string"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,N],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"try_into","","",288,[[["self"]],["result"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"get_type_id","","",288,[[["self"]],["typeid"]]],[11,"as_fail","","",288,[[["self"]],["fail"]]],[11,"into","","",289,[[["self"]],["u"]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"try_into","","",289,[[["self"]],["result"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"get_type_id","","",289,[[["self"]],["typeid"]]],[11,"into","","",290,[[["self"]],["u"]]],[11,"to_string","","",290,[[["self"]],["string"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,N],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"try_into","","",290,[[["self"]],["result"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"get_type_id","","",290,[[["self"]],["typeid"]]],[11,"into","","",291,[[["self"]],["u"]]],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"try_into","","",291,[[["self"]],["result"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"get_type_id","","",291,[[["self"]],["typeid"]]],[11,"into","","",292,[[["self"]],["u"]]],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"try_into","","",292,[[["self"]],["result"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"get_type_id","","",292,[[["self"]],["typeid"]]],[11,"into","","",293,[[["self"]],["u"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"try_into","","",293,[[["self"]],["result"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"get_type_id","","",293,[[["self"]],["typeid"]]],[11,"into","","",294,[[["self"]],["u"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"try_into","","",294,[[["self"]],["result"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"get_type_id","","",294,[[["self"]],["typeid"]]],[11,"into","","",295,[[["self"]],["u"]]],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"try_into","","",295,[[["self"]],["result"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"get_type_id","","",295,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::time","",296,[[["self"]],["u"]]],[11,"to_owned","","",296,[[["self"]],["t"]]],[11,"clone_into","","",296,N],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"try_into","","",296,[[["self"]],["result"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"get_type_id","","",296,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::task","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"into","","",297,[[["self"]],["u"]]],[11,"to_owned","","",297,[[["self"]],["t"]]],[11,"clone_into","","",297,N],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"try_into","","",297,[[["self"]],["result"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"get_type_id","","",297,[[["self"]],["typeid"]]],[11,"into","","",298,[[["self"]],["u"]]],[11,"to_owned","","",298,[[["self"]],["t"]]],[11,"clone_into","","",298,N],[11,"from","","",298,[[["t"]],["t"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"try_into","","",298,[[["self"]],["result"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"get_type_id","","",298,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure::_core::alloc","",114,[[["self"]],["u"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"into","","",299,[[["self"]],["u"]]],[11,"to_owned","","",299,[[["self"]],["t"]]],[11,"clone_into","","",299,N],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"try_into","","",299,[[["self"]],["result"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"get_type_id","","",299,[[["self"]],["typeid"]]],[11,"into","","",300,[[["self"]],["u"]]],[11,"to_string","","",300,[[["self"]],["string"]]],[11,"to_owned","","",300,[[["self"]],["t"]]],[11,"clone_into","","",300,N],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"try_into","","",300,[[["self"]],["result"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"get_type_id","","",300,[[["self"]],["typeid"]]],[11,"as_fail","","",300,[[["self"]],["fail"]]],[11,"into","","",301,[[["self"]],["u"]]],[11,"to_string","","",301,[[["self"]],["string"]]],[11,"to_owned","","",301,[[["self"]],["t"]]],[11,"clone_into","","",301,N],[11,"from","","",301,[[["t"]],["t"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"try_into","","",301,[[["self"]],["result"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"get_type_id","","",301,[[["self"]],["typeid"]]],[11,"as_fail","","",301,[[["self"]],["fail"]]],[11,"into","","",302,[[["self"]],["u"]]],[11,"to_string","","",302,[[["self"]],["string"]]],[11,"to_owned","","",302,[[["self"]],["t"]]],[11,"clone_into","","",302,N],[11,"from","","",302,[[["t"]],["t"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"try_into","","",302,[[["self"]],["result"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"get_type_id","","",302,[[["self"]],["typeid"]]],[11,"as_fail","","",302,[[["self"]],["fail"]]],[11,"into","argmin::prelude::failure::_core::arch::x86_64","",303,[[["self"]],["u"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,N],[11,"from","","",303,[[["t"]],["t"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"try_into","","",303,[[["self"]],["result"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"get_type_id","","",303,[[["self"]],["typeid"]]],[11,"into","","",304,[[["self"]],["u"]]],[11,"to_owned","","",304,[[["self"]],["t"]]],[11,"clone_into","","",304,N],[11,"from","","",304,[[["t"]],["t"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"try_into","","",304,[[["self"]],["result"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"get_type_id","","",304,[[["self"]],["typeid"]]],[11,"into","","",305,[[["self"]],["u"]]],[11,"to_owned","","",305,[[["self"]],["t"]]],[11,"clone_into","","",305,N],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"try_into","","",305,[[["self"]],["result"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"get_type_id","","",305,[[["self"]],["typeid"]]],[11,"into","","",306,[[["self"]],["u"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,N],[11,"from","","",306,[[["t"]],["t"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"try_into","","",306,[[["self"]],["result"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"get_type_id","","",306,[[["self"]],["typeid"]]],[11,"into","","",307,[[["self"]],["u"]]],[11,"to_owned","","",307,[[["self"]],["t"]]],[11,"clone_into","","",307,N],[11,"from","","",307,[[["t"]],["t"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"try_into","","",307,[[["self"]],["result"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"get_type_id","","",307,[[["self"]],["typeid"]]],[11,"into","","",308,[[["self"]],["u"]]],[11,"to_owned","","",308,[[["self"]],["t"]]],[11,"clone_into","","",308,N],[11,"from","","",308,[[["t"]],["t"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"try_into","","",308,[[["self"]],["result"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"get_type_id","","",308,[[["self"]],["typeid"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"into","","",309,[[["self"]],["u"]]],[11,"to_owned","","",309,[[["self"]],["t"]]],[11,"clone_into","","",309,N],[11,"from","","",309,[[["t"]],["t"]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"try_into","","",309,[[["self"]],["result"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"get_type_id","","",309,[[["self"]],["typeid"]]],[11,"into","argmin::prelude::failure","",310,[[["self"]],["u"]]],[11,"to_string","","",310,[[["self"]],["string"]]],[11,"from","","",310,[[["t"]],["t"]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"try_into","","",310,[[["self"]],["result"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"get_type_id","","",310,[[["self"]],["typeid"]]],[11,"as_fail","","",310,[[["self"]],["fail"]]],[11,"into","","",311,[[["self"]],["u"]]],[11,"to_string","","",311,[[["self"]],["string"]]],[11,"to_owned","","",311,[[["self"]],["t"]]],[11,"clone_into","","",311,N],[11,"from","","",311,[[["t"]],["t"]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"try_into","","",311,[[["self"]],["result"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"get_type_id","","",311,[[["self"]],["typeid"]]],[11,"as_fail","","",311,[[["self"]],["fail"]]],[11,"into","","",312,[[["self"]],["u"]]],[11,"to_string","","",312,[[["self"]],["string"]]],[11,"from","","",312,[[["t"]],["t"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"try_into","","",312,[[["self"]],["result"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"get_type_id","","",312,[[["self"]],["typeid"]]],[11,"into","argmin::prelude","",313,[[["self"]],["u"]]],[11,"from","","",313,[[["t"]],["t"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"try_into","","",313,[[["self"]],["result"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"get_type_id","","",313,[[["self"]],["typeid"]]],[11,"into","argmin::solver::conjugategradient::cg","",126,[[["self"]],["u"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"into","argmin::solver::conjugategradient::nonlinear_cg","",127,[[["self"]],["u"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"into","argmin::solver::conjugategradient::beta","",128,[[["self"]],["u"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"into","argmin::solver::gradientdescent::steepestdescent","",132,[[["self"]],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"into","argmin::solver::landweber","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"into","argmin::solver::linesearch::backtracking","",134,[[["self"]],["u"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"into","argmin::solver::linesearch::condition","",136,[[["self"]],["u"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"into","argmin::solver::linesearch::hagerzhang","",140,[[["self"]],["u"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"into","argmin::solver::linesearch::morethuente","",141,[[["self"]],["u"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"into","argmin::solver::newton::newton","",142,[[["self"]],["u"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"into","argmin::solver::newton::newton_cg","",143,[[["self"]],["u"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"into","argmin::solver::simulatedannealing","",145,[[["self"]],["u"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"into","argmin::solver::trustregion::cauchypoint","",146,[[["self"]],["u"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"into","argmin::solver::trustregion::dogleg","",147,[[["self"]],["u"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"into","argmin::solver::trustregion::steihaug","",148,[[["self"]],["u"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into","argmin::solver::trustregion::trustregion","",149,[[["self"]],["u"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"report","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"]],["i32"]]],[11,"report","","",26,[[["self"]],["i32"]]],[11,"description","argmin::prelude::failure::_core::str","",266,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::char","",204,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::alloc","",302,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::char","",202,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::alloc","",301,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::char","",203,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::array","",176,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::str","",267,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::num","",165,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::alloc","",300,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::num","",166,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::fmt","",288,[[["self"]],["str"]]],[11,"description","argmin::prelude::failure::_core::cell","",192,[[["self"]],["str"]]],[11,"description","","",193,[[["self"]],["str"]]],[11,"rem_assign","argmin::prelude::failure::_core::num","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"rem_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","argmin::prelude::failure::_core::time","",296,N],[11,"div_assign","argmin::prelude::failure::_core::num","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"div_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","argmin::prelude::failure::_core::time","",296,N],[11,"mul_assign","argmin::prelude::failure::_core::num","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"mul_assign","","",18,N],[11,"from_iter","argmin::prelude::failure::_core::prelude::v1","Takes each element in the [`Iterator`]: if it is [`None`][Option::None], no further elements are taken, and the [`None`][Option::None] is returned. Should no [`None`][Option::None] occur, a container with the values of each [`Option`] is returned.",27,[[["i"]],["option"]]],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",26,[[["i"]],["result"]]],[11,"sub_assign","argmin::prelude::failure::_core::num","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","argmin::prelude::failure::_core::time","",296,N],[11,"sub_assign","argmin::prelude::failure::_core::num","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"sub_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","argmin::prelude::failure::_core::time","",296,N],[11,"add_assign","argmin::prelude::failure::_core::num","",18,N],[11,"add_assign","","",18,N],[11,"add_assign","","",18,N],[11,"neg","","",18,[[["self"]],["wrapping",["usize"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["i32"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["u32"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["i16"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["isize"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["i128"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["u128"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["u16"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["i8"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["i64"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["u64"]]]],[11,"neg","","",18,[[["self"]],["wrapping",["u8"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ptr","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::pin","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"shr_assign","argmin::prelude::failure::_core::num","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"shr_assign","","",18,N],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",227,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",232,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",226,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::mem","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",230,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::lossy","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::marker","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",211,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",270,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::task","",298,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",284,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",242,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::lossy","",264,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",248,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::pin","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::result","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::panic","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::time","",296,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",271,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::task","",297,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",245,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",219,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",278,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::any","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::option","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",225,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",285,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::result","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::option","",236,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",214,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::panic","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",222,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",282,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ptr","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::hash","",286,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",244,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::result","",237,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",274,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",304,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::any","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",308,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",252,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cmp","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",267,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",303,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",299,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::mem","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ascii","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cmp","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",241,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",279,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::marker","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",281,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::pattern","",260,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",231,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",280,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::array","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",229,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",220,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",213,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::hash","",287,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::pattern","",263,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",217,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",243,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",218,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::fmt","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",305,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::fmt","",288,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",247,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::pattern","",262,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",269,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::fmt","",290,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",205,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",259,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::pattern","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",283,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",307,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",300,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ffi","",240,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",215,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::option","",235,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",255,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",273,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::task","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",268,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",249,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",277,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",302,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",272,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",266,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",254,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::option","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::pattern","",261,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::any","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::slice","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::ops","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",309,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",223,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::sync::atomic","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::arch::x86_64","",306,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::iter","",228,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::any","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",276,[[["self"],["formatter"]],["result",["error"]]]],[11,"haystack","argmin::prelude::failure::_core::str::pattern","",263,[[["self"]],["str"]]],[11,"next","","",263,[[["self"]],["searchstep"]]],[11,"next_match","","",263,[[["self"]],["option"]]],[11,"haystack","","",262,[[["self"]],["str"]]],[11,"next","","",262,[[["self"]],["searchstep"]]],[11,"next_match","","",262,[[["self"]],["option"]]],[11,"next_reject","","",262,[[["self"]],["option"]]],[11,"haystack","","",260,[[["self"]],["str"]]],[11,"next","","",260,[[["self"]],["searchstep"]]],[11,"next_match","","",260,[[["self"]],["option"]]],[11,"haystack","","",261,[[["self"]],["str"]]],[11,"next","","",261,[[["self"]],["searchstep"]]],[11,"next_match","","",261,[[["self"]],["option"]]],[11,"next_reject","","",261,[[["self"]],["option"]]],[11,"poll","argmin::prelude::failure::_core::pin","",208,[[["pin",["pin"]],["localwaker"]],["poll"]]],[11,"sub","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"sub","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"sub","","",18,N],[11,"sub","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"sub","","",18,N],[11,"sub","argmin::prelude::failure::_core::time","",296,[[["self"],["duration"]],["duration"]]],[11,"sub","argmin::prelude::failure::_core::num","",18,N],[11,"sub","","",18,N],[11,"sub","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"sub","","",18,N],[11,"sub","","",18,N],[11,"sub","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"sub","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"sub","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"sub","","",18,N],[11,"sub","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"sub","","",18,N],[11,"sub","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"sub","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"sub","","",18,N],[11,"sub","","",18,N],[11,"sub","","",18,N],[11,"sub","","",18,N],[11,"sub","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"sub","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["i8"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["isize"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["i16"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["u64"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["i32"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["usize"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["u128"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["i64"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["u8"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["u16"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["u32"]]]],[11,"shr","","",18,[[["self"],["usize"]],["wrapping",["i128"]]]],[11,"bitxor","","",18,N],[11,"bitxor","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"bitxor","","",18,N],[11,"bitxor","","",18,N],[11,"bitxor","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"bitxor","","",18,N],[11,"bitxor","","",18,N],[11,"bitxor","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"bitxor","","",18,N],[11,"bitxor","","",18,N],[11,"bitxor","","",18,N],[11,"bitxor","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"bitxor","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"bitxor","","",18,N],[11,"bitxor","","",18,N],[11,"bitxor","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"bitxor","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"bitxor","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"bitxor","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"bitxor","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"bitxor","","",18,N],[11,"bitxor","","",18,N],[11,"bitxor","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"bitxor","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"not","","",18,[[["self"]],["wrapping",["u16"]]]],[11,"not","","",18,[[["self"]],["wrapping",["u8"]]]],[11,"not","","",18,[[["self"]],["wrapping",["usize"]]]],[11,"not","","",18,[[["self"]],["wrapping",["u32"]]]],[11,"not","","",18,[[["self"]],["wrapping",["i32"]]]],[11,"not","","",18,[[["self"]],["wrapping",["i64"]]]],[11,"not","","",18,[[["self"]],["wrapping",["u64"]]]],[11,"not","","",18,[[["self"]],["wrapping",["i128"]]]],[11,"not","","",18,[[["self"]],["wrapping",["isize"]]]],[11,"not","","",18,[[["self"]],["wrapping",["i16"]]]],[11,"not","","",18,[[["self"]],["wrapping",["i8"]]]],[11,"not","","",18,[[["self"]],["wrapping",["u128"]]]],[11,"write_str","argmin::prelude::failure::_core::fmt","",289,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",289,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","",289,[[["self"],["arguments"]],["result",["error"]]]],[11,"into_result","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"]],["result"]]],[11,"from_ok","","",26,[[["t"]],["result"]]],[11,"from_error","","",26,[[["e"]],["result"]]],[11,"into_result","","",27,[[["self"]],["result",["noneerror"]]]],[11,"from_ok","","",27,[[["t"]],["option"]]],[11,"from_error","","",27,[[["noneerror"]],["option"]]],[11,"into_result","argmin::prelude::failure::_core::task","",113,[[["self"]],["result"]]],[11,"from_error","","",113,N],[11,"from_ok","","",113,N],[11,"into_result","","",113,[[["self"]],["result"]]],[11,"from_error","","",113,N],[11,"from_ok","","",113,N],[11,"drop","","",298,N],[11,"default","argmin::prelude::failure::_core::hash","",287,[[],["siphasher"]]],[11,"default","argmin::prelude::failure::_core::cell","Creates a `Cell<T>`, with the `Default` value for T.",190,[[],["cell"]]],[11,"default","argmin::prelude::failure::_core::hash","",286,[[],["buildhasherdefault"]]],[11,"default","argmin::prelude::failure::_core::mem","",168,[[],["manuallydrop"]]],[11,"default","argmin::prelude::failure::_core::cmp","",76,[[],["reverse"]]],[11,"default","argmin::prelude::failure::_core::sync::atomic","",184,[[],["atomici32"]]],[11,"default","","",188,[[],["atomicisize"]]],[11,"default","argmin::prelude::failure::_core::iter","",231,[[],["empty"]]],[11,"default","argmin::prelude::failure::_core::sync::atomic","",189,[[],["atomicusize"]]],[11,"default","argmin::prelude::failure::_core::cell","Creates a `RefCell<T>`, with the `Default` value for T.",191,[[],["refcell"]]],[11,"default","argmin::prelude::failure::_core::sync::atomic","",182,[[],["atomici16"]]],[11,"default","argmin::prelude::failure::_core::cell","Creates an `UnsafeCell`, with the `Default` value for T.",196,[[],["unsafecell"]]],[11,"default","argmin::prelude::failure::_core::prelude::v1","Returns [`None`][Option::None].",27,[[],["option"]]],[11,"default","argmin::prelude::failure::_core::fmt","",288,[[],["error"]]],[11,"default","argmin::prelude::failure::_core::marker","",171,[[],["phantomdata"]]],[11,"default","argmin::prelude::failure::_core::sync::atomic","",185,[[],["atomicu32"]]],[11,"default","","Creates an `AtomicBool` initialized to `false`.",178,[[],["atomicbool"]]],[11,"default","argmin::prelude::failure::_core::time","",296,[[],["duration"]]],[11,"default","argmin::prelude::failure::_core::num","",18,[[],["wrapping"]]],[11,"default","argmin::prelude::failure::_core::sync::atomic","",187,[[],["atomicu64"]]],[11,"default","","",181,[[],["atomicu8"]]],[11,"default","","Creates a null `AtomicPtr<T>`.",179,[[],["atomicptr"]]],[11,"default","","",180,[[],["atomici8"]]],[11,"default","","",186,[[],["atomici64"]]],[11,"default","","",183,[[],["atomicu16"]]],[11,"fmt","argmin::prelude::failure::_core::num","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"rem","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"rem","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"rem","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"rem","","",18,N],[11,"rem","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"rem","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"rem","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"rem","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"rem","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,N],[11,"rem","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"rem","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"rem","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"rem","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"rem","","",18,N],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"mul","","",18,N],[11,"mul","","",18,N],[11,"mul","","",18,N],[11,"mul","argmin::prelude::failure::_core::time","",296,[[["self"],["u32"]],["duration"]]],[11,"mul","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"mul","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"mul","","",18,N],[11,"mul","","",18,N],[11,"mul","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"mul","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"mul","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"mul","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"mul","","",18,N],[11,"mul","","",18,N],[11,"mul","","",18,N],[11,"mul","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"mul","","",18,N],[11,"mul","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"mul","","",18,N],[11,"mul","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"mul","","",18,N],[11,"mul","","",18,N],[11,"mul","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"mul","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"mul","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i32"]]]],[11,"product","","",18,[[["i"]],["wrapping",["isize"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i64"]]]],[11,"product","argmin::prelude::failure::_core::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",26,[[["i"]],["result"]]],[11,"product","argmin::prelude::failure::_core::num","",18,[[["i"]],["wrapping",["isize"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i8"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u128"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i128"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u8"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u8"]]]],[11,"product","","",18,[[["i"]],["wrapping",["usize"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i8"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i128"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i16"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i16"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i32"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u64"]]]],[11,"product","","",18,[[["i"]],["wrapping",["usize"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u32"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u32"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u16"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u64"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u16"]]]],[11,"product","","",18,[[["i"]],["wrapping",["i64"]]]],[11,"product","","",18,[[["i"]],["wrapping",["u128"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["u8"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["i64"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["u64"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["u16"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["i128"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["u32"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["usize"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["i32"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["isize"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["i16"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["u128"]]]],[11,"shl","","",18,[[["self"],["usize"]],["wrapping",["i8"]]]],[11,"start_bound","argmin::prelude::failure::_core::ops","",73,[[["self"]],["bound"]]],[11,"end_bound","","",73,[[["self"]],["bound"]]],[11,"start_bound","","",173,[[["self"]],["bound"]]],[11,"end_bound","","",173,[[["self"]],["bound"]]],[11,"start_bound","","",55,[[["self"]],["bound"]]],[11,"end_bound","","",55,[[["self"]],["bound"]]],[11,"start_bound","","",174,[[["self"]],["bound"]]],[11,"end_bound","","",174,[[["self"]],["bound"]]],[11,"start_bound","","",73,[[["self"]],["bound"]]],[11,"end_bound","","",73,[[["self"]],["bound"]]],[11,"start_bound","","",62,[[["self"]],["bound"]]],[11,"end_bound","","",62,[[["self"]],["bound"]]],[11,"start_bound","","",55,[[["self"]],["bound"]]],[11,"end_bound","","",55,[[["self"]],["bound"]]],[11,"start_bound","","",174,[[["self"]],["bound"]]],[11,"end_bound","","",174,[[["self"]],["bound"]]],[11,"start_bound","","",62,[[["self"]],["bound"]]],[11,"end_bound","","",62,[[["self"]],["bound"]]],[11,"start_bound","","",68,[[["self"]],["bound"]]],[11,"end_bound","","",68,[[["self"]],["bound"]]],[11,"start_bound","","",68,[[["self"]],["bound"]]],[11,"end_bound","","",68,[[["self"]],["bound"]]],[11,"bitand","argmin::prelude::failure::_core::num","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"bitand","","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"bitand","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"bitand","","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"bitand","","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"bitand","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"bitand","","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"bitand","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"bitand","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"bitand","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"bitand","","",18,N],[11,"bitand","","",18,N],[11,"bitand","","",18,N],[11,"bitand","","",18,N],[11,"bitand","","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"bitand","","",18,N],[11,"bitand","","",18,N],[11,"bitand","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"next_back","argmin::prelude::failure::_core::iter","",217,[[["self"]],["option"]]],[11,"try_rfold","","",217,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",217,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::str","",283,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::iter","",214,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::result","",239,[[["self"]],["option"]]],[11,"next_back","","",238,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",215,[[["self"]],["option"]]],[11,"try_rfold","","",215,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",215,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::str","",278,[[["self"]],["option"]]],[11,"next_back","","",273,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::result","",237,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",270,[[["self"]],["option",["u8"]]]],[11,"rfind","","",270,[[["self"],["p"]],["option"]]],[11,"next_back","","",279,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::slice","",251,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",272,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::iter","",227,[[["self"]],["option"]]],[11,"try_rfold","","",227,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",227,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::str","",274,[[["self"]],["option",["str"]]]],[11,"next_back","","",277,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::slice","",246,[[["self"]],["option"]]],[11,"next_back","","",257,[[["self"]],["option"]]],[11,"next_back","","",256,[[["self"]],["option"]]],[11,"next_back","","",241,[[["self"]],["option"]]],[11,"try_rfold","","",241,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",241,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",259,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",216,[[["self"]],["option"]]],[11,"try_rfold","","",216,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",216,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::str","",268,[[["self"]],["option",["char"]]]],[11,"next_back","argmin::prelude::failure::_core::iter","",226,[[["self"]],["option"]]],[11,"try_rfold","","",226,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",226,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::slice","",255,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",222,[[["self"]],["option"]]],[11,"try_rfold","","",222,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","argmin::prelude::failure::_core::slice","",244,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",281,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::slice","",254,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",284,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::slice","",253,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",280,[[["self"]],["option",["str"]]]],[11,"next_back","","",282,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::slice","",243,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::option","",233,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::slice","",258,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::ops","",174,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",209,[[["self"]],["option"]]],[11,"try_rfold","","",209,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",209,[[["self"],["acc"],["f"]],["acc"]]],[11,"rfind","","",209,[[["self"],["p"]],["option"]]],[11,"next_back","","",218,[[["self"]],["option"]]],[11,"try_rfold","","",218,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",218,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::option","",234,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",269,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",213,[[["self"]],["option"]]],[11,"try_rfold","","",213,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",213,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",228,[[["self"]],["option"]]],[11,"try_rfold","","",228,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",228,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",227,[[["self"]],["option"]]],[11,"try_rfold","","",227,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",227,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",229,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::option","",235,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::slice","",242,[[["self"]],["option"]]],[11,"try_rfold","","",242,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",242,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",225,[[["self"]],["option"]]],[11,"try_rfold","","",225,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",225,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::ops","",55,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::ascii","",177,[[["self"]],["option",["u8"]]]],[11,"next_back","argmin::prelude::failure::_core::iter","",231,[[["self"]],["option"]]],[11,"next_back","","",210,[[["self"]],["option"]]],[11,"try_rfold","","",210,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",210,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","argmin::prelude::failure::_core::slice","",252,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::iter","",232,[[["self"]],["option"]]],[11,"next_back","argmin::prelude::failure::_core::str","",271,[[["self"]],["option",["str"]]]],[11,"next_back","argmin::prelude::failure::_core::slice","",245,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::iter","",225,[[["self"]],["option"]]],[11,"size_hint","","",225,N],[11,"try_fold","","",225,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",225,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::str","",281,[[["self"]],["option",["str"]]]],[11,"size_hint","","",281,N],[11,"next","argmin::prelude::failure::_core::iter","",227,[[["self"]],["option"]]],[11,"nth","","",227,[[["self"],["usize"]],["option"]]],[11,"last","","",227,[[["self"]],["option"]]],[11,"count","","",227,[[["self"]],["usize"]]],[11,"size_hint","","",227,N],[11,"try_fold","","",227,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",227,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::char","",200,[[["self"]],["option",["char"]]]],[11,"next","argmin::prelude::failure::_core::iter","",231,[[["self"]],["option"]]],[11,"size_hint","","",231,N],[11,"next","argmin::prelude::failure::_core::str::lossy","",265,[[["self"]],["option",["utf8lossychunk"]]]],[11,"next","argmin::prelude::failure::_core::iter","",217,[[["self"]],["option"]]],[11,"size_hint","","",217,N],[11,"try_fold","","",217,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",217,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::slice","",255,[[["self"]],["option"]]],[11,"size_hint","","",255,N],[11,"count","","",255,[[["self"]],["usize"]]],[11,"nth","","",255,[[["self"],["usize"]],["option"]]],[11,"last","","",255,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::iter","",222,[[["self"]],["option"]]],[11,"nth","","",222,[[["self"],["usize"]],["option"]]],[11,"count","","",222,[[["self"]],["usize"]]],[11,"last","","",222,[[["self"]],["option"]]],[11,"size_hint","","",222,N],[11,"try_fold","","",222,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",222,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",213,[[["self"]],["option"]]],[11,"count","","",213,[[["self"]],["usize"]]],[11,"try_fold","","",213,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",213,[[["self"],["acc"],["f"]],["acc"]]],[11,"nth","","",213,[[["self"],["usize"]],["option"]]],[11,"find","","",213,[[["self"],["p"]],["option"]]],[11,"last","","",213,[[["self"]],["option"]]],[11,"size_hint","","",213,N],[11,"next","argmin::prelude::failure::_core::slice","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,N],[11,"next","","",254,[[["self"]],["option"]]],[11,"size_hint","","",254,N],[11,"count","","",254,[[["self"]],["usize"]]],[11,"nth","","",254,[[["self"],["usize"]],["option"]]],[11,"last","","",254,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::iter","",219,[[["self"]],["option"]]],[11,"count","","",219,[[["self"]],["usize"]]],[11,"nth","","",219,[[["self"],["usize"]],["option"]]],[11,"last","","",219,[[["self"]],["option"]]],[11,"size_hint","","",219,N],[11,"try_fold","","",219,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",219,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::ops","",174,[[["self"]],["option"]]],[11,"size_hint","","",174,N],[11,"nth","","",174,[[["self"],["usize"]],["option"]]],[11,"last","","",174,[[["self"]],["option"]]],[11,"min","","",174,[[["self"]],["option"]]],[11,"max","","",174,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::iter","",209,[[["self"]],["option"]]],[11,"size_hint","","",209,N],[11,"try_fold","","",209,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",209,[[["self"],["acc"],["f"]],["acc"]]],[11,"find","","",209,[[["self"],["p"]],["option"]]],[11,"rposition","","",209,[[["self"],["p"]],["option",["usize"]]]],[11,"next","argmin::prelude::failure::_core::str","",270,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",270,N],[11,"count","","",270,[[["self"]],["usize"]]],[11,"last","","",270,[[["self"]],["option"]]],[11,"nth","","",270,[[["self"],["usize"]],["option"]]],[11,"all","","",270,[[["self"],["f"]],["bool"]]],[11,"any","","",270,[[["self"],["f"]],["bool"]]],[11,"find","","",270,[[["self"],["p"]],["option"]]],[11,"position","","",270,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",270,[[["self"],["p"]],["option",["usize"]]]],[11,"next","","",284,[[["self"]],["option",["str"]]]],[11,"size_hint","","",284,N],[11,"next","argmin::prelude::failure::_core::iter","",223,[[["self"]],["option"]]],[11,"nth","","",223,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",223,N],[11,"try_fold","","",223,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",216,[[["self"]],["option"]]],[11,"size_hint","","",216,N],[11,"count","","",216,[[["self"]],["usize"]]],[11,"try_fold","","",216,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",216,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::char","",197,[[["self"]],["option",["char"]]]],[11,"size_hint","","",197,N],[11,"count","","",197,[[["self"]],["usize"]]],[11,"last","","",197,[[["self"]],["option",["char"]]]],[11,"next","argmin::prelude::failure::_core::str","",285,[[["self"]],["option",["u16"]]]],[11,"size_hint","","",285,N],[11,"next","argmin::prelude::failure::_core::iter","",212,[[["self"]],["option"]]],[11,"size_hint","","",212,N],[11,"nth","","",212,[[["self"],["usize"]],["option"]]],[11,"next","argmin::prelude::failure::_core::slice","",243,[[["self"]],["option"]]],[11,"size_hint","","",243,N],[11,"next","argmin::prelude::failure::_core::ops","",73,[[["self"]],["option"]]],[11,"size_hint","","",73,N],[11,"nth","","",73,[[["self"],["usize"]],["option"]]],[11,"next","argmin::prelude::failure::_core::ascii","",177,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",177,N],[11,"next","argmin::prelude::failure::_core::slice","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,N],[11,"next","","",250,[[["self"]],["option"]]],[11,"size_hint","","",250,N],[11,"next","argmin::prelude::failure::_core::iter","",226,[[["self"]],["option"]]],[11,"size_hint","","",226,N],[11,"try_fold","","",226,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",226,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::slice","",251,[[["self"]],["option"]]],[11,"size_hint","","",251,N],[11,"count","","",251,[[["self"]],["usize"]]],[11,"nth","","",251,[[["self"],["usize"]],["option"]]],[11,"last","","",251,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::char","",205,[[["self"]],["option",["result"]]]],[11,"size_hint","","",205,N],[11,"next","argmin::prelude::failure::_core::iter","",215,[[["self"]],["option"]]],[11,"size_hint","","",215,N],[11,"try_fold","","",215,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",215,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::slice","",253,[[["self"]],["option"]]],[11,"size_hint","","",253,N],[11,"count","","",253,[[["self"]],["usize"]]],[11,"nth","","",253,[[["self"],["usize"]],["option"]]],[11,"last","","",253,[[["self"]],["option"]]],[11,"next","","",242,[[["self"]],["option"]]],[11,"size_hint","","",242,N],[11,"count","","",242,[[["self"]],["usize"]]],[11,"nth","","",242,[[["self"],["usize"]],["option"]]],[11,"last","","",242,[[["self"]],["option"]]],[11,"try_fold","","",242,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",242,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",242,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",242,[[["self"],["p"]],["option",["usize"]]]],[11,"next","","",259,[[["self"]],["option"]]],[11,"size_hint","","",259,N],[11,"count","","",259,[[["self"]],["usize"]]],[11,"nth","","",259,[[["self"],["usize"]],["option"]]],[11,"last","","",259,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::str","",269,[[["self"]],["option"]]],[11,"count","","",269,[[["self"]],["usize"]]],[11,"size_hint","","",269,N],[11,"last","","",269,[[["self"]],["option"]]],[11,"next","","",273,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::slice","",244,[[["self"]],["option"]]],[11,"size_hint","","",244,N],[11,"next","argmin::prelude::failure::_core::str","",283,[[["self"]],["option",["str"]]]],[11,"size_hint","","",283,N],[11,"next","","",276,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::option","",233,[[["self"]],["option"]]],[11,"size_hint","","",233,N],[11,"next","","",235,[[["self"]],["option"]]],[11,"size_hint","","",235,N],[11,"next","argmin::prelude::failure::_core::str","",277,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::char","",199,[[["self"]],["option",["char"]]]],[11,"size_hint","","",199,N],[11,"next","argmin::prelude::failure::_core::ops","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"nth","","",55,[[["self"],["usize"]],["option"]]],[11,"last","","",55,[[["self"]],["option"]]],[11,"min","","",55,[[["self"]],["option"]]],[11,"max","","",55,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::result","",237,[[["self"]],["option"]]],[11,"size_hint","","",237,N],[11,"next","argmin::prelude::failure::_core::iter","",220,[[["self"]],["option"]]],[11,"size_hint","","",220,N],[11,"try_fold","","",220,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",220,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::str","",271,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::slice","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,N],[11,"next","argmin::prelude::failure::_core::char","",201,[[["self"]],["option",["char"]]]],[11,"next","argmin::prelude::failure::_core::slice","",257,[[["self"]],["option"]]],[11,"size_hint","","",257,N],[11,"count","","",257,[[["self"]],["usize"]]],[11,"nth","","",257,[[["self"],["usize"]],["option"]]],[11,"last","","",257,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::str","",274,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::slice","",258,[[["self"]],["option"]]],[11,"size_hint","","",258,N],[11,"count","","",258,[[["self"]],["usize"]]],[11,"nth","","",258,[[["self"],["usize"]],["option"]]],[11,"last","","",258,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::result","",239,[[["self"]],["option"]]],[11,"size_hint","","",239,N],[11,"next","","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,N],[11,"next","argmin::prelude::failure::_core::iter","",230,[[["self"]],["option"]]],[11,"size_hint","","",230,N],[11,"next","argmin::prelude::failure::_core::str","",272,[[["self"]],["option",["str"]]]],[11,"next","","",268,[[["self"]],["option",["char"]]]],[11,"count","","",268,[[["self"]],["usize"]]],[11,"size_hint","","",268,N],[11,"last","","",268,[[["self"]],["option",["char"]]]],[11,"next","","",275,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::iter","",224,[[["self"]],["option"]]],[11,"size_hint","","",224,N],[11,"try_fold","","",224,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","argmin::prelude::failure::_core::slice","",241,[[["self"]],["option"]]],[11,"size_hint","","",241,N],[11,"count","","",241,[[["self"]],["usize"]]],[11,"nth","","",241,[[["self"],["usize"]],["option"]]],[11,"last","","",241,[[["self"]],["option"]]],[11,"try_fold","","",241,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",241,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",241,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",241,[[["self"],["p"]],["option",["usize"]]]],[11,"next","argmin::prelude::failure::_core::iter","Overflow Behavior",218,[[["self"]],["option"]]],[11,"size_hint","","",218,N],[11,"nth","","",218,[[["self"],["usize"]],["option"]]],[11,"count","","",218,[[["self"]],["usize"]]],[11,"try_fold","","",218,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",218,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::str","",280,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::iter","",214,[[["self"]],["option"]]],[11,"size_hint","","",214,N],[11,"nth","","",214,[[["self"],["usize"]],["option"]]],[11,"next","argmin::prelude::failure::_core::slice","",247,[[["self"]],["option"]]],[11,"size_hint","","",247,N],[11,"next","argmin::prelude::failure::_core::char","",198,[[["self"]],["option",["char"]]]],[11,"size_hint","","",198,N],[11,"count","","",198,[[["self"]],["usize"]]],[11,"nth","","",198,[[["self"],["usize"]],["option",["char"]]]],[11,"last","","",198,[[["self"]],["option",["char"]]]],[11,"next","argmin::prelude::failure::_core::slice","",256,[[["self"]],["option"]]],[11,"size_hint","","",256,N],[11,"count","","",256,[[["self"]],["usize"]]],[11,"nth","","",256,[[["self"],["usize"]],["option"]]],[11,"last","","",256,[[["self"]],["option"]]],[11,"next","","",252,[[["self"]],["option"]]],[11,"size_hint","","",252,N],[11,"count","","",252,[[["self"]],["usize"]]],[11,"nth","","",252,[[["self"],["usize"]],["option"]]],[11,"last","","",252,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::iter","",210,[[["self"]],["option"]]],[11,"size_hint","","",210,N],[11,"try_fold","","",210,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",210,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::str","",279,[[["self"]],["option",["str"]]]],[11,"next","argmin::prelude::failure::_core::option","",234,[[["self"]],["option"]]],[11,"size_hint","","",234,N],[11,"next","argmin::prelude::failure::_core::iter","",232,[[["self"]],["option"]]],[11,"size_hint","","",232,N],[11,"next","","",228,[[["self"]],["option"]]],[11,"size_hint","","",228,N],[11,"try_fold","","",228,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",228,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","argmin::prelude::failure::_core::str","",278,[[["self"]],["option"]]],[11,"next","argmin::prelude::failure::_core::iter","",211,[[["self"]],["option"]]],[11,"size_hint","","",211,N],[11,"next","argmin::prelude::failure::_core::str","",282,[[["self"]],["option",["str"]]]],[11,"size_hint","","",282,N],[11,"next","argmin::prelude::failure::_core::slice","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,N],[11,"next","argmin::prelude::failure::_core::iter","",229,[[["self"]],["option"]]],[11,"size_hint","","",229,N],[11,"next","","",227,[[["self"]],["option"]]],[11,"nth","","",227,[[["self"],["usize"]],["option"]]],[11,"last","","",227,[[["self"]],["option"]]],[11,"count","","",227,[[["self"]],["usize"]]],[11,"size_hint","","",227,N],[11,"try_fold","","",227,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",227,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",221,[[["self"]],["option"]]],[11,"size_hint","","",221,N],[11,"try_fold","","",221,[[["self"],["acc"],["fold"]],["r"]]],[11,"into_iter","argmin::prelude::failure::_core::prelude::v1","Returns a consuming iterator over the possibly contained value.",26,[[["self"]],["intoiter"]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",27,[[["self"]],["intoiter"]]],[11,"deref_mut","argmin::prelude::failure::_core::pin","",208,N],[11,"deref_mut","argmin::prelude::failure::_core::cell","",195,[[["self"]],["t"]]],[11,"deref_mut","argmin::prelude::failure::_core::mem","",168,N],[11,"deref","argmin::prelude::failure::_core::pin","",208,N],[11,"deref","argmin::prelude::failure::_core::mem","",168,N],[11,"deref","argmin::prelude::failure::_core::cell","",194,[[["self"]],["t"]]],[11,"deref","","",195,[[["self"]],["t"]]],[11,"clone","argmin::prelude::failure::_core::ops","",43,[[["self"]],["generatorstate"]]],[11,"clone","argmin::prelude::failure::_core::char","",202,[[["self"]],["chartryfromerror"]]],[11,"clone","argmin::prelude::failure::_core::iter","",222,[[["self"]],["skip"]]],[11,"clone","","",209,[[["self"]],["rev"]]],[11,"clone","argmin::prelude::failure::_core::array","",176,[[["self"]],["tryfromsliceerror"]]],[11,"clone","argmin::prelude::failure::_core::str","",284,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","argmin::prelude::failure::_core::hash","",287,[[["self"]],["siphasher"]]],[11,"clone","argmin::prelude::failure::_core::mem","",167,[[["self"]],["discriminant"]]],[11,"clone","argmin::prelude::failure::_core::sync::atomic","",83,[[["self"]],["ordering"]]],[11,"clone","argmin::prelude::failure::_core::str","",270,[[["self"]],["bytes"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",117,[[["self"]],["cpuidresult"]]],[11,"clone","","",304,[[["self"]],["__m128"]]],[11,"clone","argmin::prelude::failure::_core::option","",235,[[["self"]],["intoiter"]]],[11,"clone","argmin::prelude::failure::_core::num","",163,[[["self"]],["nonzerou128"]]],[11,"clone","argmin::prelude::failure::_core::char","",203,[[["self"]],["decodeutf16error"]]],[11,"clone","argmin::prelude::failure::_core::iter","",219,[[["self"]],["peekable"]]],[11,"clone","argmin::prelude::failure::_core::str","",266,[[["self"]],["parseboolerror"]]],[11,"clone","argmin::prelude::failure::_core::iter","",231,[[["self"]],["empty"]]],[11,"clone","argmin::prelude::failure::_core::str::pattern","",262,[[["self"]],["charpredicatesearcher"]]],[11,"clone","argmin::prelude::failure::_core::slice","",256,[[["self"]],["rchunks"]]],[11,"clone","argmin::prelude::failure::_core::raw","",89,[[["self"]],["traitobject"]]],[11,"clone","argmin::prelude::failure::_core::iter","",214,[[["self"]],["zip"]]],[11,"clone","argmin::prelude::failure::_core::result","",239,[[["self"]],["intoiter"]]],[11,"clone","argmin::prelude::failure::_core::iter","",232,[[["self"]],["once"]]],[11,"clone","","",218,[[["self"]],["enumerate"]]],[11,"clone","argmin::prelude::failure::_core::hash","",286,[[["self"]],["buildhasherdefault"]]],[11,"clone","argmin::prelude::failure::_core::num","",164,[[["self"]],["nonzerousize"]]],[11,"clone","argmin::prelude::failure::_core::option","",236,[[["self"]],["noneerror"]]],[11,"clone","argmin::prelude::failure::_core::str","",271,[[["self"]],["split"]]],[11,"clone","","",279,[[["self"]],["matches"]]],[11,"clone","","",274,[[["self"]],["rsplitterminator"]]],[11,"clone","","",267,[[["self"]],["utf8error"]]],[11,"clone","","",272,[[["self"]],["rsplit"]]],[11,"clone","argmin::prelude::failure::_core::num","",161,[[["self"]],["nonzerou32"]]],[11,"clone","argmin::prelude::failure::_core::iter","",226,[[["self"]],["flatten"]]],[11,"clone","argmin::prelude::failure::_core::str","",280,[[["self"]],["rmatches"]]],[11,"clone","argmin::prelude::failure::_core::ops","",68,[[["self"]],["rangetoinclusive"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",305,[[["self"]],["__m128i"]]],[11,"clone","argmin::prelude::failure::_core::str::pattern","",261,[[["self"]],["charslicesearcher"]]],[11,"clone","argmin::prelude::failure::_core::ops","",41,[[["self"]],["bound"]]],[11,"clone","argmin::prelude::failure::_core::alloc","",302,[[["self"]],["cannotreallocinplace"]]],[11,"clone","","",299,[[["self"]],["layout"]]],[11,"clone","argmin::prelude::failure::_core::mem","",168,[[["self"]],["manuallydrop"]]],[11,"clone","argmin::prelude::failure::_core::task","",297,[[["self"]],["localwaker"]]],[11,"clone","argmin::prelude::failure::_core::slice","",252,[[["self"]],["chunks"]]],[11,"clone","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"]],["option"]]],[11,"clone","argmin::prelude::failure::_core::iter","",229,[[["self"]],["repeat"]]],[11,"clone","argmin::prelude::failure::_core::str","",281,[[["self"]],["lines"]]],[11,"clone","argmin::prelude::failure::_core::num","",18,[[["self"]],["wrapping"]]],[11,"clone","argmin::prelude::failure::_core::pin","",208,[[["self"]],["pin"]]],[11,"clone","argmin::prelude::failure::_core::cmp","",75,[[["self"]],["ordering"]]],[11,"clone","argmin::prelude::failure::_core::ops","",174,[[["self"]],["rangeinclusive"]]],[11,"clone","argmin::prelude::failure::_core::iter","",224,[[["self"]],["scan"]]],[11,"clone","argmin::prelude::failure::_core::str","",269,[[["self"]],["charindices"]]],[11,"clone","argmin::prelude::failure::_core::iter","",212,[[["self"]],["stepby"]]],[11,"clone","argmin::prelude::failure::_core::cmp","",76,[[["self"]],["reverse"]]],[11,"clone","argmin::prelude::failure::_core::ops","",173,[[["self"]],["rangefull"]]],[11,"clone","argmin::prelude::failure::_core::char","",201,[[["self"]],["touppercase"]]],[11,"clone","argmin::prelude::failure::_core::alloc","",300,[[["self"]],["layouterr"]]],[11,"clone","argmin::prelude::failure::_core::iter","",230,[[["self"]],["repeatwith"]]],[11,"clone","argmin::prelude::failure::_core::char","",204,[[["self"]],["parsecharerror"]]],[11,"clone","argmin::prelude::failure::_core::str","",275,[[["self"]],["splitn"]]],[11,"clone","argmin::prelude::failure::_core::result","",237,[[["self"]],["iter"]]],[11,"clone","argmin::prelude::failure::_core::str","",277,[[["self"]],["matchindices"]]],[11,"clone","argmin::prelude::failure::_core::char","",198,[[["self"]],["escapedefault"]]],[11,"clone","argmin::prelude::failure::_core::num","",166,[[["self"]],["parseinterror"]]],[11,"clone","argmin::prelude::failure::_core::str::pattern","",263,[[["self"]],["strsearcher"]]],[11,"clone","argmin::prelude::failure::_core::num","",165,[[["self"]],["tryfrominterror"]]],[11,"clone","argmin::prelude::failure::_core::marker","",172,[[["self"]],["pinned"]]],[11,"clone","argmin::prelude::failure::_core::str","",276,[[["self"]],["rsplitn"]]],[11,"clone","argmin::prelude::failure::_core::iter","",223,[[["self"]],["take"]]],[11,"clone","argmin::prelude::failure::_core::num","",19,[[["self"]],["fpcategory"]]],[11,"clone","argmin::prelude::failure::_core::iter","",213,[[["self"]],["chain"]]],[11,"clone","argmin::prelude::failure::_core::fmt","",290,[[["self"]],["arguments"]]],[11,"clone","argmin::prelude::failure::_core::char","",84,[[["self"]],["unicodeversion"]]],[11,"clone","argmin::prelude::failure::_core::ops","",73,[[["self"]],["rangefrom"]]],[11,"clone","argmin::prelude::failure::_core::fmt","",288,[[["self"]],["error"]]],[11,"clone","argmin::prelude::failure::_core::any","",175,[[["self"]],["typeid"]]],[11,"clone","argmin::prelude::failure::_core::iter","",216,[[["self"]],["filter"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",308,[[["self"]],["__m256i"]]],[11,"clone","argmin::prelude::failure::_core::char","",200,[[["self"]],["tolowercase"]]],[11,"clone","argmin::prelude::failure::_core::iter","",225,[[["self"]],["flatmap"]]],[11,"clone","argmin::prelude::failure::_core::time","",296,[[["self"]],["duration"]]],[11,"clone","argmin::prelude::failure::_core::num","",159,[[["self"]],["nonzerou8"]]],[11,"clone","argmin::prelude::failure::_core::cell","",190,[[["self"]],["cell"]]],[11,"clone","argmin::prelude::failure::_core::alloc","",301,[[["self"]],["allocerr"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",303,[[["self"]],["__m64"]]],[11,"clone","argmin::prelude::failure::_core::ptr","",170,[[["self"]],["nonnull"]]],[11,"clone","argmin::prelude::failure::_core::str","",278,[[["self"]],["rmatchindices"]]],[11,"clone","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"]],["result"]]],[11,"clone","argmin::prelude::failure::_core::str","",285,[[["self"]],["encodeutf16"]]],[11,"clone","argmin::prelude::failure::_core::iter","",227,[[["self"]],["fuse"]]],[11,"clone","","",220,[[["self"]],["skipwhile"]]],[11,"clone","argmin::prelude::failure::_core::task","",113,[[["self"]],["poll"]]],[11,"clone","argmin::prelude::failure::_core::char","",199,[[["self"]],["escapedebug"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",309,[[["self"]],["__m256"]]],[11,"clone","argmin::prelude::failure::_core::str::pattern","",260,[[["self"]],["charsearcher"]]],[11,"clone","argmin::prelude::failure::_core::iter","",221,[[["self"]],["takewhile"]]],[11,"clone","argmin::prelude::failure::_core::task","",298,[[["self"]],["waker"]]],[11,"clone","argmin::prelude::failure::_core::option","",233,[[["self"]],["iter"]]],[11,"clone","argmin::prelude::failure::_core::ops","",62,[[["self"]],["rangeto"]]],[11,"clone","argmin::prelude::failure::_core::char","",197,[[["self"]],["escapeunicode"]]],[11,"clone","argmin::prelude::failure::_core::str::pattern","",92,[[["self"]],["searchstep"]]],[11,"clone","argmin::prelude::failure::_core::str","",268,[[["self"]],["chars"]]],[11,"clone","argmin::prelude::failure::_core::ops","",55,[[["self"]],["range"]]],[11,"clone","argmin::prelude::failure::_core::marker","",171,[[["self"]],["phantomdata"]]],[11,"clone","argmin::prelude::failure::_core::slice","",254,[[["self"]],["chunksexact"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",307,[[["self"]],["__m256d"]]],[11,"clone","argmin::prelude::failure::_core::iter","",215,[[["self"]],["map"]]],[11,"clone","","",228,[[["self"]],["inspect"]]],[11,"clone","argmin::prelude::failure::_core::slice","",258,[[["self"]],["rchunksexact"]]],[11,"clone","","",241,[[["self"]],["iter"]]],[11,"clone","","",243,[[["self"]],["split"]]],[11,"clone","argmin::prelude::failure::_core::num","",160,[[["self"]],["nonzerou16"]]],[11,"clone","argmin::prelude::failure::_core::slice","",251,[[["self"]],["windows"]]],[11,"clone","argmin::prelude::failure::_core::str","",273,[[["self"]],["splitterminator"]]],[11,"clone","argmin::prelude::failure::_core::num","",162,[[["self"]],["nonzerou64"]]],[11,"clone","argmin::prelude::failure::_core::str","",283,[[["self"]],["splitwhitespace"]]],[11,"clone","argmin::prelude::failure::_core::arch::x86_64","",306,[[["self"]],["__m128d"]]],[11,"clone","argmin::prelude::failure::_core::char","",205,[[["self"]],["decodeutf16"]]],[11,"clone","argmin::prelude::failure::_core::iter","",217,[[["self"]],["filtermap"]]],[11,"clone","","",210,[[["self"]],["cloned"]]],[11,"clone","argmin::prelude::failure::_core::cell","Panics",191,[[["self"]],["refcell"]]],[11,"clone","argmin::prelude::failure::_core::slice","",245,[[["self"]],["rsplit"]]],[11,"clone","argmin::prelude::failure::_core::str","",282,[[["self"]],["linesany"]]],[11,"clone","argmin::prelude::failure::_core::iter","",211,[[["self"]],["cycle"]]],[11,"fmt","argmin::prelude::failure::_core::num","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::fmt","",288,[[["self"],["error"]],["option",["ordering"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::any","",175,[[["self"],["typeid"]],["option",["ordering"]]]],[11,"lt","","",175,[[["self"],["typeid"]],["bool"]]],[11,"le","","",175,[[["self"],["typeid"]],["bool"]]],[11,"gt","","",175,[[["self"],["typeid"]],["bool"]]],[11,"ge","","",175,[[["self"],["typeid"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::char","",84,[[["self"],["unicodeversion"]],["option",["ordering"]]]],[11,"lt","","",84,[[["self"],["unicodeversion"]],["bool"]]],[11,"le","","",84,[[["self"],["unicodeversion"]],["bool"]]],[11,"gt","","",84,[[["self"],["unicodeversion"]],["bool"]]],[11,"ge","","",84,[[["self"],["unicodeversion"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::cell","Panics",191,[[["self"],["refcell"]],["option",["ordering"]]]],[11,"lt","","Panics",191,[[["self"],["refcell"]],["bool"]]],[11,"le","","Panics",191,[[["self"],["refcell"]],["bool"]]],[11,"gt","","Panics",191,[[["self"],["refcell"]],["bool"]]],[11,"ge","","Panics",191,[[["self"],["refcell"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::marker","",172,[[["self"],["pinned"]],["option",["ordering"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::cmp","",76,[[["self"],["reverse"]],["option",["ordering"]]]],[11,"lt","","",76,[[["self"],["reverse"]],["bool"]]],[11,"le","","",76,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",76,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",76,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::pin","",208,[[["self"],["pin"]],["option",["ordering"]]]],[11,"lt","","",208,[[["self"],["pin"]],["bool"]]],[11,"le","","",208,[[["self"],["pin"]],["bool"]]],[11,"gt","","",208,[[["self"],["pin"]],["bool"]]],[11,"ge","","",208,[[["self"],["pin"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::time","",296,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",296,[[["self"],["duration"]],["bool"]]],[11,"le","","",296,[[["self"],["duration"]],["bool"]]],[11,"gt","","",296,[[["self"],["duration"]],["bool"]]],[11,"ge","","",296,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::ptr","",170,[[["self"],["nonnull"]],["option",["ordering"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::cell","",190,[[["self"],["cell"]],["option",["ordering"]]]],[11,"lt","","",190,[[["self"],["cell"]],["bool"]]],[11,"le","","",190,[[["self"],["cell"]],["bool"]]],[11,"gt","","",190,[[["self"],["cell"]],["bool"]]],[11,"ge","","",190,[[["self"],["cell"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::arch::x86_64","",117,[[["self"],["cpuidresult"]],["option",["ordering"]]]],[11,"lt","","",117,[[["self"],["cpuidresult"]],["bool"]]],[11,"le","","",117,[[["self"],["cpuidresult"]],["bool"]]],[11,"gt","","",117,[[["self"],["cpuidresult"]],["bool"]]],[11,"ge","","",117,[[["self"],["cpuidresult"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::num","",163,[[["self"],["nonzerou128"]],["option",["ordering"]]]],[11,"lt","","",163,[[["self"],["nonzerou128"]],["bool"]]],[11,"le","","",163,[[["self"],["nonzerou128"]],["bool"]]],[11,"gt","","",163,[[["self"],["nonzerou128"]],["bool"]]],[11,"ge","","",163,[[["self"],["nonzerou128"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::marker","",171,[[["self"],["phantomdata"]],["option",["ordering"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::num","",162,[[["self"],["nonzerou64"]],["option",["ordering"]]]],[11,"lt","","",162,[[["self"],["nonzerou64"]],["bool"]]],[11,"le","","",162,[[["self"],["nonzerou64"]],["bool"]]],[11,"gt","","",162,[[["self"],["nonzerou64"]],["bool"]]],[11,"ge","","",162,[[["self"],["nonzerou64"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["wrapping"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["wrapping"]],["bool"]]],[11,"le","","",18,[[["self"],["wrapping"]],["bool"]]],[11,"gt","","",18,[[["self"],["wrapping"]],["bool"]]],[11,"ge","","",18,[[["self"],["wrapping"]],["bool"]]],[11,"partial_cmp","","",160,[[["self"],["nonzerou16"]],["option",["ordering"]]]],[11,"lt","","",160,[[["self"],["nonzerou16"]],["bool"]]],[11,"le","","",160,[[["self"],["nonzerou16"]],["bool"]]],[11,"gt","","",160,[[["self"],["nonzerou16"]],["bool"]]],[11,"ge","","",160,[[["self"],["nonzerou16"]],["bool"]]],[11,"partial_cmp","","",159,[[["self"],["nonzerou8"]],["option",["ordering"]]]],[11,"lt","","",159,[[["self"],["nonzerou8"]],["bool"]]],[11,"le","","",159,[[["self"],["nonzerou8"]],["bool"]]],[11,"gt","","",159,[[["self"],["nonzerou8"]],["bool"]]],[11,"ge","","",159,[[["self"],["nonzerou8"]],["bool"]]],[11,"partial_cmp","","",161,[[["self"],["nonzerou32"]],["option",["ordering"]]]],[11,"lt","","",161,[[["self"],["nonzerou32"]],["bool"]]],[11,"le","","",161,[[["self"],["nonzerou32"]],["bool"]]],[11,"gt","","",161,[[["self"],["nonzerou32"]],["bool"]]],[11,"ge","","",161,[[["self"],["nonzerou32"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::option","",236,[[["self"],["noneerror"]],["option",["ordering"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::ops","",43,[[["self"],["generatorstate"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",43,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",43,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",43,[[["self"],["generatorstate"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::cmp","",75,[[["self"],["ordering"]],["option",["ordering"]]]],[11,"partial_cmp","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"],["result"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["result"]],["bool"]]],[11,"le","","",26,[[["self"],["result"]],["bool"]]],[11,"gt","","",26,[[["self"],["result"]],["bool"]]],[11,"ge","","",26,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::mem","",168,[[["self"],["manuallydrop"]],["option",["ordering"]]]],[11,"lt","","",168,[[["self"],["manuallydrop"]],["bool"]]],[11,"le","","",168,[[["self"],["manuallydrop"]],["bool"]]],[11,"gt","","",168,[[["self"],["manuallydrop"]],["bool"]]],[11,"ge","","",168,[[["self"],["manuallydrop"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"],["option"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["option"]],["bool"]]],[11,"le","","",27,[[["self"],["option"]],["bool"]]],[11,"gt","","",27,[[["self"],["option"]],["bool"]]],[11,"ge","","",27,[[["self"],["option"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::task","",113,[[["self"],["poll"]],["option",["ordering"]]]],[11,"lt","","",113,[[["self"],["poll"]],["bool"]]],[11,"le","","",113,[[["self"],["poll"]],["bool"]]],[11,"gt","","",113,[[["self"],["poll"]],["bool"]]],[11,"ge","","",113,[[["self"],["poll"]],["bool"]]],[11,"partial_cmp","argmin::prelude::failure::_core::num","",164,[[["self"],["nonzerousize"]],["option",["ordering"]]]],[11,"lt","","",164,[[["self"],["nonzerousize"]],["bool"]]],[11,"le","","",164,[[["self"],["nonzerousize"]],["bool"]]],[11,"gt","","",164,[[["self"],["nonzerousize"]],["bool"]]],[11,"ge","","",164,[[["self"],["nonzerousize"]],["bool"]]],[11,"build_hasher","argmin::prelude::failure::_core::hash","",286,[[["self"]],["h"]]],[11,"shl_assign","argmin::prelude::failure::_core::num","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"shl_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",18,N],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::pin","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::fmt","",288,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::array","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",267,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::cell","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str::lossy","",264,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",300,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::fmt","",290,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::alloc","",302,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::panic","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::str","",266,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::char","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::num","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure::_core::panic","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"div","argmin::prelude::failure::_core::num","",18,N],[11,"div","","",18,N],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"div","","",18,N],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"div","","",18,N],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"div","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"div","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"div","","",18,N],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"div","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"div","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"div","argmin::prelude::failure::_core::time","",296,[[["self"],["u32"]],["duration"]]],[11,"div","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"div","","",18,N],[11,"div","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"next_back","argmin::prelude::failure::_core::str::pattern","",260,[[["self"]],["searchstep"]]],[11,"next_match_back","","",260,[[["self"]],["option"]]],[11,"next_back","","",262,[[["self"]],["searchstep"]]],[11,"next_match_back","","",262,[[["self"]],["option"]]],[11,"next_reject_back","","",262,[[["self"]],["option"]]],[11,"next_back","","",263,[[["self"]],["searchstep"]]],[11,"next_match_back","","",263,[[["self"]],["option"]]],[11,"next_back","","",261,[[["self"]],["searchstep"]]],[11,"next_match_back","","",261,[[["self"]],["option"]]],[11,"next_reject_back","","",261,[[["self"]],["option"]]],[11,"cmp","argmin::prelude::failure::_core::cmp","",75,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::time","",296,[[["self"],["duration"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::num","",159,[[["self"],["nonzerou8"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::arch::x86_64","",117,[[["self"],["cpuidresult"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::pin","",208,[[["self"],["pin"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::marker","",171,[[["self"],["phantomdata"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::option","",236,[[["self"],["noneerror"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::num","",162,[[["self"],["nonzerou64"]],["ordering"]]],[11,"cmp","","",160,[[["self"],["nonzerou16"]],["ordering"]]],[11,"cmp","","",161,[[["self"],["nonzerou32"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::cell","Panics",191,[[["self"],["refcell"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"],["option"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::char","",84,[[["self"],["unicodeversion"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::marker","",172,[[["self"],["pinned"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::cmp","",76,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::num","",163,[[["self"],["nonzerou128"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"],["result"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::mem","",168,[[["self"],["manuallydrop"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::cell","",190,[[["self"],["cell"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::fmt","",288,[[["self"],["error"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::num","",164,[[["self"],["nonzerousize"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::task","",113,[[["self"],["poll"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::ops","",43,[[["self"],["generatorstate"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::ptr","",170,[[["self"],["nonnull"]],["ordering"]]],[11,"cmp","argmin::prelude::failure::_core::any","",175,[[["self"],["typeid"]],["ordering"]]],[11,"bitor_assign","argmin::prelude::failure::_core::num","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",18,N],[11,"add","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"add","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"add","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"add","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"add","","",18,N],[11,"add","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"add","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"add","","",18,N],[11,"add","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"add","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"add","","",18,N],[11,"add","","",18,N],[11,"add","argmin::prelude::failure::_core::time","",296,[[["self"],["duration"]],["duration"]]],[11,"add","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"add","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i64"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i8"]]]],[11,"sum","argmin::prelude::failure::_core::time","",296,[[["i"]],["duration"]]],[11,"sum","argmin::prelude::failure::_core::num","",18,[[["i"]],["wrapping",["isize"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u64"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u128"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i128"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["isize"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u16"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u64"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u128"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i16"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i32"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i128"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u16"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i8"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i16"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i64"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u8"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["usize"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u32"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["i32"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["u8"]]]],[11,"sum","","",18,[[["i"]],["wrapping",["usize"]]]],[11,"sum","argmin::prelude::failure::_core::time","",296,[[["i"]],["duration"]]],[11,"sum","argmin::prelude::failure::_core::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",26,[[["i"]],["result"]]],[11,"sum","argmin::prelude::failure::_core::num","",18,[[["i"]],["wrapping",["u32"]]]],[11,"is_empty","argmin::prelude::failure::_core::slice","",254,[[["self"]],["bool"]]],[11,"is_empty","","",255,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::iter","",209,[[["self"]],["usize"]]],[11,"is_empty","","",209,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::char","",197,[[["self"]],["usize"]]],[11,"len","argmin::prelude::failure::_core::slice","",241,[[["self"]],["usize"]]],[11,"is_empty","","",241,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::str","",270,[[["self"]],["usize"]]],[11,"is_empty","","",270,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::iter","",227,[[["self"]],["usize"]]],[11,"is_empty","","",227,[[["self"]],["bool"]]],[11,"len","","",215,[[["self"]],["usize"]]],[11,"is_empty","","",215,[[["self"]],["bool"]]],[11,"is_empty","argmin::prelude::failure::_core::slice","",258,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::char","",198,[[["self"]],["usize"]]],[11,"len","argmin::prelude::failure::_core::iter","",218,[[["self"]],["usize"]]],[11,"is_empty","","",218,[[["self"]],["bool"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"is_empty","","",228,[[["self"]],["bool"]]],[11,"len","","",232,[[["self"]],["usize"]]],[11,"len","","",231,[[["self"]],["usize"]]],[11,"is_empty","argmin::prelude::failure::_core::slice","",259,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::iter","",210,[[["self"]],["usize"]]],[11,"is_empty","","",210,[[["self"]],["bool"]]],[11,"len","argmin::prelude::failure::_core::slice","",242,[[["self"]],["usize"]]],[11,"is_empty","","",242,[[["self"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::mem","",167,[[["self"],["discriminant"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::marker","",171,[[["self"],["phantomdata"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",55,[[["self"],["range"]],["bool"]]],[11,"ne","","",55,[[["self"],["range"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",19,[[["self"],["fpcategory"]],["bool"]]],[11,"eq","","",163,[[["self"],["nonzerou128"]],["bool"]]],[11,"ne","","",163,[[["self"],["nonzerou128"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::char","",84,[[["self"],["unicodeversion"]],["bool"]]],[11,"ne","","",84,[[["self"],["unicodeversion"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::pin","",208,[[["self"],["pin"]],["bool"]]],[11,"ne","","",208,[[["self"],["pin"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::cmp","",75,[[["self"],["ordering"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::cell","Panics",191,[[["self"],["refcell"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::mem","",168,[[["self"],["manuallydrop"]],["bool"]]],[11,"ne","","",168,[[["self"],["manuallydrop"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::hash","",286,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",73,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",73,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::arch::x86_64","",117,[[["self"],["cpuidresult"]],["bool"]]],[11,"ne","","",117,[[["self"],["cpuidresult"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::str","",267,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",267,[[["self"],["utf8error"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::str::lossy","",95,[[["self"],["utf8lossychunk"]],["bool"]]],[11,"ne","","",95,[[["self"],["utf8lossychunk"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::marker","",172,[[["self"],["pinned"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"],["result"]],["bool"]]],[11,"ne","","",26,[[["self"],["result"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping"]],["bool"]]],[11,"ne","","",18,[[["self"],["wrapping"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::fmt","",288,[[["self"],["error"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::cell","",190,[[["self"],["cell"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",160,[[["self"],["nonzerou16"]],["bool"]]],[11,"ne","","",160,[[["self"],["nonzerou16"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::option","",236,[[["self"],["noneerror"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",174,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::any","",175,[[["self"],["typeid"]],["bool"]]],[11,"ne","","",175,[[["self"],["typeid"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",43,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",43,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","","",41,[[["self"],["bound"]],["bool"]]],[11,"ne","","",41,[[["self"],["bound"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::task","",113,[[["self"],["poll"]],["bool"]]],[11,"ne","","",113,[[["self"],["poll"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",173,[[["self"],["rangefull"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",166,[[["self"],["parseinterror"]],["bool"]]],[11,"ne","","",166,[[["self"],["parseinterror"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ptr","",170,[[["self"],["nonnull"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",164,[[["self"],["nonzerousize"]],["bool"]]],[11,"ne","","",164,[[["self"],["nonzerousize"]],["bool"]]],[11,"eq","","",165,[[["self"],["tryfrominterror"]],["bool"]]],[11,"ne","","",165,[[["self"],["tryfrominterror"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",68,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",68,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::char","",204,[[["self"],["parsecharerror"]],["bool"]]],[11,"ne","","",204,[[["self"],["parsecharerror"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::str","",266,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",266,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::alloc","",301,[[["self"],["allocerr"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::str::pattern","",92,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",92,[[["self"],["searchstep"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",162,[[["self"],["nonzerou64"]],["bool"]]],[11,"ne","","",162,[[["self"],["nonzerou64"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::char","",203,[[["self"],["decodeutf16error"]],["bool"]]],[11,"ne","","",203,[[["self"],["decodeutf16error"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::alloc","",299,[[["self"],["layout"]],["bool"]]],[11,"ne","","",299,[[["self"],["layout"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::num","",161,[[["self"],["nonzerou32"]],["bool"]]],[11,"ne","","",161,[[["self"],["nonzerou32"]],["bool"]]],[11,"eq","","",159,[[["self"],["nonzerou8"]],["bool"]]],[11,"ne","","",159,[[["self"],["nonzerou8"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::ops","",62,[[["self"],["rangeto"]],["bool"]]],[11,"ne","","",62,[[["self"],["rangeto"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::alloc","",302,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"],["option"]],["bool"]]],[11,"ne","","",27,[[["self"],["option"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::alloc","",300,[[["self"],["layouterr"]],["bool"]]],[11,"ne","","",300,[[["self"],["layouterr"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::cmp","",76,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",76,[[["self"],["reverse"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::char","",202,[[["self"],["chartryfromerror"]],["bool"]]],[11,"ne","","",202,[[["self"],["chartryfromerror"]],["bool"]]],[11,"eq","argmin::prelude::failure::_core::time","",296,[[["self"],["duration"]],["bool"]]],[11,"ne","","",296,[[["self"],["duration"]],["bool"]]],[11,"bitor","argmin::prelude::failure::_core::num","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"bitor","","",18,N],[11,"bitor","","",18,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"bitor","","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"bitor","","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"bitor","","",18,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"bitor","","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,N],[11,"bitor","","",18,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"write","argmin::prelude::failure::_core::hash","",287,N],[11,"finish","","",287,[[["self"]],["u64"]]],[11,"get","argmin::prelude::failure::_core::ops","",73,N],[11,"get_mut","","",73,N],[11,"get_unchecked","","",73,N],[11,"get_unchecked_mut","","",73,N],[11,"index","","",73,N],[11,"index_mut","","",73,N],[11,"get","","",174,N],[11,"get_mut","","",174,N],[11,"get_unchecked","","",174,N],[11,"get_unchecked_mut","","",174,N],[11,"index","","",174,N],[11,"index_mut","","",174,N],[11,"get","","",73,[[["self"],["str"]],["option"]]],[11,"get_mut","","",73,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",73,N],[11,"get_unchecked_mut","","",73,N],[11,"index","","",73,N],[11,"index_mut","","",73,N],[11,"get","","",174,[[["self"],["str"]],["option"]]],[11,"get_mut","","",174,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",174,N],[11,"get_unchecked_mut","","",174,N],[11,"index","","",174,N],[11,"index_mut","","",174,N],[11,"get","","",62,[[["self"],["str"]],["option"]]],[11,"get_mut","","",62,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",62,N],[11,"get_unchecked_mut","","",62,N],[11,"index","","",62,N],[11,"index_mut","","",62,N],[11,"get","","",68,[[["self"],["str"]],["option"]]],[11,"get_mut","","",68,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",68,N],[11,"get_unchecked_mut","","",68,N],[11,"index","","",68,N],[11,"index_mut","","",68,N],[11,"get","","",62,N],[11,"get_mut","","",62,N],[11,"get_unchecked","","",62,N],[11,"get_unchecked_mut","","",62,N],[11,"index","","",62,N],[11,"index_mut","","",62,N],[11,"get","","",173,N],[11,"get_mut","","",173,N],[11,"get_unchecked","","",173,N],[11,"get_unchecked_mut","","",173,N],[11,"index","","",173,N],[11,"index_mut","","",173,N],[11,"get","","",173,[[["self"],["str"]],["option"]]],[11,"get_mut","","",173,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",173,N],[11,"get_unchecked_mut","","",173,N],[11,"index","","",173,N],[11,"index_mut","","",173,N],[11,"get","","",68,N],[11,"get_mut","","",68,N],[11,"get_unchecked","","",68,N],[11,"get_unchecked_mut","","",68,N],[11,"index","","",68,N],[11,"index_mut","","",68,N],[11,"get","","",55,N],[11,"get_mut","","",55,N],[11,"get_unchecked","","",55,N],[11,"get_unchecked_mut","","",55,N],[11,"index","","",55,N],[11,"index_mut","","",55,N],[11,"get","","",55,[[["self"],["str"]],["option"]]],[11,"get_mut","","",55,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",55,N],[11,"get_unchecked_mut","","",55,N],[11,"index","","",55,N],[11,"index_mut","","",55,N],[11,"from","argmin::prelude::failure::_core::cell","",190,[[["t"]],["cell"]]],[11,"from","argmin::prelude::failure::_core::sync::atomic","",182,[[["i16"]],["atomici16"]]],[11,"from","argmin::prelude::failure::_core::cell","",191,[[["t"]],["refcell"]]],[11,"from","argmin::prelude::failure::_core::sync::atomic","",184,[[["i32"]],["atomici32"]]],[11,"from","argmin::prelude::failure::_core::num","",165,N],[11,"from","argmin::prelude::failure::_core::ptr","",170,[[["t"]],["nonnull"]]],[11,"from","","",170,[[["unique"]],["nonnull"]]],[11,"from","argmin::prelude::failure::_core::task","",113,[[["t"]],["poll"]]],[11,"from","argmin::prelude::failure::_core::sync::atomic","",185,[[["u32"]],["atomicu32"]]],[11,"from","","",183,[[["u16"]],["atomicu16"]]],[11,"from","","",189,[[["usize"]],["atomicusize"]]],[11,"from","","",181,[[["u8"]],["atomicu8"]]],[11,"from","argmin::prelude::failure::_core::prelude::v1","",27,[[["option"]],["option"]]],[11,"from","","",27,[[["option"]],["option"]]],[11,"from","argmin::prelude::failure::_core::cell","",196,[[["t"]],["unsafecell"]]],[11,"from","argmin::prelude::failure::_core::sync::atomic","",187,[[["u64"]],["atomicu64"]]],[11,"from","","",178,[[["bool"]],["atomicbool"]]],[11,"from","","",179,N],[11,"from","","",188,[[["isize"]],["atomicisize"]]],[11,"from","argmin::prelude::failure::_core::ptr","",170,[[["t"]],["nonnull"]]],[11,"from","argmin::prelude::failure::_core::task","Converts a `LocalWaker` into a `Waker`.",298,[[["localwaker"]],["waker"]]],[11,"from","argmin::prelude::failure::_core::prelude::v1","",27,[[["t"]],["option"]]],[11,"from","argmin::prelude::failure::_core::sync::atomic","",186,[[["i64"]],["atomici64"]]],[11,"from","","",180,[[["i8"]],["atomici8"]]],[11,"hash","argmin::prelude::failure::_core::num","",161,N],[11,"hash","argmin::prelude::failure::_core::mem","",167,N],[11,"hash","argmin::prelude::failure::_core::task","",113,N],[11,"hash","argmin::prelude::failure::_core::marker","",171,N],[11,"hash","argmin::prelude::failure::_core::prelude::v1","",27,N],[11,"hash","argmin::prelude::failure::_core::num","",162,N],[11,"hash","argmin::prelude::failure::_core::ops","",174,N],[11,"hash","argmin::prelude::failure::_core::prelude::v1","",26,N],[11,"hash","argmin::prelude::failure::_core::any","",175,N],[11,"hash","argmin::prelude::failure::_core::ops","",43,N],[11,"hash","argmin::prelude::failure::_core::marker","",172,N],[11,"hash","argmin::prelude::failure::_core::ops","",173,N],[11,"hash","","",68,N],[11,"hash","","",73,N],[11,"hash","argmin::prelude::failure::_core::cmp","",76,N],[11,"hash","argmin::prelude::failure::_core::num","",18,N],[11,"hash","","",159,N],[11,"hash","argmin::prelude::failure::_core::ops","",62,N],[11,"hash","argmin::prelude::failure::_core::fmt","",288,N],[11,"hash","argmin::prelude::failure::_core::ops","",41,N],[11,"hash","argmin::prelude::failure::_core::pin","",208,N],[11,"hash","argmin::prelude::failure::_core::num","",164,N],[11,"hash","","",160,N],[11,"hash","argmin::prelude::failure::_core::ptr","",170,N],[11,"hash","argmin::prelude::failure::_core::cmp","",75,N],[11,"hash","argmin::prelude::failure::_core::num","",163,N],[11,"hash","argmin::prelude::failure::_core::ops","",55,N],[11,"hash","argmin::prelude::failure::_core::option","",236,N],[11,"hash","argmin::prelude::failure::_core::time","",296,N],[11,"hash","argmin::prelude::failure::_core::mem","",168,N],[11,"as_ref","argmin::prelude::failure::_core::slice","",241,N],[11,"from","argmin::prelude::failure::_core::pin","",208,[[["box"]],["pin",["box"]]]],[11,"from","argmin::prelude::failure::_core::task","",298,[[["arc"]],["waker"]]],[11,"fmt","argmin::prelude","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"write","","",313,[[["self"],["t"]],["result",["error"]]]],[11,"write","","",153,[[["self"],["t"]],["result",["error"]]]],[11,"log_info","","Log general info",154,[[["self"],["str"],["argminkv"]],["result",["error"]]]],[11,"log_iter","","This should be used to log iteration data only (because this is what may be saved in a CSV file or a database)",154,[[["self"],["argminkv"]],["result",["error"]]]],[11,"log_info","","Log general info",156,[[["self"],["str"],["argminkv"]],["result",["error"]]]],[11,"log_iter","","This should be used to log iteration data only (because this is what may be saved in a CSV file or a database)",156,[[["self"],["argminkv"]],["result",["error"]]]],[11,"apply","","",151,N],[11,"gradient","","",151,N],[11,"hessian","","",151,N],[11,"modify","","",151,N],[11,"box_clone","","",151,[[["self"]],["box",["argminoperator"]]]],[11,"eq","","",8,[[["self"],["terminationreason"]],["bool"]]],[11,"clone","","",12,[[["self"]],["argminresult"]]],[11,"clone","","",10,[[["self"]],["argminkv"]]],[11,"clone","","",8,[[["self"]],["terminationreason"]]],[11,"clone","","",151,[[["self"]],["nooperator"]]],[11,"cause","","",9,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",9,[[["self"]],["option",["backtrace"]]]],[11,"default","argmin::prelude::failure","",311,[[],["compat"]]],[11,"default","","",312,[[],["backtrace"]]],[11,"fmt","argmin::prelude","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure","",311,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",310,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",312,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",311,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",310,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","argmin::prelude::failure","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",312,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",311,[[["self"]],["str"]]],[11,"next","","",157,[[["self"]],["option",["fail"]]]],[11,"hash","","",311,N],[11,"as_fail","argmin::prelude","",152,[[["self"]],["fail"]]],[11,"as_fail","argmin::prelude::failure","",17,[[["self"]],["fail"]]],[11,"from","argmin::prelude","",152,[[["f"]],["error"]]],[11,"from","argmin::prelude::failure","",310,[[["d"]],["context"]]],[11,"eq","","",311,[[["self"],["compat"]],["bool"]]],[11,"ne","","",311,[[["self"],["compat"]],["bool"]]],[11,"clone","","",311,[[["self"]],["compat"]]],[11,"cause","","",310,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",310,[[["self"]],["option",["backtrace"]]]],[11,"as_ref","argmin::prelude","",152,[[["self"]],["fail"]]],[11,"compat","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"]],["result",["compat"]]]],[11,"context","","",26,[[["self"],["d"]],["result",["context"]]]],[11,"with_context","","",26,[[["self"],["f"]],["result",["context"]]]],[11,"compat","","",26,[[["self"]],["result",["compat"]]]],[11,"context","","",26,[[["self"],["d"]],["result",["context"]]]],[11,"with_context","","",26,[[["self"],["f"]],["result",["context"]]]],[11,"serialize","argmin::prelude::failure::_core::num","",18,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[11,"serialize","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[11,"serialize","argmin::prelude::failure::_core::fmt","",290,[[["self"],["record"],["str"],["serializer"]],["result",["error"]]]],[11,"wrapping_sub","argmin::prelude::failure::_core::num","",18,[[["self"],["wrapping"]],["wrapping"]]],[11,"min_value","","",18,[[],["wrapping"]]],[11,"max_value","","",18,[[],["wrapping"]]],[11,"to_isize","","",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","",18,[[["self"]],["option",["i32"]]]],[11,"to_i64","","",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","",18,[[["self"]],["option",["u32"]]]],[11,"to_u64","","",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",18,[[["self"]],["option",["f64"]]]],[11,"from","","",18,[[["u"]],["option",["wrapping"]]]],[11,"wrapping_shl","","",18,[[["self"],["u32"]],["wrapping"]]],[11,"wrapping_mul","","",18,[[["self"],["wrapping"]],["wrapping"]]],[11,"is_zero","","",18,[[["self"]],["bool"]]],[11,"zero","","",18,[[],["wrapping"]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u128"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u32"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i32"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u128"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u128"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i64"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i8"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u8"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i128"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["isize"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u16"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i8"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i32"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u16"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u32"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i16"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i32"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u16"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u8"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i128"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i8"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u8"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i16"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["isize"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["usize"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u64"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u16"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["usize"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i16"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i8"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["usize"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i64"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i128"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["usize"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["isize"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i64"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i32"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u32"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u64"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["isize"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u64"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i64"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["i16"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["i128"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u64"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u32"]]]],[11,"pow","","",18,[[["self"],["usize"]],["wrapping",["u128"]]]],[11,"pow","","",18,[[["self"],["u8"]],["wrapping",["u8"]]]],[11,"from_isize","","",18,[[["isize"]],["option",["wrapping"]]]],[11,"from_i8","","",18,[[["i8"]],["option",["wrapping"]]]],[11,"from_i16","","",18,[[["i16"]],["option",["wrapping"]]]],[11,"from_i32","","",18,[[["i32"]],["option",["wrapping"]]]],[11,"from_i64","","",18,[[["i64"]],["option",["wrapping"]]]],[11,"from_i128","","",18,[[["i128"]],["option",["wrapping"]]]],[11,"from_usize","","",18,[[["usize"]],["option",["wrapping"]]]],[11,"from_u8","","",18,[[["u8"]],["option",["wrapping"]]]],[11,"from_u16","","",18,[[["u16"]],["option",["wrapping"]]]],[11,"from_u32","","",18,[[["u32"]],["option",["wrapping"]]]],[11,"from_u64","","",18,[[["u64"]],["option",["wrapping"]]]],[11,"from_u128","","",18,[[["u128"]],["option",["wrapping"]]]],[11,"from_f32","","",18,[[["f32"]],["option",["wrapping"]]]],[11,"from_f64","","",18,[[["f64"]],["option",["wrapping"]]]],[11,"wrapping_shr","","",18,[[["self"],["u32"]],["wrapping"]]],[11,"abs","","",18,[[["self"]],["wrapping"]]],[11,"abs_sub","","",18,[[["self"],["wrapping"]],["wrapping"]]],[11,"signum","","",18,[[["self"]],["wrapping"]]],[11,"is_positive","","",18,[[["self"]],["bool"]]],[11,"is_negative","","",18,[[["self"]],["bool"]]],[11,"wrapping_add","","",18,[[["self"],["wrapping"]],["wrapping"]]],[11,"from_str_radix","","",18,[[["str"],["u32"]],["result",["wrapping"]]]],[11,"one","","",18,[[],["wrapping"]]],[11,"deserialize","argmin::prelude::failure::_core::prelude::v1","",27,[[["d"]],["result",["option"]]]],[11,"deserialize","argmin::prelude::failure::_core::ops","",174,[[["d"]],["result",["rangeinclusive"]]]],[11,"deserialize","argmin::prelude::failure::_core::num","",161,[[["d"]],["result",["nonzerou32"]]]],[11,"deserialize","argmin::prelude::failure::_core::time","",296,[[["d"]],["result",["duration"]]]],[11,"deserialize","argmin::prelude::failure::_core::cell","",191,[[["d"]],["result",["refcell"]]]],[11,"deserialize","argmin::prelude::failure::_core::prelude::v1","",26,[[["d"]],["result",["result"]]]],[11,"deserialize","argmin::prelude::failure::_core::num","",18,[[["d"]],["result",["wrapping"]]]],[11,"deserialize","","",164,[[["d"]],["result",["nonzerousize"]]]],[11,"deserialize","","",159,[[["d"]],["result",["nonzerou8"]]]],[11,"deserialize","argmin::prelude::failure::_core::cell","",190,[[["d"]],["result",["cell"]]]],[11,"deserialize","argmin::prelude::failure::_core::num","",160,[[["d"]],["result",["nonzerou16"]]]],[11,"deserialize","argmin::prelude::failure::_core::marker","",171,[[["d"]],["result",["phantomdata"]]]],[11,"deserialize","argmin::prelude::failure::_core::num","",162,[[["d"]],["result",["nonzerou64"]]]],[11,"deserialize","argmin::prelude::failure::_core::ops","",55,[[["d"]],["result",["range"]]]],[11,"deserialize","argmin::prelude::failure::_core::num","",163,[[["d"]],["result",["nonzerou128"]]]],[11,"serialize","argmin::prelude::failure::_core::time","",296,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::num","",164,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::cell","",191,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::ops","",174,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::marker","",171,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::num","",160,[[["self"],["s"]],["result"]]],[11,"serialize","","",161,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::fmt","",290,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::num","",162,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::ops","",55,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::num","",163,[[["self"],["s"]],["result"]]],[11,"serialize","","",159,[[["self"],["s"]],["result"]]],[11,"serialize","","",18,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::prelude::v1","",27,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::cell","",190,[[["self"],["s"]],["result"]]],[11,"serialize","argmin::prelude::failure::_core::prelude::v1","",26,[[["self"],["s"]],["result"]]],[11,"deserialize","argmin::prelude::failure::_core::marker","",171,[[["self"],["d"]],["result"]]],[11,"eval","argmin::solver::linesearch::condition","",136,[[["self"],["f64"],["t"],["f64"],["t"],["t"],["f64"]],["bool"]]],[11,"requires_cur_grad","","",136,[[["self"]],["bool"]]],[11,"eval","","",137,[[["self"],["f64"],["t"],["f64"],["t"],["t"],["f64"]],["bool"]]],[11,"requires_cur_grad","","",137,[[["self"]],["bool"]]],[11,"eval","","",138,[[["self"],["f64"],["t"],["f64"],["t"],["t"],["f64"]],["bool"]]],[11,"requires_cur_grad","","",138,[[["self"]],["bool"]]],[11,"eval","","",139,[[["self"],["f64"],["t"],["f64"],["t"],["t"],["f64"]],["bool"]]],[11,"requires_cur_grad","","",139,[[["self"]],["bool"]]],[11,"run","argmin::solver::conjugategradient::cg","",126,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",126,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",126,N],[11,"gradient","","",126,N],[11,"hessian","","",126,N],[11,"cur_param","","",126,N],[11,"cur_grad","","",126,N],[11,"cur_hessian","","",126,N],[11,"set_cur_param","","",126,N],[11,"set_cur_grad","","",126,N],[11,"set_cur_hessian","","",126,N],[11,"set_best_param","","",126,N],[11,"modify","","",126,N],[11,"result","","",126,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",126,[[["self"],["u64"]]]],[11,"max_iters","","",126,[[["self"]],["u64"]]],[11,"increment_iter","","",126,[[["self"]]]],[11,"cur_iter","","",126,[[["self"]],["u64"]]],[11,"cur_cost","","",126,[[["self"]],["f64"]]],[11,"set_cur_cost","","",126,[[["self"],["f64"]]]],[11,"best_cost","","",126,[[["self"]],["f64"]]],[11,"set_best_cost","","",126,[[["self"],["f64"]]]],[11,"set_target_cost","","",126,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",126,[[["self"]]]],[11,"increase_cost_func_count","","",126,[[["self"],["u64"]]]],[11,"cost_func_count","","",126,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",126,[[["self"]]]],[11,"increase_grad_func_count","","",126,[[["self"],["u64"]]]],[11,"grad_func_count","","",126,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",126,[[["self"]]]],[11,"increase_hessian_func_count","","",126,[[["self"],["u64"]]]],[11,"hessian_func_count","","",126,[[["self"]],["u64"]]],[11,"add_logger","","",126,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",126,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",126,[[["self"],["terminationreason"]]]],[11,"terminate","","",126,[[["self"]],["terminationreason"]]],[11,"base_reset","","",126,[[["self"]]]],[11,"run","argmin::solver::conjugategradient::nonlinear_cg","",127,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",127,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",127,N],[11,"gradient","","",127,N],[11,"hessian","","",127,N],[11,"cur_param","","",127,N],[11,"cur_grad","","",127,N],[11,"cur_hessian","","",127,N],[11,"set_cur_param","","",127,N],[11,"set_cur_grad","","",127,N],[11,"set_cur_hessian","","",127,N],[11,"set_best_param","","",127,N],[11,"modify","","",127,N],[11,"result","","",127,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",127,[[["self"],["u64"]]]],[11,"max_iters","","",127,[[["self"]],["u64"]]],[11,"increment_iter","","",127,[[["self"]]]],[11,"cur_iter","","",127,[[["self"]],["u64"]]],[11,"cur_cost","","",127,[[["self"]],["f64"]]],[11,"set_cur_cost","","",127,[[["self"],["f64"]]]],[11,"best_cost","","",127,[[["self"]],["f64"]]],[11,"set_best_cost","","",127,[[["self"],["f64"]]]],[11,"set_target_cost","","",127,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",127,[[["self"]]]],[11,"increase_cost_func_count","","",127,[[["self"],["u64"]]]],[11,"cost_func_count","","",127,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",127,[[["self"]]]],[11,"increase_grad_func_count","","",127,[[["self"],["u64"]]]],[11,"grad_func_count","","",127,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",127,[[["self"]]]],[11,"increase_hessian_func_count","","",127,[[["self"],["u64"]]]],[11,"hessian_func_count","","",127,[[["self"]],["u64"]]],[11,"add_logger","","",127,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",127,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",127,[[["self"],["terminationreason"]]]],[11,"terminate","","",127,[[["self"]],["terminationreason"]]],[11,"base_reset","","",127,[[["self"]]]],[11,"run","argmin::solver::gradientdescent::steepestdescent","",132,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",132,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",132,N],[11,"gradient","","",132,N],[11,"hessian","","",132,N],[11,"cur_param","","",132,N],[11,"cur_grad","","",132,N],[11,"cur_hessian","","",132,N],[11,"set_cur_param","","",132,N],[11,"set_cur_grad","","",132,N],[11,"set_cur_hessian","","",132,N],[11,"set_best_param","","",132,N],[11,"modify","","",132,N],[11,"result","","",132,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",132,[[["self"],["u64"]]]],[11,"max_iters","","",132,[[["self"]],["u64"]]],[11,"increment_iter","","",132,[[["self"]]]],[11,"cur_iter","","",132,[[["self"]],["u64"]]],[11,"cur_cost","","",132,[[["self"]],["f64"]]],[11,"set_cur_cost","","",132,[[["self"],["f64"]]]],[11,"best_cost","","",132,[[["self"]],["f64"]]],[11,"set_best_cost","","",132,[[["self"],["f64"]]]],[11,"set_target_cost","","",132,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",132,[[["self"]]]],[11,"increase_cost_func_count","","",132,[[["self"],["u64"]]]],[11,"cost_func_count","","",132,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",132,[[["self"]]]],[11,"increase_grad_func_count","","",132,[[["self"],["u64"]]]],[11,"grad_func_count","","",132,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",132,[[["self"]]]],[11,"increase_hessian_func_count","","",132,[[["self"],["u64"]]]],[11,"hessian_func_count","","",132,[[["self"]],["u64"]]],[11,"add_logger","","",132,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",132,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",132,[[["self"],["terminationreason"]]]],[11,"terminate","","",132,[[["self"]],["terminationreason"]]],[11,"base_reset","","",132,[[["self"]]]],[11,"run","argmin::solver::landweber","",133,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",133,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",133,N],[11,"gradient","","",133,N],[11,"hessian","","",133,N],[11,"cur_param","","",133,N],[11,"cur_grad","","",133,N],[11,"cur_hessian","","",133,N],[11,"set_cur_param","","",133,N],[11,"set_cur_grad","","",133,N],[11,"set_cur_hessian","","",133,N],[11,"set_best_param","","",133,N],[11,"modify","","",133,N],[11,"result","","",133,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",133,[[["self"],["u64"]]]],[11,"max_iters","","",133,[[["self"]],["u64"]]],[11,"increment_iter","","",133,[[["self"]]]],[11,"cur_iter","","",133,[[["self"]],["u64"]]],[11,"cur_cost","","",133,[[["self"]],["f64"]]],[11,"set_cur_cost","","",133,[[["self"],["f64"]]]],[11,"best_cost","","",133,[[["self"]],["f64"]]],[11,"set_best_cost","","",133,[[["self"],["f64"]]]],[11,"set_target_cost","","",133,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",133,[[["self"]]]],[11,"increase_cost_func_count","","",133,[[["self"],["u64"]]]],[11,"cost_func_count","","",133,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",133,[[["self"]]]],[11,"increase_grad_func_count","","",133,[[["self"],["u64"]]]],[11,"grad_func_count","","",133,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",133,[[["self"]]]],[11,"increase_hessian_func_count","","",133,[[["self"],["u64"]]]],[11,"hessian_func_count","","",133,[[["self"]],["u64"]]],[11,"add_logger","","",133,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",133,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",133,[[["self"],["terminationreason"]]]],[11,"terminate","","",133,[[["self"]],["terminationreason"]]],[11,"base_reset","","",133,[[["self"]]]],[11,"run","argmin::solver::linesearch::backtracking","",134,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",134,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",134,N],[11,"gradient","","",134,N],[11,"hessian","","",134,N],[11,"cur_param","","",134,N],[11,"cur_grad","","",134,N],[11,"cur_hessian","","",134,N],[11,"set_cur_param","","",134,N],[11,"set_cur_grad","","",134,N],[11,"set_cur_hessian","","",134,N],[11,"set_best_param","","",134,N],[11,"modify","","",134,N],[11,"result","","",134,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",134,[[["self"],["u64"]]]],[11,"max_iters","","",134,[[["self"]],["u64"]]],[11,"increment_iter","","",134,[[["self"]]]],[11,"cur_iter","","",134,[[["self"]],["u64"]]],[11,"cur_cost","","",134,[[["self"]],["f64"]]],[11,"set_cur_cost","","",134,[[["self"],["f64"]]]],[11,"best_cost","","",134,[[["self"]],["f64"]]],[11,"set_best_cost","","",134,[[["self"],["f64"]]]],[11,"set_target_cost","","",134,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",134,[[["self"]]]],[11,"increase_cost_func_count","","",134,[[["self"],["u64"]]]],[11,"cost_func_count","","",134,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",134,[[["self"]]]],[11,"increase_grad_func_count","","",134,[[["self"],["u64"]]]],[11,"grad_func_count","","",134,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",134,[[["self"]]]],[11,"increase_hessian_func_count","","",134,[[["self"],["u64"]]]],[11,"hessian_func_count","","",134,[[["self"]],["u64"]]],[11,"add_logger","","",134,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",134,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",134,[[["self"],["terminationreason"]]]],[11,"terminate","","",134,[[["self"]],["terminationreason"]]],[11,"base_reset","","",134,[[["self"]]]],[11,"run","argmin::solver::linesearch::hagerzhang","",140,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",140,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",140,N],[11,"gradient","","",140,N],[11,"hessian","","",140,N],[11,"cur_param","","",140,N],[11,"cur_grad","","",140,N],[11,"cur_hessian","","",140,N],[11,"set_cur_param","","",140,N],[11,"set_cur_grad","","",140,N],[11,"set_cur_hessian","","",140,N],[11,"set_best_param","","",140,N],[11,"modify","","",140,N],[11,"result","","",140,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",140,[[["self"],["u64"]]]],[11,"max_iters","","",140,[[["self"]],["u64"]]],[11,"increment_iter","","",140,[[["self"]]]],[11,"cur_iter","","",140,[[["self"]],["u64"]]],[11,"cur_cost","","",140,[[["self"]],["f64"]]],[11,"set_cur_cost","","",140,[[["self"],["f64"]]]],[11,"best_cost","","",140,[[["self"]],["f64"]]],[11,"set_best_cost","","",140,[[["self"],["f64"]]]],[11,"set_target_cost","","",140,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",140,[[["self"]]]],[11,"increase_cost_func_count","","",140,[[["self"],["u64"]]]],[11,"cost_func_count","","",140,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",140,[[["self"]]]],[11,"increase_grad_func_count","","",140,[[["self"],["u64"]]]],[11,"grad_func_count","","",140,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",140,[[["self"]]]],[11,"increase_hessian_func_count","","",140,[[["self"],["u64"]]]],[11,"hessian_func_count","","",140,[[["self"]],["u64"]]],[11,"add_logger","","",140,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",140,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",140,[[["self"],["terminationreason"]]]],[11,"terminate","","",140,[[["self"]],["terminationreason"]]],[11,"base_reset","","",140,[[["self"]]]],[11,"run","argmin::solver::linesearch::morethuente","",141,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",141,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",141,N],[11,"gradient","","",141,N],[11,"hessian","","",141,N],[11,"cur_param","","",141,N],[11,"cur_grad","","",141,N],[11,"cur_hessian","","",141,N],[11,"set_cur_param","","",141,N],[11,"set_cur_grad","","",141,N],[11,"set_cur_hessian","","",141,N],[11,"set_best_param","","",141,N],[11,"modify","","",141,N],[11,"result","","",141,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",141,[[["self"],["u64"]]]],[11,"max_iters","","",141,[[["self"]],["u64"]]],[11,"increment_iter","","",141,[[["self"]]]],[11,"cur_iter","","",141,[[["self"]],["u64"]]],[11,"cur_cost","","",141,[[["self"]],["f64"]]],[11,"set_cur_cost","","",141,[[["self"],["f64"]]]],[11,"best_cost","","",141,[[["self"]],["f64"]]],[11,"set_best_cost","","",141,[[["self"],["f64"]]]],[11,"set_target_cost","","",141,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",141,[[["self"]]]],[11,"increase_cost_func_count","","",141,[[["self"],["u64"]]]],[11,"cost_func_count","","",141,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",141,[[["self"]]]],[11,"increase_grad_func_count","","",141,[[["self"],["u64"]]]],[11,"grad_func_count","","",141,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",141,[[["self"]]]],[11,"increase_hessian_func_count","","",141,[[["self"],["u64"]]]],[11,"hessian_func_count","","",141,[[["self"]],["u64"]]],[11,"add_logger","","",141,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",141,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",141,[[["self"],["terminationreason"]]]],[11,"terminate","","",141,[[["self"]],["terminationreason"]]],[11,"base_reset","","",141,[[["self"]]]],[11,"run","argmin::solver::newton::newton","",142,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",142,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",142,N],[11,"gradient","","",142,N],[11,"hessian","","",142,N],[11,"cur_param","","",142,N],[11,"cur_grad","","",142,N],[11,"cur_hessian","","",142,N],[11,"set_cur_param","","",142,N],[11,"set_cur_grad","","",142,N],[11,"set_cur_hessian","","",142,N],[11,"set_best_param","","",142,N],[11,"modify","","",142,N],[11,"result","","",142,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",142,[[["self"],["u64"]]]],[11,"max_iters","","",142,[[["self"]],["u64"]]],[11,"increment_iter","","",142,[[["self"]]]],[11,"cur_iter","","",142,[[["self"]],["u64"]]],[11,"cur_cost","","",142,[[["self"]],["f64"]]],[11,"set_cur_cost","","",142,[[["self"],["f64"]]]],[11,"best_cost","","",142,[[["self"]],["f64"]]],[11,"set_best_cost","","",142,[[["self"],["f64"]]]],[11,"set_target_cost","","",142,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",142,[[["self"]]]],[11,"increase_cost_func_count","","",142,[[["self"],["u64"]]]],[11,"cost_func_count","","",142,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",142,[[["self"]]]],[11,"increase_grad_func_count","","",142,[[["self"],["u64"]]]],[11,"grad_func_count","","",142,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",142,[[["self"]]]],[11,"increase_hessian_func_count","","",142,[[["self"],["u64"]]]],[11,"hessian_func_count","","",142,[[["self"]],["u64"]]],[11,"add_logger","","",142,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",142,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",142,[[["self"],["terminationreason"]]]],[11,"terminate","","",142,[[["self"]],["terminationreason"]]],[11,"base_reset","","",142,[[["self"]]]],[11,"run","argmin::solver::newton::newton_cg","",143,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",143,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",143,N],[11,"gradient","","",143,N],[11,"hessian","","",143,N],[11,"cur_param","","",143,N],[11,"cur_grad","","",143,N],[11,"cur_hessian","","",143,N],[11,"set_cur_param","","",143,N],[11,"set_cur_grad","","",143,N],[11,"set_cur_hessian","","",143,N],[11,"set_best_param","","",143,N],[11,"modify","","",143,N],[11,"result","","",143,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",143,[[["self"],["u64"]]]],[11,"max_iters","","",143,[[["self"]],["u64"]]],[11,"increment_iter","","",143,[[["self"]]]],[11,"cur_iter","","",143,[[["self"]],["u64"]]],[11,"cur_cost","","",143,[[["self"]],["f64"]]],[11,"set_cur_cost","","",143,[[["self"],["f64"]]]],[11,"best_cost","","",143,[[["self"]],["f64"]]],[11,"set_best_cost","","",143,[[["self"],["f64"]]]],[11,"set_target_cost","","",143,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",143,[[["self"]]]],[11,"increase_cost_func_count","","",143,[[["self"],["u64"]]]],[11,"cost_func_count","","",143,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",143,[[["self"]]]],[11,"increase_grad_func_count","","",143,[[["self"],["u64"]]]],[11,"grad_func_count","","",143,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",143,[[["self"]]]],[11,"increase_hessian_func_count","","",143,[[["self"],["u64"]]]],[11,"hessian_func_count","","",143,[[["self"]],["u64"]]],[11,"add_logger","","",143,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",143,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",143,[[["self"],["terminationreason"]]]],[11,"terminate","","",143,[[["self"]],["terminationreason"]]],[11,"base_reset","","",143,[[["self"]]]],[11,"run","argmin::solver::simulatedannealing","",145,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",145,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",145,N],[11,"gradient","","",145,N],[11,"hessian","","",145,N],[11,"cur_param","","",145,N],[11,"cur_grad","","",145,N],[11,"cur_hessian","","",145,N],[11,"set_cur_param","","",145,N],[11,"set_cur_grad","","",145,N],[11,"set_cur_hessian","","",145,N],[11,"set_best_param","","",145,N],[11,"modify","","",145,N],[11,"result","","",145,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",145,[[["self"],["u64"]]]],[11,"max_iters","","",145,[[["self"]],["u64"]]],[11,"increment_iter","","",145,[[["self"]]]],[11,"cur_iter","","",145,[[["self"]],["u64"]]],[11,"cur_cost","","",145,[[["self"]],["f64"]]],[11,"set_cur_cost","","",145,[[["self"],["f64"]]]],[11,"best_cost","","",145,[[["self"]],["f64"]]],[11,"set_best_cost","","",145,[[["self"],["f64"]]]],[11,"set_target_cost","","",145,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",145,[[["self"]]]],[11,"increase_cost_func_count","","",145,[[["self"],["u64"]]]],[11,"cost_func_count","","",145,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",145,[[["self"]]]],[11,"increase_grad_func_count","","",145,[[["self"],["u64"]]]],[11,"grad_func_count","","",145,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",145,[[["self"]]]],[11,"increase_hessian_func_count","","",145,[[["self"],["u64"]]]],[11,"hessian_func_count","","",145,[[["self"]],["u64"]]],[11,"add_logger","","",145,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",145,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",145,[[["self"],["terminationreason"]]]],[11,"terminate","","",145,[[["self"]],["terminationreason"]]],[11,"base_reset","","",145,[[["self"]]]],[11,"run","argmin::solver::trustregion::cauchypoint","",146,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",146,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",146,N],[11,"gradient","","",146,N],[11,"hessian","","",146,N],[11,"cur_param","","",146,N],[11,"cur_grad","","",146,N],[11,"cur_hessian","","",146,N],[11,"set_cur_param","","",146,N],[11,"set_cur_grad","","",146,N],[11,"set_cur_hessian","","",146,N],[11,"set_best_param","","",146,N],[11,"modify","","",146,N],[11,"result","","",146,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",146,[[["self"],["u64"]]]],[11,"max_iters","","",146,[[["self"]],["u64"]]],[11,"increment_iter","","",146,[[["self"]]]],[11,"cur_iter","","",146,[[["self"]],["u64"]]],[11,"cur_cost","","",146,[[["self"]],["f64"]]],[11,"set_cur_cost","","",146,[[["self"],["f64"]]]],[11,"best_cost","","",146,[[["self"]],["f64"]]],[11,"set_best_cost","","",146,[[["self"],["f64"]]]],[11,"set_target_cost","","",146,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",146,[[["self"]]]],[11,"increase_cost_func_count","","",146,[[["self"],["u64"]]]],[11,"cost_func_count","","",146,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",146,[[["self"]]]],[11,"increase_grad_func_count","","",146,[[["self"],["u64"]]]],[11,"grad_func_count","","",146,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",146,[[["self"]]]],[11,"increase_hessian_func_count","","",146,[[["self"],["u64"]]]],[11,"hessian_func_count","","",146,[[["self"]],["u64"]]],[11,"add_logger","","",146,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",146,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",146,[[["self"],["terminationreason"]]]],[11,"terminate","","",146,[[["self"]],["terminationreason"]]],[11,"base_reset","","",146,[[["self"]]]],[11,"run","argmin::solver::trustregion::dogleg","",147,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",147,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",147,N],[11,"gradient","","",147,N],[11,"hessian","","",147,N],[11,"cur_param","","",147,N],[11,"cur_grad","","",147,N],[11,"cur_hessian","","",147,N],[11,"set_cur_param","","",147,N],[11,"set_cur_grad","","",147,N],[11,"set_cur_hessian","","",147,N],[11,"set_best_param","","",147,N],[11,"modify","","",147,N],[11,"result","","",147,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",147,[[["self"],["u64"]]]],[11,"max_iters","","",147,[[["self"]],["u64"]]],[11,"increment_iter","","",147,[[["self"]]]],[11,"cur_iter","","",147,[[["self"]],["u64"]]],[11,"cur_cost","","",147,[[["self"]],["f64"]]],[11,"set_cur_cost","","",147,[[["self"],["f64"]]]],[11,"best_cost","","",147,[[["self"]],["f64"]]],[11,"set_best_cost","","",147,[[["self"],["f64"]]]],[11,"set_target_cost","","",147,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",147,[[["self"]]]],[11,"increase_cost_func_count","","",147,[[["self"],["u64"]]]],[11,"cost_func_count","","",147,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",147,[[["self"]]]],[11,"increase_grad_func_count","","",147,[[["self"],["u64"]]]],[11,"grad_func_count","","",147,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",147,[[["self"]]]],[11,"increase_hessian_func_count","","",147,[[["self"],["u64"]]]],[11,"hessian_func_count","","",147,[[["self"]],["u64"]]],[11,"add_logger","","",147,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",147,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",147,[[["self"],["terminationreason"]]]],[11,"terminate","","",147,[[["self"]],["terminationreason"]]],[11,"base_reset","","",147,[[["self"]]]],[11,"run","argmin::solver::trustregion::steihaug","",148,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",148,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",148,N],[11,"gradient","","",148,N],[11,"hessian","","",148,N],[11,"cur_param","","",148,N],[11,"cur_grad","","",148,N],[11,"cur_hessian","","",148,N],[11,"set_cur_param","","",148,N],[11,"set_cur_grad","","",148,N],[11,"set_cur_hessian","","",148,N],[11,"set_best_param","","",148,N],[11,"modify","","",148,N],[11,"result","","",148,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",148,[[["self"],["u64"]]]],[11,"max_iters","","",148,[[["self"]],["u64"]]],[11,"increment_iter","","",148,[[["self"]]]],[11,"cur_iter","","",148,[[["self"]],["u64"]]],[11,"cur_cost","","",148,[[["self"]],["f64"]]],[11,"set_cur_cost","","",148,[[["self"],["f64"]]]],[11,"best_cost","","",148,[[["self"]],["f64"]]],[11,"set_best_cost","","",148,[[["self"],["f64"]]]],[11,"set_target_cost","","",148,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",148,[[["self"]]]],[11,"increase_cost_func_count","","",148,[[["self"],["u64"]]]],[11,"cost_func_count","","",148,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",148,[[["self"]]]],[11,"increase_grad_func_count","","",148,[[["self"],["u64"]]]],[11,"grad_func_count","","",148,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",148,[[["self"]]]],[11,"increase_hessian_func_count","","",148,[[["self"],["u64"]]]],[11,"hessian_func_count","","",148,[[["self"]],["u64"]]],[11,"add_logger","","",148,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",148,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",148,[[["self"],["terminationreason"]]]],[11,"terminate","","",148,[[["self"]],["terminationreason"]]],[11,"base_reset","","",148,[[["self"]]]],[11,"run","argmin::solver::trustregion::trustregion","",149,[[["self"]],["result",["argminresult","error"]]]],[11,"run_fast","","",149,[[["self"]],["result",["argminresult","error"]]]],[11,"apply","","",149,N],[11,"gradient","","",149,N],[11,"hessian","","",149,N],[11,"cur_param","","",149,N],[11,"cur_grad","","",149,N],[11,"cur_hessian","","",149,N],[11,"set_cur_param","","",149,N],[11,"set_cur_grad","","",149,N],[11,"set_cur_hessian","","",149,N],[11,"set_best_param","","",149,N],[11,"modify","","",149,N],[11,"result","","",149,[[["self"]],["argminresult"]]],[11,"set_max_iters","","",149,[[["self"],["u64"]]]],[11,"max_iters","","",149,[[["self"]],["u64"]]],[11,"increment_iter","","",149,[[["self"]]]],[11,"cur_iter","","",149,[[["self"]],["u64"]]],[11,"cur_cost","","",149,[[["self"]],["f64"]]],[11,"set_cur_cost","","",149,[[["self"],["f64"]]]],[11,"best_cost","","",149,[[["self"]],["f64"]]],[11,"set_best_cost","","",149,[[["self"],["f64"]]]],[11,"set_target_cost","","",149,[[["self"],["f64"]]]],[11,"increment_cost_func_count","","",149,[[["self"]]]],[11,"increase_cost_func_count","","",149,[[["self"],["u64"]]]],[11,"cost_func_count","","",149,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","",149,[[["self"]]]],[11,"increase_grad_func_count","","",149,[[["self"],["u64"]]]],[11,"grad_func_count","","",149,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","",149,[[["self"]]]],[11,"increase_hessian_func_count","","",149,[[["self"],["u64"]]]],[11,"hessian_func_count","","",149,[[["self"]],["u64"]]],[11,"add_logger","","",149,[[["self"],["box",["argminlog"]]]]],[11,"add_writer","","",149,[[["self"],["box",["argminwrite"]]]]],[11,"set_termination_reason","","",149,[[["self"],["terminationreason"]]]],[11,"terminate","","",149,[[["self"]],["terminationreason"]]],[11,"base_reset","","",149,[[["self"]]]],[11,"init","argmin::solver::conjugategradient::cg","",126,[[["self"]],["result",["error"]]]],[11,"next_iter","","Perform one iteration of SA algorithm",126,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::conjugategradient::nonlinear_cg","",127,[[["self"]],["result",["error"]]]],[11,"next_iter","","Perform one iteration of SA algorithm",127,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"next_iter","argmin::solver::gradientdescent::steepestdescent","Perform one iteration of SA algorithm",132,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"next_iter","argmin::solver::landweber","",133,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"next_iter","argmin::solver::linesearch::backtracking","",134,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::linesearch::hagerzhang","",140,[[["self"]],["result",["error"]]]],[11,"next_iter","","",140,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::linesearch::morethuente","",141,[[["self"]],["result",["error"]]]],[11,"next_iter","","",141,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"next_iter","argmin::solver::newton::newton","",142,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"next_iter","argmin::solver::newton::newton_cg","",143,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"next_iter","argmin::solver::simulatedannealing","Perform one iteration of SA algorithm",145,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::trustregion::cauchypoint","",146,[[["self"]],["result",["error"]]]],[11,"next_iter","","",146,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::trustregion::dogleg","",147,[[["self"]],["result",["error"]]]],[11,"next_iter","","",147,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::trustregion::steihaug","",148,[[["self"]],["result",["error"]]]],[11,"next_iter","","",148,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"init","argmin::solver::trustregion::trustregion","",149,[[["self"]],["result",["error"]]]],[11,"next_iter","","",149,[[["self"]],["result",["argminiterationdata","error"]]]],[11,"set_search_direction","argmin::solver::linesearch::backtracking","Set search direction",134,[[["self"],["t"]]]],[11,"set_initial_parameter","","Set initial parameter",134,[[["self"],["t"]]]],[11,"set_initial_alpha","","Set initial alpha value",134,[[["self"],["f64"]],["result",["error"]]]],[11,"set_initial_cost","","Set initial cost function value",134,[[["self"],["f64"]]]],[11,"set_initial_gradient","","Set initial gradient",134,[[["self"],["t"]]]],[11,"calc_initial_cost","","Calculate initial cost function value",134,[[["self"]],["result",["error"]]]],[11,"calc_initial_gradient","","Calculate initial cost function value",134,[[["self"]],["result",["error"]]]],[11,"set_search_direction","argmin::solver::linesearch::hagerzhang","Set search direction",140,[[["self"],["t"]]]],[11,"set_initial_parameter","","Set initial parameter",140,[[["self"],["t"]]]],[11,"set_initial_cost","","Set initial cost function value",140,[[["self"],["f64"]]]],[11,"set_initial_gradient","","Set initial gradient",140,[[["self"],["t"]]]],[11,"calc_initial_cost","","Calculate initial cost function value",140,[[["self"]],["result",["error"]]]],[11,"calc_initial_gradient","","Calculate initial cost function value",140,[[["self"]],["result",["error"]]]],[11,"set_initial_alpha","","Set initial alpha value",140,[[["self"],["f64"]],["result",["error"]]]],[11,"set_search_direction","argmin::solver::linesearch::morethuente","Set search direction",141,[[["self"],["t"]]]],[11,"set_initial_parameter","","Set initial parameter",141,[[["self"],["t"]]]],[11,"set_initial_cost","","Set initial cost function value",141,[[["self"],["f64"]]]],[11,"set_initial_gradient","","Set initial gradient",141,[[["self"],["t"]]]],[11,"calc_initial_cost","","Calculate initial cost function value",141,[[["self"]],["result",["error"]]]],[11,"calc_initial_gradient","","Calculate initial cost function value",141,[[["self"]],["result",["error"]]]],[11,"set_initial_alpha","","Set initial alpha value",141,[[["self"],["f64"]],["result",["error"]]]],[11,"set_radius","argmin::solver::trustregion::cauchypoint","",146,[[["self"],["f64"]]]],[11,"set_grad","","",146,[[["self"],["t"]]]],[11,"set_hessian","","",146,[[["self"],["h"]]]],[11,"set_radius","argmin::solver::trustregion::dogleg","",147,[[["self"],["f64"]]]],[11,"set_grad","","",147,[[["self"],["t"]]]],[11,"set_hessian","","",147,[[["self"],["h"]]]],[11,"set_radius","argmin::solver::trustregion::steihaug","",148,[[["self"],["f64"]]]],[11,"set_grad","","",148,[[["self"],["t"]]]],[11,"set_hessian","","",148,[[["self"],["h"]]]],[11,"update","argmin::solver::conjugategradient::beta","",128,[[["self"],["t"],["t"],["t"]],["f64"]]],[11,"update","","",129,[[["self"],["t"],["t"],["t"]],["f64"]]],[11,"update","","",130,[[["self"],["t"],["t"],["t"]],["f64"]]],[11,"update","","",131,[[["self"],["t"],["t"],["t"]],["f64"]]],[11,"new","argmin::prelude","Constructor",150,[[["t"],["f64"]],["argminiterationdata"]]],[11,"param","","Returns the parameter vector",150,[[["self"]],["t"]]],[11,"cost","","Returns the cost function value",150,[[["self"]],["f64"]]],[11,"add_kv","","Adds an `ArgminKV`",150,[[["self"],["argminkv"]],["argminiterationdata"]]],[11,"get_kv","","Returns an `ArgminKV`",150,[[["self"]],["option",["argminkv"]]]],[11,"new","","",151,[[],["nooperator"]]],[11,"terminated","","Returns `true` if a solver terminated and `false` otherwise",8,[[["self"]],["bool"]]],[11,"text","","Returns a texual representation of what happened",8,[[["self"]],["str"]]],[11,"new","","Constructor",10,[[],["argminkv"]]],[11,"push","","Push a key-value pair to the `kv` vector.",10,[[["self"],["str"],["t"]],["argminkv"]]],[11,"merge","","Merge another `kv` into `self.kv`",10,[[["self"],["argminkv"]],["argminkv"]]],[11,"new","","Constructor",12,[[["t"],["f64"],["u64"],["terminationreason"]],["argminresult"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",152,[[["box",["error"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",152,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",152,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",152,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",152,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",152,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",152,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",152,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",152,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",152,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",152,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",152,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",152,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",152,[[["self"]],["causes"]]],[11,"new","","",153,[[],["argminwriter"]]],[11,"push","","",153,[[["self"],["box",["argminwrite"]]],["argminwriter"]]],[11,"new","","Constructor",154,[[],["argminlogger"]]],[11,"push","","Push another `ArgminLog` to the `logger` field",154,[[["self"],["box",["argminlog"]]],["argminlogger"]]],[11,"new","","Constructor",155,[[["box",["argminoperator"]],["t"]],["argminbase"]]],[11,"kv_for_logs","","Return the KV for the initial logging",155,[[["self"]],["argminkv"]]],[11,"kv_for_iter","","Return the KV for logging of the iterations",155,[[["self"]],["argminkv"]]],[11,"reset","","Reset `self` to its initial state.",155,N],[11,"operator","","Return the operator (TODO: Check if this is still necessary!)",155,[[["self"]],["box"]]],[11,"apply","","Apply the operator to `param`",155,[[["self"],["t"]],["result",["error"]]]],[11,"gradient","","Compute the gradient at `param`",155,[[["self"],["t"]],["result",["error"]]]],[11,"hessian","","Compute the hessian at `param`",155,[[["self"],["t"]],["result",["error"]]]],[11,"modify","","Modify a `param` with the `modify` method of `operator`.",155,[[["self"],["t"],["f64"]],["result",["error"]]]],[11,"set_cur_param","","Set the current parameter vector",155,[[["self"],["t"]],["argminbase"]]],[11,"cur_param","","Return the current parameter vector",155,[[["self"]],["t"]]],[11,"set_best_param","","Set the new best parameter vector",155,[[["self"],["t"]],["argminbase"]]],[11,"best_param","","Return the current best parameter vector",155,[[["self"]],["t"]]],[11,"set_cur_cost","","Set the current cost function value",155,[[["self"],["f64"]],["argminbase"]]],[11,"cur_cost","","Return the current cost function value",155,[[["self"]],["f64"]]],[11,"set_best_cost","","Set the cost function value of the current best parameter vector",155,[[["self"],["f64"]],["argminbase"]]],[11,"best_cost","","Return the cost function value of the current best parameter vector",155,[[["self"]],["f64"]]],[11,"set_cur_grad","","Set the current gradient",155,[[["self"],["t"]],["argminbase"]]],[11,"cur_grad","","Return the current gradient",155,[[["self"]],["t"]]],[11,"set_cur_hessian","","Set the current hessian",155,[[["self"],["h"]],["argminbase"]]],[11,"cur_hessian","","Return the current hessian",155,[[["self"]],["h"]]],[11,"set_target_cost","","Set the target cost function value",155,[[["self"],["f64"]],["argminbase"]]],[11,"target_cost","","Return the target cost function value",155,[[["self"]],["f64"]]],[11,"increment_iter","","Increment the number of iterations.",155,[[["self"]],["argminbase"]]],[11,"cur_iter","","Return the current number of iterations",155,[[["self"]],["u64"]]],[11,"increment_cost_func_count","","Increment the cost function evaluation count",155,[[["self"]],["argminbase"]]],[11,"increase_cost_func_count","","Increaese the cost function evaluation count by a given value",155,[[["self"],["u64"]],["argminbase"]]],[11,"cost_func_count","","Return the cost function evaluation count",155,[[["self"]],["u64"]]],[11,"increment_grad_func_count","","Increment the gradient evaluation count",155,[[["self"]],["argminbase"]]],[11,"increase_grad_func_count","","Increase the gradient evaluation count by a given value",155,[[["self"],["u64"]],["argminbase"]]],[11,"grad_func_count","","Return the gradient evaluation count",155,[[["self"]],["u64"]]],[11,"increment_hessian_func_count","","Increment the hessian evaluation count",155,[[["self"]],["argminbase"]]],[11,"increase_hessian_func_count","","Increase the hessian evaluation count by a given value",155,[[["self"],["u64"]],["argminbase"]]],[11,"hessian_func_count","","Return the gradient evaluation count",155,[[["self"]],["u64"]]],[11,"set_max_iters","","Set the maximum number of iterations.",155,[[["self"],["u64"]],["argminbase"]]],[11,"max_iters","","Return the maximum number of iterations",155,[[["self"]],["u64"]]],[11,"set_termination_reason","","Set the `TerminationReason`",155,[[["self"],["terminationreason"]],["argminbase"]]],[11,"termination_reason","","Return the `TerminationReason`",155,[[["self"]],["terminationreason"]]],[11,"termination_reason_text","","Return the textual representation of the `TerminationReason`",155,[[["self"]],["str"]]],[11,"terminated","","Return whether the algorithm has terminated or not",155,[[["self"]],["bool"]]],[11,"result","","Return the result.",155,[[["self"]],["argminresult"]]],[11,"set_total_time","","Set the total time needed by the solver",155,[[["self"],["duration"]],["argminbase"]]],[11,"total_time","","Return the total time",155,[[["self"]],["duration"]]],[11,"add_logger","","Add a logger to the list of loggers",155,[[["self"],["box",["argminlog"]]],["argminbase"]]],[11,"add_writer","","Add a writer to the list of writers",155,[[["self"],["box",["argminwrite"]]],["argminbase"]]],[11,"log_iter","","Log a `kv`",155,[[["self"],["argminkv"]],["result",["error"]]]],[11,"log_info","","Log a message and a `kv`",155,[[["self"],["str"],["argminkv"]],["result",["error"]]]],[11,"write","","Write (TODO)",155,[[["self"],["t"]],["result",["error"]]]],[11,"term","","Log to the terminal in a blocking way",156,[[],["box",["argminsloglogger"]]]],[11,"term_noblock","","Log to the terminal in a non-blocking way (in case of overflow, messages are dropped)",156,[[],["box",["argminsloglogger"]]]],[11,"file","","Log JSON to a file in a blocking way",156,[[["str"]],["result",["box","error"]]]],[11,"file_noblock","","Log JSON to a file in a non-blocking way (in case of overflow, messages are dropped)",156,[[["str"]],["result",["box","error"]]]],[11,"downcast_ref","argmin::prelude::failure","Attempts to downcast this failure to a concrete type by reference.",17,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",17,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",17,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",17,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",17,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",17,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_chain`.",17,[[["self"]],["causes"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",158,[[["e"]],["syncfailure"]]],[11,"new_unchecked","argmin::prelude::failure::_core::num","Create a non-zero without checking the value.",159,[[["u8"]],["nonzerou8"]]],[11,"new","","Create a non-zero if the given value is not zero.",159,[[["u8"]],["option",["nonzerou8"]]]],[11,"get","","Returns the value as a primitive type.",159,[[["self"]],["u8"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",160,[[["u16"]],["nonzerou16"]]],[11,"new","","Create a non-zero if the given value is not zero.",160,[[["u16"]],["option",["nonzerou16"]]]],[11,"get","","Returns the value as a primitive type.",160,[[["self"]],["u16"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",161,[[["u32"]],["nonzerou32"]]],[11,"new","","Create a non-zero if the given value is not zero.",161,[[["u32"]],["option",["nonzerou32"]]]],[11,"get","","Returns the value as a primitive type.",161,[[["self"]],["u32"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",162,[[["u64"]],["nonzerou64"]]],[11,"new","","Create a non-zero if the given value is not zero.",162,[[["u64"]],["option",["nonzerou64"]]]],[11,"get","","Returns the value as a primitive type.",162,[[["self"]],["u64"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",163,[[["u128"]],["nonzerou128"]]],[11,"new","","Create a non-zero if the given value is not zero.",163,[[["u128"]],["option",["nonzerou128"]]]],[11,"get","","Returns the value as a primitive type.",163,[[["self"]],["u128"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",164,[[["usize"]],["nonzerousize"]]],[11,"new","","Create a non-zero if the given value is not zero.",164,[[["usize"]],["option",["nonzerousize"]]]],[11,"get","","Returns the value as a primitive type.",164,[[["self"]],["usize"]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["usize"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["usize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["usize"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["usize"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["usize"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["usize"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["usize"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["usize"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["usize"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["u8"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["u8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["u8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["u8"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["u8"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["u8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["u8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["u16"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["u16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["u16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["u16"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["u16"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["u16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["u16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["u32"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["u32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["u32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["u32"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["u32"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["u32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["u64"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["u64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u64"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u64"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["u64"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["u64"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["u64"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["u64"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["u64"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["u128"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["u128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["u128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["u128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["u128"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["u128"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["u128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["u128"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["isize"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["isize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["isize"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["isize"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["isize"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["isize"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["isize"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["isize"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["isize"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["i8"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["i8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["i8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["i8"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["i8"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["i8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["i8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["i16"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["i16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["i16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["i16"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["i16"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["i16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["i16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["i32"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["i32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["i32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["i32"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["i32"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["i32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["i32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["i64"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["i64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i64"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i64"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["i64"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["i64"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["i64"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["i64"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["i64"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",18,[[],["wrapping",["i128"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",18,[[],["wrapping",["i128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["u32"]],["wrapping",["i128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",18,[[["self"]],["wrapping",["i128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",18,[[["self"]],["wrapping",["i128"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",18,[[["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",18,[[["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",18,[[["self"]],["wrapping",["i128"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",18,[[["self"]],["wrapping",["i128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,[[["self"],["u32"]],["wrapping",["i128"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",18,[[["self"]],["wrapping",["isize"]]]],[11,"signum","","Returns a number representing sign of `self`.",18,[[["self"]],["wrapping",["isize"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",18,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",18,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",18,[[["self"]],["wrapping",["i8"]]]],[11,"signum","","Returns a number representing sign of `self`.",18,[[["self"]],["wrapping",["i8"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",18,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",18,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",18,[[["self"]],["wrapping",["i16"]]]],[11,"signum","","Returns a number representing sign of `self`.",18,[[["self"]],["wrapping",["i16"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",18,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",18,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",18,[[["self"]],["wrapping",["i32"]]]],[11,"signum","","Returns a number representing sign of `self`.",18,[[["self"]],["wrapping",["i32"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",18,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",18,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",18,[[["self"]],["wrapping",["i64"]]]],[11,"signum","","Returns a number representing sign of `self`.",18,[[["self"]],["wrapping",["i64"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",18,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",18,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",18,[[["self"]],["wrapping",["i128"]]]],[11,"signum","","Returns a number representing sign of `self`.",18,[[["self"]],["wrapping",["i128"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",18,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",18,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",18,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",18,[[["self"]],["wrapping",["usize"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",18,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",18,[[["self"]],["wrapping",["u8"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",18,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",18,[[["self"]],["wrapping",["u16"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",18,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",18,[[["self"]],["wrapping",["u32"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",18,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",18,[[["self"]],["wrapping",["u64"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",18,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",18,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",18,[[["self"]],["wrapping",["u128"]]]],[11,"is_ok","argmin::prelude::failure::_core::prelude::v1","Returns `true` if the result is [`Ok`].",26,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",26,[[["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",26,[[["self"]],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",26,[[["self"]],["option"]]],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",26,[[["self"]],["result"]]],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",26,[[["self"]],["result"]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",26,[[["self"],["f"]],["result"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a contained [`Ok`] value, or a fallback function to a contained [`Err`] value.",26,[[["self"],["f"],["m"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",26,[[["self"],["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",26,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",26,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",26,[[["self"],["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",26,[[["self"],["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",26,[[["self"],["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",26,[[["self"],["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",26,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",26,[[["self"],["f"]],["t"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",26,[[["self"]],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",26,[[["self"],["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",26,[[["self"]],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",26,[[["self"],["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",26,[[["self"]],["t"]]],[11,"deref_ok","","Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.",26,[[["self"]],["result"]]],[11,"deref_err","","Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.",26,[[["self"]],["result"]]],[11,"deref","","Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.",26,[[["self"]],["result"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",26,[[["self"]],["option",["result"]]]],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",27,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",27,[[["self"]],["bool"]]],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",27,[[["self"]],["option"]]],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",27,[[["self"]],["option"]]],[11,"as_pin_ref","","Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`",27,[[["pin",["option"]]],["option",["pin"]]]],[11,"as_pin_mut","","Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`",27,[[["pin",["option"]]],["option",["pin"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",27,[[["self"],["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",27,[[["self"]],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",27,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",27,[[["self"],["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",27,[[["self"],["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",27,[[["self"],["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",27,[[["self"],["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",27,[[["self"],["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",27,[[["self"],["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",27,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",27,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",27,[[["self"],["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",27,[[["self"],["f"]],["option"]]],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",27,[[["self"],["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",27,[[["self"],["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",27,[[["self"],["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",27,[[["self"],["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",27,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",27,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",27,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a [`Some`] in its place without deinitializing either one.",27,[[["self"],["t"]],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",27,[[["self"]],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",27,[[["self"]],["option"]]],[11,"unwrap_or_default","","Returns the contained value or a default",27,[[["self"]],["t"]]],[11,"deref","","Converts from `&Option<T>` to `Option<&T::Target>`.",27,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",27,[[["self"]],["result",["option"]]]],[11,"new","argmin::prelude::failure::_core::mem","Wrap a value to be manually dropped.",168,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extract the value from the `ManuallyDrop` container.",168,[[["manuallydrop"]],["t"]]],[11,"take","","Takes the contained value out.",168,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",168,N],[11,"new","","Create a new `MaybeUninit` initialized with the given value.",169,[[["t"]],["maybeuninit"]]],[11,"uninitialized","","Create a new `MaybeUninit` in an uninitialized state.",169,[[],["maybeuninit"]]],[11,"zeroed","","Create a new `MaybeUninit` in an uninitialized state, with the memory being filled with `0` bytes.  It depends on `T` whether that already makes for proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized, but `MaybeUninit<&'static i32>::zeroed()` is not because references must not be null.",169,[[],["maybeuninit"]]],[11,"set","","Set the value of the `MaybeUninit`. This overwrites any previous value without dropping it.",169,N],[11,"into_inner","","Extract the value from the `MaybeUninit` container.  This is a great way to ensure that the data will get dropped, because the resulting `T` is subject to the usual drop handling.",169,[[["self"]],["t"]]],[11,"get_ref","","Get a reference to the contained value.",169,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the contained value.",169,[[["self"]],["t"]]],[11,"as_ptr","","Get a pointer to the contained value. Reading from this pointer will be undefined behavior unless the `MaybeUninit` is initialized.",169,N],[11,"as_mut_ptr","","Get a mutable pointer to the contained value. Reading from this pointer will be undefined behavior unless the `MaybeUninit` is initialized.",169,N],[11,"dangling","argmin::prelude::failure::_core::ptr","Creates a new `NonNull` that is dangling, but well-aligned.",170,[[],["nonnull"]]],[11,"new_unchecked","","Creates a new `NonNull`.",170,N],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",170,N],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",170,N],[11,"as_ref","","Dereferences the content.",170,[[["self"]],["t"]]],[11,"as_mut","","Mutably dereferences the content.",170,[[["self"]],["t"]]],[11,"cast","","Cast to a pointer of another type",170,[[["self"]],["nonnull"]]],[11,"contains","argmin::prelude::failure::_core::ops","Returns `true` if `item` is contained in the range.",55,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",55,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",62,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",68,[[["self"],["u"]],["bool"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing `start..=end`.",174,[[["idx"],["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",174,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",174,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).",174,N],[11,"contains","","Returns `true` if `item` is contained in the range.",174,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",174,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",73,[[["self"],["u"]],["bool"]]],[11,"reverse","argmin::prelude::failure::_core::cmp","Reverses the `Ordering`.",75,[[["self"]],["ordering"]]],[11,"then","","Chains two orderings.",75,[[["self"],["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",75,[[["self"],["f"]],["ordering"]]],[11,"is","argmin::prelude::failure::_core::any","Returns `true` if the boxed type is the same as `T`.",81,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",81,[[["self"]],["option"]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",81,[[["self"]],["option"]]],[11,"is","","Forwards to the method defined on the type `Any`.",81,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",81,[[["self"]],["option"]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",81,[[["self"]],["option"]]],[11,"is","","Forwards to the method defined on the type `Any`.",81,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",81,[[["self"]],["option"]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",81,[[["self"]],["option"]]],[11,"of","","Returns the `TypeId` of the type this generic function has been instantiated with.",175,[[],["typeid"]]],[11,"new","argmin::prelude::failure::_core::sync::atomic","Creates a new `AtomicBool`.",178,[[["bool"]],["atomicbool"]]],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",178,[[["self"]],["bool"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",178,[[["self"]],["bool"]]],[11,"load","","Loads a value from the bool.",178,[[["self"],["ordering"]],["bool"]]],[11,"store","","Stores a value into the bool.",178,N],[11,"swap","","Stores a value into the bool, returning the previous value.",178,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",178,[[["self"],["bool"],["bool"],["ordering"]],["bool"]]],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",178,[[["self"],["bool"],["bool"],["ordering"],["ordering"]],["result",["bool","bool"]]]],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",178,[[["self"],["bool"],["bool"],["ordering"],["ordering"]],["result",["bool","bool"]]]],[11,"fetch_and","","Logical \"and\" with a boolean value.",178,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",178,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_or","","Logical \"or\" with a boolean value.",178,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",178,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"new","","Creates a new `AtomicPtr`.",179,N],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",179,N],[11,"into_inner","","Consumes the atomic and returns the contained value.",179,N],[11,"load","","Loads a value from the pointer.",179,N],[11,"store","","Stores a value into the pointer.",179,N],[11,"swap","","Stores a value into the pointer, returning the previous value.",179,N],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",179,N],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",179,N],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",179,N],[11,"new","","Creates a new atomic integer.",180,[[["i8"]],["atomici8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",180,[[["self"]],["i8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",180,[[["self"]],["i8"]]],[11,"load","","Loads a value from the atomic integer.",180,[[["self"],["ordering"]],["i8"]]],[11,"store","","Stores a value into the atomic integer.",180,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",180,[[["self"],["i8"],["i8"],["ordering"]],["i8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",180,[[["self"],["i8"],["i8"],["ordering"],["ordering"]],["result",["i8","i8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",180,[[["self"],["i8"],["i8"],["ordering"],["ordering"]],["result",["i8","i8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",180,[[["self"],["f"],["ordering"],["ordering"]],["result",["i8","i8"]]]],[11,"fetch_max","","Maximum with the current value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_min","","Minimum with the current value.",180,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"new","","Creates a new atomic integer.",181,[[["u8"]],["atomicu8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",181,[[["self"]],["u8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",181,[[["self"]],["u8"]]],[11,"load","","Loads a value from the atomic integer.",181,[[["self"],["ordering"]],["u8"]]],[11,"store","","Stores a value into the atomic integer.",181,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",181,[[["self"],["u8"],["u8"],["ordering"]],["u8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",181,[[["self"],["u8"],["u8"],["ordering"],["ordering"]],["result",["u8","u8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",181,[[["self"],["u8"],["u8"],["ordering"],["ordering"]],["result",["u8","u8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",181,[[["self"],["f"],["ordering"],["ordering"]],["result",["u8","u8"]]]],[11,"fetch_max","","Maximum with the current value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_min","","Minimum with the current value.",181,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"new","","Creates a new atomic integer.",182,[[["i16"]],["atomici16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",182,[[["self"]],["i16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",182,[[["self"]],["i16"]]],[11,"load","","Loads a value from the atomic integer.",182,[[["self"],["ordering"]],["i16"]]],[11,"store","","Stores a value into the atomic integer.",182,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",182,[[["self"],["i16"],["i16"],["ordering"]],["i16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",182,[[["self"],["i16"],["i16"],["ordering"],["ordering"]],["result",["i16","i16"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",182,[[["self"],["i16"],["i16"],["ordering"],["ordering"]],["result",["i16","i16"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",182,[[["self"],["f"],["ordering"],["ordering"]],["result",["i16","i16"]]]],[11,"fetch_max","","Maximum with the current value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_min","","Minimum with the current value.",182,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"new","","Creates a new atomic integer.",183,[[["u16"]],["atomicu16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",183,[[["self"]],["u16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",183,[[["self"]],["u16"]]],[11,"load","","Loads a value from the atomic integer.",183,[[["self"],["ordering"]],["u16"]]],[11,"store","","Stores a value into the atomic integer.",183,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",183,[[["self"],["u16"],["u16"],["ordering"]],["u16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",183,[[["self"],["u16"],["u16"],["ordering"],["ordering"]],["result",["u16","u16"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",183,[[["self"],["u16"],["u16"],["ordering"],["ordering"]],["result",["u16","u16"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",183,[[["self"],["f"],["ordering"],["ordering"]],["result",["u16","u16"]]]],[11,"fetch_max","","Maximum with the current value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_min","","Minimum with the current value.",183,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"new","","Creates a new atomic integer.",184,[[["i32"]],["atomici32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",184,[[["self"]],["i32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",184,[[["self"]],["i32"]]],[11,"load","","Loads a value from the atomic integer.",184,[[["self"],["ordering"]],["i32"]]],[11,"store","","Stores a value into the atomic integer.",184,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",184,[[["self"],["i32"],["i32"],["ordering"]],["i32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",184,[[["self"],["i32"],["i32"],["ordering"],["ordering"]],["result",["i32","i32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",184,[[["self"],["i32"],["i32"],["ordering"],["ordering"]],["result",["i32","i32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",184,[[["self"],["f"],["ordering"],["ordering"]],["result",["i32","i32"]]]],[11,"fetch_max","","Maximum with the current value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_min","","Minimum with the current value.",184,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"new","","Creates a new atomic integer.",185,[[["u32"]],["atomicu32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",185,[[["self"]],["u32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",185,[[["self"]],["u32"]]],[11,"load","","Loads a value from the atomic integer.",185,[[["self"],["ordering"]],["u32"]]],[11,"store","","Stores a value into the atomic integer.",185,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",185,[[["self"],["u32"],["u32"],["ordering"]],["u32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",185,[[["self"],["u32"],["u32"],["ordering"],["ordering"]],["result",["u32","u32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",185,[[["self"],["u32"],["u32"],["ordering"],["ordering"]],["result",["u32","u32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",185,[[["self"],["f"],["ordering"],["ordering"]],["result",["u32","u32"]]]],[11,"fetch_max","","Maximum with the current value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_min","","Minimum with the current value.",185,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"new","","Creates a new atomic integer.",186,[[["i64"]],["atomici64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",186,[[["self"]],["i64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",186,[[["self"]],["i64"]]],[11,"load","","Loads a value from the atomic integer.",186,[[["self"],["ordering"]],["i64"]]],[11,"store","","Stores a value into the atomic integer.",186,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",186,[[["self"],["i64"],["i64"],["ordering"]],["i64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",186,[[["self"],["i64"],["i64"],["ordering"],["ordering"]],["result",["i64","i64"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",186,[[["self"],["i64"],["i64"],["ordering"],["ordering"]],["result",["i64","i64"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",186,[[["self"],["f"],["ordering"],["ordering"]],["result",["i64","i64"]]]],[11,"fetch_max","","Maximum with the current value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_min","","Minimum with the current value.",186,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"new","","Creates a new atomic integer.",187,[[["u64"]],["atomicu64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",187,[[["self"]],["u64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",187,[[["self"]],["u64"]]],[11,"load","","Loads a value from the atomic integer.",187,[[["self"],["ordering"]],["u64"]]],[11,"store","","Stores a value into the atomic integer.",187,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",187,[[["self"],["u64"],["u64"],["ordering"]],["u64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",187,[[["self"],["u64"],["u64"],["ordering"],["ordering"]],["result",["u64","u64"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",187,[[["self"],["u64"],["u64"],["ordering"],["ordering"]],["result",["u64","u64"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",187,[[["self"],["f"],["ordering"],["ordering"]],["result",["u64","u64"]]]],[11,"fetch_max","","Maximum with the current value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_min","","Minimum with the current value.",187,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"new","","Creates a new atomic integer.",188,[[["isize"]],["atomicisize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",188,[[["self"]],["isize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",188,[[["self"]],["isize"]]],[11,"load","","Loads a value from the atomic integer.",188,[[["self"],["ordering"]],["isize"]]],[11,"store","","Stores a value into the atomic integer.",188,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",188,[[["self"],["isize"],["isize"],["ordering"]],["isize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",188,[[["self"],["isize"],["isize"],["ordering"],["ordering"]],["result",["isize","isize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",188,[[["self"],["isize"],["isize"],["ordering"],["ordering"]],["result",["isize","isize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",188,[[["self"],["f"],["ordering"],["ordering"]],["result",["isize","isize"]]]],[11,"fetch_max","","Maximum with the current value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_min","","Minimum with the current value.",188,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"new","","Creates a new atomic integer.",189,[[["usize"]],["atomicusize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",189,[[["self"]],["usize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",189,[[["self"]],["usize"]]],[11,"load","","Loads a value from the atomic integer.",189,[[["self"],["ordering"]],["usize"]]],[11,"store","","Stores a value into the atomic integer.",189,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",189,[[["self"],["usize"],["usize"],["ordering"]],["usize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",189,[[["self"],["usize"],["usize"],["ordering"],["ordering"]],["result",["usize","usize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",189,[[["self"],["usize"],["usize"],["ordering"],["ordering"]],["result",["usize","usize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",189,[[["self"],["f"],["ordering"],["ordering"]],["result",["usize","usize"]]]],[11,"fetch_max","","Maximum with the current value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_min","","Minimum with the current value.",189,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"get","argmin::prelude::failure::_core::cell","Returns a copy of the contained value.",190,[[["self"]],["t"]]],[11,"update","","Updates the contained value using a function and returns the new value.",190,[[["self"],["f"]],["t"]]],[11,"new","","Creates a new `Cell` containing the given value.",190,[[["t"]],["cell"]]],[11,"set","","Sets the contained value.",190,N],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",190,N],[11,"replace","","Replaces the contained value, and returns it.",190,[[["self"],["t"]],["t"]]],[11,"into_inner","","Unwraps the value.",190,[[["self"]],["t"]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",190,N],[11,"get_mut","","Returns a mutable reference to the underlying data.",190,[[["self"]],["t"]]],[11,"from_mut","","Returns a `&Cell<T>` from a `&mut T`",190,[[["t"]],["cell"]]],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",190,[[["self"]],["t"]]],[11,"as_slice_of_cells","","Returns a `&[Cell<T>]` from a `&Cell<[T]>`",190,N],[11,"new","","Creates a new `RefCell` containing `value`.",191,[[["t"]],["refcell"]]],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",191,[[["self"]],["t"]]],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",191,[[["self"],["t"]],["t"]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",191,[[["self"],["f"]],["t"]]],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",191,N],[11,"borrow","","Immutably borrows the wrapped value.",191,[[["self"]],["ref"]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",191,[[["self"]],["result",["ref","borrowerror"]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",191,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",191,[[["self"]],["result",["refmut","borrowmuterror"]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",191,N],[11,"get_mut","","Returns a mutable reference to the underlying data.",191,[[["self"]],["t"]]],[11,"clone","","Copies a `Ref`.",194,[[["ref"]],["ref"]]],[11,"map","","Make a new `Ref` for a component of the borrowed data.",194,[[["ref"],["f"]],["ref"]]],[11,"map_split","","Split a `Ref` into multiple `Ref`s for different components of the borrowed data.",194,N],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",195,[[["refmut"],["f"]],["refmut"]]],[11,"map_split","","Split a `RefMut` into multiple `RefMut`s for different components of the borrowed data.",195,N],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",196,[[["t"]],["unsafecell"]]],[11,"into_inner","","Unwraps the value.",196,[[["self"]],["t"]]],[11,"get","","Gets a mutable pointer to the wrapped value.",196,N],[11,"unpaired_surrogate","argmin::prelude::failure::_core::char","Returns the unpaired surrogate which caused this error.",203,[[["self"]],["u16"]]],[11,"payload","argmin::prelude::failure::_core::panic","Returns the payload associated with the panic.",206,[[["self"]],["any"]]],[11,"message","","If the `panic!` macro from the `core` crate (not from `std`) was used with a formatting string and some additional arguments, returns that message ready to be used for example with [`fmt::write`]",206,[[["self"]],["option",["arguments"]]]],[11,"location","","Returns information about the location from which the panic originated, if available.",206,[[["self"]],["option",["location"]]]],[11,"file","","Returns the name of the source file from which the panic originated.",207,[[["self"]],["str"]]],[11,"line","","Returns the line number from which the panic originated.",207,[[["self"]],["u32"]]],[11,"column","","Returns the column from which the panic originated.",207,[[["self"]],["u32"]]],[11,"new","argmin::prelude::failure::_core::pin","Construct a new `Pin` around a pointer to some data of a type that implements `Unpin`.",208,[[["p"]],["pin"]]],[11,"new_unchecked","","Construct a new `Pin` around a reference to some data of a type that may or may not implement `Unpin`.",208,[[["p"]],["pin"]]],[11,"as_ref","","Get a pinned shared reference from this pinned pointer.",208,[[["self"]],["pin"]]],[11,"as_mut","","Get a pinned mutable reference from this pinned pointer.",208,[[["self"]],["pin"]]],[11,"set","","Assign a new value to the memory behind the pinned reference.",208,N],[11,"map_unchecked","","Construct a new pin by mapping the interior value.",208,[[["pin"],["f"]],["pin"]]],[11,"get_ref","","Get a shared reference out of a pin.",208,[[["pin"]],["t"]]],[11,"into_ref","","Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.",208,[[["pin"]],["pin"]]],[11,"get_mut","","Get a mutable reference to the data inside of this `Pin`.",208,[[["pin"]],["t"]]],[11,"get_mut_unchecked","","Get a mutable reference to the data inside of this `Pin`.",208,[[["pin"]],["t"]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",208,[[["pin"],["f"]],["pin"]]],[11,"peek","argmin::prelude::failure::_core::iter","Returns a reference to the next() value without advancing the iterator.",219,[[["self"]],["option"]]],[11,"as_slice","argmin::prelude::failure::_core::slice","View the underlying data as a subslice of the original data.",241,N],[11,"into_slice","","View the underlying data as a subslice of the original data.",242,N],[11,"remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",254,N],[11,"into_remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",255,N],[11,"remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",258,N],[11,"into_remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",259,N],[11,"from_str","argmin::prelude::failure::_core::str::lossy","",264,[[["str"]],["utf8lossy"]]],[11,"from_bytes","","",264,N],[11,"chunks","","",264,[[["self"]],["utf8lossychunksiter"]]],[11,"valid_up_to","argmin::prelude::failure::_core::str","Returns the index in the given string up to which valid UTF-8 was verified.",267,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",267,[[["self"]],["option",["usize"]]]],[11,"as_str","","View the underlying data as a subslice of the original data.",268,[[["self"]],["str"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",269,[[["self"]],["str"]]],[11,"new","argmin::prelude::failure::_core::hash","Creates a new `SipHasher` with the two initial keys set to 0.",287,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",287,[[["u64"],["u64"]],["siphasher"]]],[11,"pad_integral","argmin::prelude::failure::_core::fmt","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",289,[[["self"],["bool"],["str"],["str"]],["result",["error"]]]],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",289,[[["self"],["str"]],["result",["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",289,[[["self"],["str"]],["result",["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",289,[[["self"],["arguments"]],["result",["error"]]]],[11,"flags","","Flags for formatting",289,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",289,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",289,[[["self"]],["option",["alignment"]]]],[11,"width","","Optionally specified integer width that the output should be.",289,[[["self"]],["option",["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",289,[[["self"]],["option",["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",289,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",289,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",289,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",289,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",289,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",289,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",289,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",289,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",289,[[["self"]],["debugmap"]]],[11,"field","","Adds a new field to the generated struct output.",291,[[["self"],["str"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",291,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the map output.",292,[[["self"],["debug"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map output.",292,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",292,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the list output.",293,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list output.",293,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",293,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the set output.",294,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set output.",294,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",294,[[["self"]],["result",["error"]]]],[11,"field","","Adds a new field to the generated tuple struct output.",295,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",295,[[["self"]],["result",["error"]]]],[11,"new","argmin::prelude::failure::_core::time","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",296,[[["u64"],["u32"]],["duration"]]],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",296,[[["u64"]],["duration"]]],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",296,[[["u64"]],["duration"]]],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",296,[[["u64"]],["duration"]]],[11,"from_nanos","","Creates a new `Duration` from the specified number of nanoseconds.",296,[[["u64"]],["duration"]]],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",296,[[["self"]],["u64"]]],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in whole milliseconds.",296,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in whole microseconds.",296,[[["self"]],["u32"]]],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",296,[[["self"]],["u32"]]],[11,"as_millis","","Returns the total number of whole milliseconds contained by this `Duration`.",296,[[["self"]],["u128"]]],[11,"as_micros","","Returns the total number of whole microseconds contained by this `Duration`.",296,[[["self"]],["u128"]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this `Duration`.",296,[[["self"]],["u128"]]],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",296,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if overflow occurred.",296,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",296,[[["self"],["u32"]],["option",["duration"]]]],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",296,[[["self"],["u32"]],["option",["duration"]]]],[11,"as_float_secs","","Returns the number of seconds contained by this `Duration` as `f64`.",296,[[["self"]],["f64"]]],[11,"from_float_secs","","Creates a new `Duration` from the specified number of seconds.",296,[[["f64"]],["duration"]]],[11,"mul_f64","","Multiply `Duration` by `f64`.",296,[[["self"],["f64"]],["duration"]]],[11,"div_f64","","Divide `Duration` by `f64`.",296,[[["self"],["f64"]],["duration"]]],[11,"div_duration","","Divide `Duration` by `Duration` and return `f64`.",296,[[["self"],["duration"]],["f64"]]],[11,"map","argmin::prelude::failure::_core::task","Change the ready value of this `Poll` with the closure provided",113,[[["self"],["f"]],["poll"]]],[11,"is_ready","","Returns whether this is `Poll::Ready`",113,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Poll::Pending`",113,[[["self"]],["bool"]]],[11,"map_ok","","Change the success value of this `Poll` with the closure provided",113,[[["self"],["f"]],["poll",["result"]]]],[11,"map_err","","Change the error value of this `Poll` with the closure provided",113,[[["self"],["f"]],["poll",["result"]]]],[11,"new","","Constructs a new `LocalWaker` directly.",297,[[["nonnull",["unsafewake"]]],["localwaker"]]],[11,"as_waker","","Borrows this `LocalWaker` as a `Waker`.",297,[[["self"]],["waker"]]],[11,"into_waker","","Converts this `LocalWaker` into a `Waker`.",297,[[["self"]],["waker"]]],[11,"wake","","Wake up the task associated with this `LocalWaker`.",297,N],[11,"will_wake","","Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.",297,[[["self"],["localwaker"]],["bool"]]],[11,"will_wake_nonlocal","","Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.",297,[[["self"],["waker"]],["bool"]]],[11,"new","","Constructs a new `Waker` directly.",298,[[["nonnull",["unsafewake"]]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",298,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",298,[[["self"],["waker"]],["bool"]]],[11,"will_wake_local","","Returns whether or not this `Waker` and `other` `LocalWaker` awaken the same task.",298,[[["self"],["localwaker"]],["bool"]]],[11,"from_size_align","argmin::prelude::failure::_core::alloc","Constructs a `Layout` from a given `size` and `align`, or returns `LayoutErr` if either of the following conditions are not met:",299,[[["usize"],["usize"]],["result",["layout","layouterr"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",299,[[["usize"],["usize"]],["layout"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",299,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this layout.",299,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",299,[[],["layout"]]],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",299,[[["t"]],["layout"]]],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",299,[[["self"],["usize"]],["result",["layout","layouterr"]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",299,[[["self"],["usize"]],["usize"]]],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",299,[[["self"],["usize"]],["result",["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",299,[[["self"],["layout"]],["result",["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",299,[[["self"],["usize"]],["result",["layout","layouterr"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",299,[[["self"],["layout"]],["result",["layout","layouterr"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",299,[[["usize"]],["result",["layout","layouterr"]]]],[11,"description","","",302,[[["self"]],["str"]]],[11,"new","argmin::prelude::failure","Creates a new context without an underlying error message.",310,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",310,[[["self"]],["d"]]],[11,"map","","Maps `Context<D>` to `Context<T>` by applying a function to the contained context.",310,[[["self"],["f"]],["context"]]],[11,"into_inner","","Unwraps this into the inner error.",311,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",311,[[["self"]],["e"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",312,[[],["backtrace"]]],[11,"new","argmin::prelude","",313,[[],["box",["writetofile"]]]]],"paths":[[8,"ArgminSolver"],[8,"ArgminNextIter"],[8,"ArgminLog"],[8,"ArgminWrite"],[8,"ArgminOperator"],[8,"ArgminLineSearch"],[8,"ArgminTrustRegion"],[8,"ArgminNLCGBetaUpdate"],[4,"TerminationReason"],[4,"ArgminError"],[3,"ArgminKV"],[8,"ArgminScale"],[3,"ArgminResult"],[8,"ArgminScaledSub"],[8,"ArgminAdd"],[8,"ArgminZero"],[8,"ArgminNorm"],[8,"Fail"],[3,"Wrapping"],[4,"FpCategory"],[8,"Fn"],[8,"Into"],[8,"ExactSizeIterator"],[8,"Ord"],[8,"Drop"],[8,"From"],[4,"Result"],[4,"Option"],[8,"DoubleEndedIterator"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Extend"],[8,"AsMut"],[8,"FnMut"],[8,"FnOnce"],[8,"Iterator"],[8,"Clone"],[8,"AsRef"],[8,"Default"],[8,"PartialOrd"],[8,"AddAssign"],[4,"Bound"],[8,"Neg"],[4,"GeneratorState"],[8,"BitXorAssign"],[8,"RangeBounds"],[8,"Index"],[8,"ShlAssign"],[8,"Div"],[8,"ShrAssign"],[8,"Add"],[8,"Deref"],[8,"DivAssign"],[8,"BitAnd"],[8,"SubAssign"],[3,"Range"],[8,"Shr"],[8,"Sub"],[8,"BitOr"],[8,"Rem"],[8,"IndexMut"],[8,"BitXor"],[3,"RangeTo"],[8,"Not"],[8,"MulAssign"],[8,"Try"],[8,"BitOrAssign"],[8,"DerefMut"],[3,"RangeToInclusive"],[8,"BitAndAssign"],[8,"RemAssign"],[8,"Generator"],[8,"Mul"],[3,"RangeFrom"],[8,"Shl"],[4,"Ordering"],[3,"Reverse"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[8,"FixedSizeArray"],[4,"Ordering"],[3,"UnicodeVersion"],[8,"Step"],[8,"Product"],[8,"Sum"],[8,"FromIterator"],[3,"TraitObject"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"Utf8LossyChunk"],[8,"FromStr"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[4,"Alignment"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Future"],[8,"UnsafeWake"],[4,"Poll"],[3,"Excess"],[8,"GlobalAlloc"],[8,"Alloc"],[3,"CpuidResult"],[8,"AsFail"],[8,"ResultExt"],[8,"ArgminSub"],[8,"ArgminDot"],[8,"ArgminWeightedDot"],[8,"ArgminMul"],[8,"ArgminScaledAdd"],[8,"ArgminInv"],[3,"ConjugateGradient"],[3,"NonlinearConjugateGradient"],[3,"FletcherReeves"],[3,"PolakRibiere"],[3,"PolakRibierePlus"],[3,"HestenesStiefel"],[3,"SteepestDescent"],[3,"Landweber"],[3,"BacktrackingLineSearch"],[8,"LineSearchCondition"],[3,"ArmijoCondition"],[3,"WolfeCondition"],[3,"StrongWolfeCondition"],[3,"GoldsteinCondition"],[3,"HagerZhangLineSearch"],[3,"MoreThuenteLineSearch"],[3,"Newton"],[3,"NewtonCG"],[4,"SATempFunc"],[3,"SimulatedAnnealing"],[3,"CauchyPoint"],[3,"Dogleg"],[3,"Steihaug"],[3,"TrustRegion"],[3,"ArgminIterationData"],[3,"NoOperator"],[3,"Error"],[3,"ArgminWriter"],[3,"ArgminLogger"],[3,"ArgminBase"],[3,"ArgminSlogLogger"],[3,"Causes"],[3,"SyncFailure"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"NonZeroUsize"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"Discriminant"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"NonNull"],[3,"PhantomData"],[3,"Pinned"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"TypeId"],[3,"TryFromSliceError"],[3,"EscapeDefault"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"CharTryFromError"],[3,"DecodeUtf16Error"],[3,"ParseCharError"],[3,"DecodeUtf16"],[3,"PanicInfo"],[3,"Location"],[3,"Pin"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"StepBy"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Flatten"],[3,"Fuse"],[3,"Inspect"],[3,"Repeat"],[3,"RepeatWith"],[3,"Empty"],[3,"Once"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"c_void"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"RChunks"],[3,"RChunksMut"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Utf8Lossy"],[3,"Utf8LossyChunksIter"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"EncodeUtf16"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Error"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugMap"],[3,"DebugList"],[3,"DebugSet"],[3,"DebugTuple"],[3,"Duration"],[3,"LocalWaker"],[3,"Waker"],[3,"Layout"],[3,"LayoutErr"],[3,"AllocErr"],[3,"CannotReallocInPlace"],[3,"__m64"],[3,"__m128"],[3,"__m128i"],[3,"__m128d"],[3,"__m256d"],[3,"__m256i"],[3,"__m256"],[3,"Context"],[3,"Compat"],[3,"Backtrace"],[3,"WriteToFile"]]};
initSearch(searchIndex);
